[
  {
    "path": "bin/main/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 9
    }
  },
  {
    "path": "bin/main/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 39
    }
  },
  {
    "path": "bin/main/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cURL value\u003d\"@JelphaBotTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 60
    }
  },
  {
    "path": "bin/main/view/ResultDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 9
    }
  },
  {
    "path": "bin/main/view/StatusBarFooter.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 12
    }
  },
  {
    "path": "bin/test/view/UiPartTest/invalidFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 4
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "mainClassName \u003d \u0027seedu.jelphabot.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    compile \u0027org.controlsfx:controlsfx:8.40.14\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    archiveName \u003d \u0027jelphaBot.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 3,
      "eedenong": 1,
      "-": 152
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.name \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "git config user.moduleCode \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "Clouddoggo": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "Clouddoggo": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.storage.JelphaBotStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.storage.JsonJelphaBotStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing JelphaBot ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        JelphaBotStorage jelphaBotStorage \u003d new JsonJelphaBotStorage("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            userPrefs.getJelphaBotFilePath(), userPrefs.getRemindersFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        storage \u003d new StorageManager(jelphaBotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Optional\u003cReadOnlyJelphaBot\u003e jelphaBotOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Optional\u003cReadOnlyJelphaBot\u003e jelphaBotReminderOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ReadOnlyJelphaBot initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ReadOnlyJelphaBot initialReminderData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            jelphaBotOptional \u003d storage.readJelphaBot();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            jelphaBotReminderOptional \u003d storage.readJelphaBot(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (!jelphaBotOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample JelphaBot\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            initialData \u003d jelphaBotOptional.orElseGet(SampleDataUtil::getSampleJelphaBot);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            initialReminderData \u003d jelphaBotReminderOptional.orElseGet(SampleDataUtil::getSampleJelphaBot);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty JelphaBot\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            initialData \u003d new JelphaBot();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            initialReminderData \u003d new JelphaBot();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty JelphaBot\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            initialData \u003d new JelphaBot();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            initialReminderData \u003d new JelphaBot();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        initialData.setReminders(initialReminderData.getReminderList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty JelphaBot\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        logger.info(\"Starting JelphaBot \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping JelphaBot ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 38,
      "yapdianhao": 11,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        windowCoordinates \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "eedenong": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date format! \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                 + \"Date should be one of these possible formats:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                 + \"[d-MMM-uuuu], E.g. 1-Jan-2020\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                 + \"[d/MMM/uuuu], E.g. 1/Jan/2020\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                 + \"[MMM-d-uuuu], E.g. Jan-1-2020\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                 + \"[MMM/d/uuuu], E.g. Jan/1/2020\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_INVALID_YEARMONTH_FORMAT \u003d \"Invalid YearMonth format! YearMonth should be one \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"of these possible formats:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[MMM-uuuu], E.g. Jan-2020\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[MMM/uuuu], E.g. Jan/2020\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uuuu/MMM], E.g. 2020/Jan\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uuuu-MMM], E.g. 2020-Jan\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uuuu-MM], E.g. 2020-01\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uuuu/MM], E.g. 2020/01\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uu-MM], E.g. 20-01\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uu/MM], E.g. 20/01\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_COMPLIMENT \u003d \"Good work! (:\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_ENCOURAGEMENT \u003d \"You can do better than this!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_CRITICISM \u003d \"Do better! You have many unfinished tasks that are past their\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                       + \" due date!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_NO_TIMERS \u003d \"There are no tasks being timed at the moment.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "Clouddoggo": 7,
      "-": 10,
      "alam8064": 16
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 37,
      "alam8064": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/DateUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueAfterDatePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueBeforeDatePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Helper functions for handling dates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Get the date at the time the method is called."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return LocalDate representing the current day\u0027s date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static LocalDate getDateToday() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Get the date at the time one day after the method is called."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return LocalDate representing the next day\u0027s date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static LocalDate getDateTomorrow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Get the date at the time one week after the method is called."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return LocalDate representing the date one week from now."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static LocalDate getDateNextWeek() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return LocalDate.now().plusWeeks(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Convert a Java7 Date object to a Java8 LocalDate object representing the same instant in time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param date Java7 Date object to be converted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return LocalDate with the same date as the input Date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static LocalDate dateToLocalDate(Date date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return date.toInstant()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   .atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   .toLocalDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Convert a Java7 Date object to a Java8 LocalDateTime object representing the same instant in time."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param date Java7 Date object to be converted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return LocalDate with the same date and time as the input Date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static LocalDateTime dateToLocalDateTime(Date date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return date.toInstant()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   .atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   .toLocalDateTime();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a predicate which filters tasks with a due date before the instant the method was called."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Predicate\u003cTask\u003e getOverduePredicate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new TaskDueBeforeDatePredicate();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a predicate which filters tasks with a due date the same day as the instant the method was called."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Predicate\u003cTask\u003e getDueTodayPredicate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return new TaskDueAfterDatePredicate(getDateToday()).and(new TaskDueBeforeDatePredicate(getDateTomorrow()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a predicate which filters tasks with a due date between one and seven days after the instant the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * method was called."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Predicate\u003cTask\u003e getDueThisWeekPredicate() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new TaskDueAfterDatePredicate(getDateTomorrow()).and(new TaskDueBeforeDatePredicate(getDateNextWeek()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a predicate which filters tasks with a due date more than seven days after the instant the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * method was called."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Predicate\u003cTask\u003e getDueSomedayPredicate() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new TaskDueAfterDatePredicate(getDateNextWeek());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 97,
      "alam8064": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.GroupedTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.GroupedTaskList.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.PinnedTaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns the JelphaBot."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @see seedu.jelphabot.model.Model#getJelphaBot()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ReadOnlyJelphaBot getJelphaBot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of tasks in the Calendar."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredCalendarTaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the completed tasks in the task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredByCompleteTaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns an unmodifiable view of the tasks that were completed within the day."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredByCompletedTodayTaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the incomplete tasks in the task list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredByIncompleteTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns a wrapper for categorised tasks in the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    GroupedTaskList getGroupedTaskList(Category category);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns an unmodifiable view of the incomplete tasks that are due today in"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * the task list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredByIncompleteDueTodayTaskList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns an unmodifiable view of the incomplete tasks that are due soon,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * as specified by the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredByReminder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the user\u0027s productivity."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    ProductivityList getProductivityList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns an unmodifiable view of the user\u0027s summary."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    SummaryList getSummaryList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Path getJelphaBotFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns the GUI settings for a popup window"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    GuiSettings getPopUpWindowGuiSettings();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updates the filter of the filtered calendar task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    void updateFilteredCalendarTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    PinnedTaskList getPinnedTaskList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 32,
      "yapdianhao": 6,
      "Clouddoggo": 13,
      "eedenong": 22,
      "-": 34,
      "alam8064": 13
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getDueTodayPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.JelphaBotParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.GroupedTaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.PinnedTaskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.ReminderPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskCompletedWithinDayPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsCompletedPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsIncompletePredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final JelphaBotParser jelphaBotParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        jelphaBotParser \u003d new JelphaBotParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Command command \u003d jelphaBotParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            storage.saveJelphaBot(model.getJelphaBot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            storage.saveJelphaBot(model.getJelphaBot(), true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ReadOnlyJelphaBot getJelphaBot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return model.getJelphaBot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredCalendarTaskList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return model.getFilteredCalendarTaskList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // makeshift implementation to ensure that build still runs as per normal"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // TODO: implement this method in a way that does not require the creation of another UniqueTaskList"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredByCompleteTaskList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e filteredTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskIsCompletedPredicate predicate \u003d new TaskIsCompletedPredicate();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new FilteredList\u003c\u003e(filteredTasks, predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredByCompletedTodayTaskList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e filteredTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskCompletedWithinDayPredicate pred \u003d new TaskCompletedWithinDayPredicate();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new FilteredList\u003c\u003e(filteredTasks, pred);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredByReminder() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //logger.info(\"reached filtered by reminder\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        List\u003cTask\u003e taskList \u003d model.getTaskListFromJelphaBot();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        List\u003cReminder\u003e reminderList \u003d model.getReminderListFromJelphaBot();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e filteredTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ReminderPredicate reminderPredicate \u003d new ReminderPredicate(taskList, reminderList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        FilteredList\u003cTask\u003e filteredList \u003d new FilteredList\u003c\u003e(filteredTasks, reminderPredicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        uniqueTaskList.setTasks(filteredList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //logger.info(\"\" + filteredList.size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return uniqueTaskList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // makeshift implementation to ensure that build still runs as per normal"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // TODO: implement this method in a way that does not require the creation of another UniqueTaskList"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredByIncompleteTaskList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e filteredTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskIsIncompletePredicate taskIncompletePredicate \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new FilteredList\u003c\u003e(filteredTasks, taskIncompletePredicate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredByIncompleteDueTodayTaskList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e filteredTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskIsIncompletePredicate taskIncompletePredicate \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        FilteredList\u003cTask\u003e filteredIncompleteList \u003d new FilteredList\u003c\u003e(filteredTasks, taskIncompletePredicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new FilteredList\u003c\u003e(filteredIncompleteList, getDueTodayPredicate());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedTaskList getGroupedTaskList(GroupedTaskList.Category category) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return model.getGroupedTaskList(category);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public PinnedTaskList getPinnedTaskList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return model.getPinnedTaskList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ProductivityList getProductivityList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return model.getProductivityList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public SummaryList getSummaryList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return model.getSummaryList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return model.getJelphaBotFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return model.getRemindersFilePath();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public GuiSettings getPopUpWindowGuiSettings() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return model.getPopUpWindowGuiSettings();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updates the filter of the filtered calendar task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void updateFilteredCalendarTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        model.updateFilteredCalendarTaskList(predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 35,
      "yapdianhao": 9,
      "Clouddoggo": 7,
      "eedenong": 66,
      "-": 50,
      "alam8064": 17
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Adds a Task to the task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the task list.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"    \" + PREFIX_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"    \" + PREFIX_DATETIME + \"DATETIME in format MMM-dd-YYYY HH mm\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"    \" + PREFIX_MODULE_CODE + \"MODULE_CODE\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"    \" + \"[\" + PREFIX_PRIORITY + \"PRIORITY (-1, 0 or 1), DEFAULTS TO 1]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"    \" + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Assignment 1 \" + PREFIX_DATETIME + \"Jan-01-2020 23 59 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS3230 \" + PREFIX_PRIORITY + \"1\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 21,
      "yapdianhao": 4,
      "Clouddoggo": 3,
      "eedenong": 2,
      "-": 32,
      "alam8064": 5
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/CalendarCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.calendar.CalendarDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.ui.CalendarPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.ui.MainWindow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Lists all tasks in task list whose date corresponds with the specified date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Shows the tasks that are due on the specified date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_SHORTCUT_UPPER \u003d \":C\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_SHORTCUT_LOWER \u003d \":c\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    //update this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all task that is under the due date specified.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                   + \"Parameters: DATE \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD + \" Jan-1-2020\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT \u003d \"Switched to calendar panel.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_SWITCH_CALENDAR_VIEW_ACKNOWLEDGEMENT \u003d \"Switched calendar panel to : %s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_SWITCH_CALENDAR_TODAY_ACKNOWLEDGEMENT \u003d \"Switched calendar panel to : %s, \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                                   + \"displaying all your tasks \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                                   + \"due today!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final TaskDueWithinDayPredicate predicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final YearMonth yearMonth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarPanel calendarPanel \u003d MainWindow.getCalendarPanel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        predicate \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        yearMonth \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarCommand(TaskDueWithinDayPredicate predicate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        yearMonth \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarCommand(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.predicate \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.yearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarCommand(TaskDueWithinDayPredicate predicate, YearMonth yearMonth) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.yearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (predicate \u003d\u003d null \u0026\u0026 yearMonth \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new CommandResult(MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT, false, false).isShowCalendar();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else if (yearMonth \u003d\u003d null) { //switch task list for specific dates"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            model.updateFilteredCalendarTaskList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            LocalDate date \u003d predicate.getDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            if (date.getMonthValue() \u003d\u003d calendarPanel.getCalendarMonth()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                if (calendarPanel.isTodayHighlighted()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    calendarPanel.getHighlightedDay().removeHighlightedToday();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    calendarPanel.getHighlightedDay().removeHighlightedDay();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                int dayIndex \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                if (date.equals(DateUtil.getDateToday())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    CalendarPanel.getDayCard(dayIndex).highlightToday();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    CalendarPanel.getDayCard(dayIndex).highlightDay();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                calendarPanel.setHighlightedDay(dayIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredCalendarTaskList().size()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else if (predicate \u003d\u003d null) { //switch calendar view"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            CalendarDate newDate \u003d new CalendarDate(yearMonth.atDay(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.changeMonthYearLabel(yearMonth);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.fillGridPane(newDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SWITCH_CALENDAR_VIEW_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                calendarPanel.getMonthYear()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else { //switch calendar view and task list for today"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            CalendarDate newDate \u003d new CalendarDate(yearMonth.atDay(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.changeMonthYearLabel(yearMonth);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.fillGridPane(newDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            model.updateFilteredCalendarTaskList(predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.getHighlightedDay().removeHighlightedDay();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            CalendarPanel.getDayCard(DateUtil.getDateToday().getDayOfMonth()).highlightToday();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.setHighlightedDay(DateUtil.getDateToday().getDayOfMonth());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SWITCH_CALENDAR_TODAY_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                calendarPanel.getMonthYear()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                   || (other instanceof CalendarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                           \u0026\u0026 predicate.equals(((CalendarCommand) other).predicate)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                           \u0026\u0026 yearMonth.equals(((CalendarCommand) other).yearMonth)); // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 8,
      "Clouddoggo": 2,
      "alam8064": 110
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"JelphaBot has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        model.setJelphaBot(new JelphaBot());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 7,
      "Clouddoggo": 3,
      "eedenong": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private SwitchTab toSwitch \u003d SwitchTab.STAY_ON_CURRENT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should switch to the Task List tab"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return Sets the \"switch to window\" flag to Task List."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult isShowDateTaskList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.toSwitch \u003d SwitchTab.TASK_LIST_DATE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should switch to the Task List tab"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return Sets the \"switch to window\" flag to Task List."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult isShowModuleTaskList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.toSwitch \u003d SwitchTab.TASK_LIST_MODULE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should switch to the productivity tab."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return Sets the \"toSwitch\" flag to Productivity."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult isShowProductivity() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.toSwitch \u003d SwitchTab.PRODUCTIVITY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should switch to the Calendar tab."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return Sets the \"toSwitch\" flag to Calendar."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult isShowCalendar() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.toSwitch \u003d SwitchTab.CALENDAR;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should switch to the Summary tab."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return Sets the \"toSwitch\" flag to Summary."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult isShowSummary() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.toSwitch \u003d SwitchTab.SUMMARY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public SwitchTab getTabSwitch() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return toSwitch;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   \u0026\u0026 toSwitch \u003d\u003d otherCommandResult.toSwitch;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, toSwitch);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Enum representing switch that indicates if the command should switch to another window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public enum SwitchTab {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        CALENDAR,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        PRODUCTIVITY,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        SUMMARY,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TASK_LIST_DATE,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TASK_LIST_MODULE,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        STAY_ON_CURRENT"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 71,
      "Clouddoggo": 3,
      "eedenong": 3,
      "-": 59,
      "alam8064": 2
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ViewTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \": Deletes the task identified by the index number used in the \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"displayed task list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_DELETE_RUNNING_TASK \u003d \"Deleted Task with running timer: %1$s \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ViewTaskList lastShownList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (taskToDelete.isBeingTimed()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_RUNNING_TASK, taskToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                   || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 15,
      "yapdianhao": 1,
      "Clouddoggo": 13,
      "eedenong": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/DeleteReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Deletes a reminder according to the task\u0027s index."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class DeleteReminderCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delrem\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                   + \": Deletes the reminder identified by the index number\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                   + \" of the task used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                   + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String MESSAGE_DELETE_REMINDER_SUCCESS \u003d \"Deleted Reminder for task %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String MESSAGE_DELETE_REMINDER_FAILURE \u003d \"Reminder not found!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public DeleteReminderCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Reminder toDelete \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        List\u003cReminder\u003e reminderList \u003d model.getFilteredReminderList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Reminder reminder : reminderList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (reminder.getIndex().equals(targetIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                toDelete \u003d reminder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (toDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_REMINDER_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            model.deleteReminder(toDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_REMINDER_SUCCESS, this.targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   || (other instanceof DeleteReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                           \u0026\u0026 targetIndex.equals(((DeleteReminderCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 59
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ViewTaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Marks the specified as done by updating it\u0027s status to COMPLETE."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        + \": Marks the task specified by the index number as completed.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_MARK_TASK_COMPLETE_SUCCESS \u003d \"Marked task as completed: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_TASK_ALREADY_MARKED_COMPLETE \u003d \"The specified task has already \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                                                          + \"been marked as complete!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param index of the task in the filtered task list to mark done"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public DoneCommand(Index index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ViewTaskList lastShownList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task taskToMarkDone \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task doneTask \u003d createDoneTask(taskToMarkDone);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        doneTask.setDoneTime();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (taskToMarkDone.equals(doneTask)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new CommandException(MESSAGE_TASK_ALREADY_MARKED_COMPLETE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setTask(taskToMarkDone, doneTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_TASK_COMPLETE_SUCCESS, doneTask));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Creates and returns a {@code Task} with the updated COMPLETE status,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * by copying all the details of the given {@code task} and creating a new"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * {@code Task} object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param task Task object to get the relevant details from."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return Task object with it\u0027s status set as COMPLETE."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static Task createDoneTask(Task task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Description description \u003d task.getDescription();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ModuleCode moduleCode \u003d task.getModuleCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d task.getTags();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DateTime dateTime \u003d task.getDateTime();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Status status \u003d Status.COMPLETE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Priority priority \u003d task.getPriority();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        TimeSpent timeSpent \u003d task.getTimeSpent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new Task(description, status, dateTime, moduleCode, priority, tags, timeSpent);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (!(other instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand d \u003d (DoneCommand) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return index.equals(d.index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "Clouddoggo": 6,
      "eedenong": 99
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ViewTaskList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Edits the details of an existing task in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"Parameters:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"    \" + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_DATETIME + \"DATETIME]\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_MODULE_CODE + \"MODULE_CODE]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_PRIORITY + \"PRIORITY (-1, 0, or 1)]\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_MODULE_CODE + \"CS2105 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + PREFIX_DATETIME + \"Jan-1-2020 20 20 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + PREFIX_TAG + \"Ungraded\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_CANNOT_EDIT_TASK \u003d \"This task cannot be edited while the timer is running.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param index              of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ModuleCode updatedModuleCode \u003d editTaskDescriptor.getModuleCode().orElse(taskToEdit.getModuleCode());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DateTime dateTime \u003d editTaskDescriptor.getDateTime().orElse(taskToEdit.getDateTime());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Status updatedStatus \u003d taskToEdit.getStatus();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Priority updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        TimeSpent timeSpent \u003d taskToEdit.getTimeSpent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new Task(updatedDescription, updatedStatus, dateTime, updatedModuleCode, updatedPriority, updatedTags,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            timeSpent"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ViewTaskList lastShownList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else if (taskToEdit.isBeingTimed()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_EDIT_TASK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * replace the corresponding field value of the task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        private DateTime dateTime;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public EditTaskDescriptor() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            setDateTime(toCopy.dateTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, dateTime, moduleCode, tags, priority);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * {@code tags} is used internally."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * Returns an unmodifiable tag set, which throws"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * {@code UnsupportedOperationException} if modification is attempted. Returns"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public void setDateTime(DateTime dateTime) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public Optional\u003cDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return getDescription().equals(e.getDescription()) \u0026\u0026 getDateTime().equals(e.getDateTime())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                       \u0026\u0026 getModuleCode().equals(e.getModuleCode())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                       \u0026\u0026 getPriority().equals(e.getPriority()) \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 95,
      "yapdianhao": 1,
      "Clouddoggo": 39,
      "eedenong": 3,
      "-": 98,
      "alam8064": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting JelphaBot as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Finds and lists all tasks in task list whose task description contains any of the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * argument keywords. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\" + \"Example: \" + COMMAND_WORD + \" assignment\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public FindCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 8,
      "Clouddoggo": 6,
      "-": 26,
      "alam8064": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Lists all tasks in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \":T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String COMMAND_SHORTCUT_TWO \u003d \":t\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DATE_GROUPING \u003d \"date\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MODULE_GROUPING \u003d \"module\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks by %s.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT \u003d \"Switched to Task List panel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches to Task List panel and lists all tasks.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"This command groups tasks by Date by default, but you can also \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"group by module. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"Parameters:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"    \" + \"[\" + DATE_GROUPING + \"]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"    \" + \"[\" + MODULE_GROUPING + \"]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD + \" module\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final String grouping;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.grouping \u003d \"none\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ListCommand(String grouping) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.grouping \u003d grouping;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        switch (grouping) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"module\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, grouping)).isShowModuleTaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, grouping)).isShowDateTaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"none\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new CommandResult(MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowDateTaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 38,
      "Clouddoggo": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ProductivityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Switches to the productivity panel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class ProductivityCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"productivity\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_SHORTCUT_UPPER \u003d \":P\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_SHORTCUT_LOWER \u003d \":p\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows productivity panel.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT \u003d \"Switched to productivity panel.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new CommandResult(MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowProductivity();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "Clouddoggo": 22
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_REMIND_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_REMIND_HOUR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Displays to the user a list of tasks that will due in a week."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This task already has a reminder!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        + \" Please delete the current reminder with delrem [INDEX] first!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String MESSAGE_TASK_ALREADY_MARKED_COMPLETE \u003d \"The specified task has already \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                                          + \"been marked as complete!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added reminder for task %d!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String COMMAND_WORD_UPPER \u003d \":R\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String COMMAND_WORD_LOWER \u003d \":r\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks a reminder on the given task \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                   + \" on the specified date. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                   + \"Parameters:\\n\" + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_REMIND_DAY"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                   + \"DAYS TO REMIND (between 0 and 7)]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_REMIND_HOUR"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                   + \"HOURS TO REMIND (between 0 and 24)]\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final Reminder reminder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderCommand(Index index, Reminder reminder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (model.hasReminder(reminder)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            //model.setReminder(reminder, reminder);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Task taskMarkedWithReminder \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Task taskToCompare \u003d DoneCommand.createDoneTask(taskMarkedWithReminder);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (taskMarkedWithReminder.equals(taskToCompare)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new CommandException(MESSAGE_TASK_ALREADY_MARKED_COMPLETE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        model.addReminder(reminder);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, reminder.getIndex().getOneBased()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   || (other instanceof ReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                           \u0026\u0026 index.equals(((ReminderCommand) other).index)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "yapdianhao": 71
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ShowCompletedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsCompletedPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Displays to the user a list of tasks that are currently of the COMPLETE status."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class ShowCompletedCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show-completed\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows all completed tasks in the task list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Displaying all completed tasks\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Predicate\u003cTask\u003e COMPLETED_PREDICATE \u003d new TaskIsCompletedPredicate();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.updateFilteredTaskList(COMPLETED_PREDICATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS).isShowDateTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "eedenong": 27
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ShowIncompleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsIncompletePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Displays to the user a list of tasks that are currently of the INCOMPLETE status."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class ShowIncompleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show-incomplete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows all incomplete tasks in the task list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Displaying all incomplete tasks\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Predicate\u003cTask\u003e INCOMPLETE_PREDICATE \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.updateFilteredTaskList(INCOMPLETE_PREDICATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS).isShowDateTaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "eedenong": 28
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/StartTimerCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.ViewTaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Starts a timer for a task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class StartTimerCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \": Starts the timer for the task specified by the index number.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Started timer for task %d. %s %s.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_TASK_ALREADY_TIMED \u003d \"Task has already been marked as done and cannot be timed.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_TIMER_ALREADY_STARTED \u003d \"Timer for this task has already been started.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public StartTimerCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ViewTaskList lastShownList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task dummy \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task taskToTime \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (taskToTime.getStatus() \u003d\u003d Status.COMPLETE) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(MESSAGE_TASK_ALREADY_TIMED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else if (taskToTime.isBeingTimed()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(MESSAGE_TIMER_ALREADY_STARTED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        taskToTime.startTimer();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setTask(dummy, taskToTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            taskToTime.getModuleCode().toString(), taskToTime.getDescription().toString()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!(other instanceof StartTimerCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StartTimerCommand d \u003d (StartTimerCommand) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return targetIndex.equals(d.targetIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 75,
      "eedenong": 2
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/StopTimerCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.ViewTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Starts a timer for a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class StopTimerCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stop\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \": Stops the timer for the task specified by the index number.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Stopped timer for task %d. %s %s.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                     + \"Time spent on this task: %s.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_NO_TIMER_TO_STOP \u003d \"No timers were started.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public StopTimerCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ViewTaskList lastShownList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task dummy \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task taskToStop \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!taskToStop.isBeingTimed()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(MESSAGE_NO_TIMER_TO_STOP);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        taskToStop.stopTimer();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setTask(dummy, taskToStop);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            taskToStop.getModuleCode().toString(), taskToStop.getDescription().toString(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            taskToStop.getTimeSpent().toString()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!(other instanceof StopTimerCommand)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StopTimerCommand d \u003d (StopTimerCommand) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return targetIndex.equals(d.targetIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 73,
      "eedenong": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/SummaryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Switches to the summary panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_SHORTCUT_UPPER \u003d \":S\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_SHORTCUT_LOWER \u003d \":s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows summary panel.\\n\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT \u003d \"Switched to summary panel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new CommandResult(MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT, false, false).isShowSummary();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "Clouddoggo": 4,
      "eedenong": 18
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        args,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        PREFIX_MODULE_CODE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        PREFIX_DATETIME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        PREFIX_TAG"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_MODULE_CODE, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        //noinspection OptionalGetWithoutIsPresent guaranteed present return from ParserUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        //noinspection OptionalGetWithoutIsPresent guaranteed present return from ParserUtil"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        //noinspection OptionalGetWithoutIsPresent guaranteed present return from ParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Priority priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task task \u003d new Task(description, Status.INCOMPLETE, dateTime, moduleCode, priority, tagList,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            new TimeSpent(Duration.ZERO));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 31,
      "yapdianhao": 1,
      "Clouddoggo": 6,
      "-": 36,
      "alam8064": 3
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/CalendarCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Parses input argument and creates a new CalendarCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarCommandParser implements Parser\u003cCalendarCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final DateTimeFormatter ACCEPTED_DATE_FORMATS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"MMM-d-uuuu\"))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"MMM/d/uuuu\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d-MMM-uuuu\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d/MMM/uuuu\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .toFormatter().withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final DateTimeFormatter ACCEPTED_YEARMONTH_FORMATS \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"MMM-uuuu\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"MMM/uuuu\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uuuu/MMM\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uuuu-MMM\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uuuu-MM\"))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uuuu/MM\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uu-MM\"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uu/MM\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .toFormatter().withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Parses the given {@code String} of argument in the context of the CalendarCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * and returns a CalendarCommand object for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        String input \u003d args.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            // throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            //     String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CalendarCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else if (input.length() \u003e 8) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            //case for switching date for task list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            if (!isValidDate(input)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(input, ACCEPTED_DATE_FORMATS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CalendarCommand(new TaskDueWithinDayPredicate(date));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else if (input.equals(\"today\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            YearMonth yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CalendarCommand(new TaskDueWithinDayPredicate(DateUtil.getDateToday()), yearMonth);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            //case for switching month view"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            if (!isValidYearMonth(input)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_YEARMONTH_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            YearMonth yearMonth \u003d YearMonth.parse(input, ACCEPTED_YEARMONTH_FORMATS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CalendarCommand(yearMonth);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Returns if the given string is a valid date format, specified in"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * the ACCEPTED_DATE_FORMATS DateTimeFormatter."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param test The date to be checked."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @return The boolean representing whether the date provided is valid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            LocalDate.parse(test, ACCEPTED_DATE_FORMATS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Returns if the given string is a valid date format, specified in"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * the ACCEPTED_YEARMONTH_FORMATS DateTimeFormatter."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param test The date of yearmonth to be checked."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @return The boolean representing whether the date provided is valid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static boolean isValidYearMonth(String test) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            YearMonth.parse(test, ACCEPTED_YEARMONTH_FORMATS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 104
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final Prefix PREFIX_REMIND_DAY \u003d new Prefix(\"days/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final Prefix PREFIX_REMIND_HOUR \u003d new Prefix(\"hours/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 6,
      "yapdianhao": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/DeleteReminderCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.logic.commands.DeleteReminderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class DeleteReminderCommandParser implements Parser\u003cDeleteReminderCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public DeleteReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return new DeleteReminderCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReminderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 28
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/DoneCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of DoneCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param args user arguments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return a DoneCommand object to be used for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 31
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                args,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                PREFIX_DATETIME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                PREFIX_MODULE_CODE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                PREFIX_TAG"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            editTaskDescriptor.setDescription("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            editTaskDescriptor.setDateTime("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            editTaskDescriptor.setModuleCode(ParserUtil"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                .parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            editTaskDescriptor.setPriority(ParserUtil"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                 .parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 37,
      "Clouddoggo": 1,
      "-": 53,
      "alam8064": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/JelphaBotParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.logic.commands.DeleteReminderCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.ProductivityCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.ShowCompletedCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.ShowIncompleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.StartTimerCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.StopTimerCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class JelphaBotParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        case DeleteReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return new DeleteReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case ListCommand.COMMAND_SHORTCUT: // fallthrough"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case ListCommand.COMMAND_SHORTCUT_TWO: // fallthrough"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        case ReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        case ReminderCommand.COMMAND_WORD_UPPER:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        case ReminderCommand.COMMAND_WORD_LOWER:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return new ReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case ShowCompletedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return new ShowCompletedCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case ShowIncompleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return new ShowIncompleteCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case CalendarCommand.COMMAND_WORD: // fallthrough"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case CalendarCommand.COMMAND_SHORTCUT_UPPER: // fallthrough"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case CalendarCommand.COMMAND_SHORTCUT_LOWER:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CalendarCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case SummaryCommand.COMMAND_WORD: // fallthrough"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case SummaryCommand.COMMAND_SHORTCUT_UPPER: // fallthrough"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case SummaryCommand.COMMAND_SHORTCUT_LOWER:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return new SummaryCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case ProductivityCommand.COMMAND_WORD: // fallthrough"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case ProductivityCommand.COMMAND_SHORTCUT_UPPER: // fallthrough"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case ProductivityCommand.COMMAND_SHORTCUT_LOWER:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new ProductivityCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case StartTimerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new StartTimerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case StopTimerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new StopTimerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 18,
      "yapdianhao": 11,
      "Clouddoggo": 20,
      "eedenong": 14,
      "-": 58,
      "alam8064": 4
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/ListCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Parses input argument and creates a new ListCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String input \u003d args.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case ListCommand.DATE_GROUPING:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new ListCommand(\"date\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case ListCommand.MODULE_GROUPING:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new ListCommand(\"module\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 29
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderDay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderHour;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses a {@code String name} into a {@code Description}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses a {@code String dateTime} into an {@code dateTime}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String trimmedDatetime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDatetime)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new DateTime(trimmedDatetime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses a {@code String module code} into an {@code ModuleCode}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws ParseException if the given {@code module code} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new ModuleCode(trimmedModuleCode);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses a {@code String priority} into an {@code Priority}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return Priority.toPriority(trimmedPriority);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Parses a {@code String reminderDay} into a {@code ReminderDay}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws ParseException if the given {@code reminderDay} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static ReminderDay parseReminderDay(String reminderDay) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(reminderDay);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String trimmedReminderDay \u003d reminderDay.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        int convertedReminderDay \u003d Integer.parseInt(trimmedReminderDay);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!ReminderDay.isValidReminderDay(convertedReminderDay)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new ParseException(ReminderDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new ReminderDay(convertedReminderDay);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Parses a {@code String reminderHour} into a {@code ReminderHour}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws ParseException if the given {@code reminderHour} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static ReminderHour parseReminderHour(String reminderHour) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(reminderHour);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String trimmedReminderHour \u003d reminderHour.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        int convertedReminderHour \u003d Integer.parseInt(trimmedReminderHour);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!ReminderHour.isValidReminderHour(convertedReminderHour)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new ParseException(ReminderHour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new ReminderHour(convertedReminderHour);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 54,
      "yapdianhao": 34,
      "Clouddoggo": 2,
      "-": 64,
      "alam8064": 4
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/ReminderCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_REMIND_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_REMIND_HOUR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderDay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderHour;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Parses input arguments and returns a new ReminderCommand Object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderCommandParser implements Parser\u003cReminderCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReminderCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * and returns a ReminderCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                args,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                PREFIX_REMIND_DAY,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                PREFIX_REMIND_HOUR"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_REMIND_DAY, PREFIX_REMIND_HOUR)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ReminderDay reminderDay \u003d ParserUtil.parseReminderDay(argMultimap.getValue(PREFIX_REMIND_DAY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ReminderHour reminderHour \u003d ParserUtil.parseReminderHour(argMultimap.getValue(PREFIX_REMIND_HOUR).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Reminder reminder \u003d new Reminder(index, reminderDay, reminderHour);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new ReminderCommand(index, reminder);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 60
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/StartTimerCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.StartTimerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Parses input arguments and creates a new StartTimerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class StartTimerCommandParser implements Parser\u003cStartTimerCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of StartTimerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * and returns a StartTimerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @param args user arguments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @return a StartTimerCommand object to be used for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public StartTimerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new StartTimerCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartTimerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 30
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/StopTimerCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.StopTimerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Parses input arguments and creates a new StopTimerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class StopTimerCommandParser implements Parser\u003cStopTimerCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of StartTimerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * and returns a StartTimerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @param args user arguments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @return a StartTimerCommand object to be used for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public StopTimerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new StopTimerCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StopTimerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 31
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/JelphaBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.UniqueReminderList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class JelphaBot implements ReadOnlyJelphaBot {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final List\u003cReminder\u003e reminderList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final UniqueReminderList reminders;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminders \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JelphaBot() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Creates an JelphaBot using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JelphaBot(ReadOnlyJelphaBot toBeCopied) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminders.setReminders(reminders);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Resets the existing data of this {@code JelphaBot} with {@code newData}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void resetData(ReadOnlyJelphaBot newData) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Task task : newData.getTaskList()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Reminder reminder : newData.getReminderList()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            reminderList.add(reminder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        setReminders(newData.getReminderList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the JelphaBot."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns true if a reminder with the same identity as {@code reminder} exists in JelphaBot."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return reminders.contains(reminder);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns true if a task is currently being timed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean hasTaskBeingTimed() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasks.hasTaskBeingTimed();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Adds a task to the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task must not already exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void addTask(Task p) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tasks.add(p);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void addReminder(Reminder r) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminders.add(r);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setReminder(Reminder target, Reminder newReminder) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(newReminder);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminders.setReminder(target, newReminder);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Removes {@code key} from this {@code JelphaBot}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void removeReminder(Reminder key) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminders.remove(key);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return reminders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public List\u003cTask\u003e getTasksAsList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public List\u003cReminder\u003e getRemindersAsList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return reminderList;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                || (other instanceof JelphaBot // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u0026\u0026 tasks.equals(((JelphaBot) other).tasks));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 14,
      "yapdianhao": 57,
      "Clouddoggo": 32,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.GroupedTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.PinnedTaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ViewTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// TODO check the file paths here for saving as jelphabot.json"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns the GUI settings for a popup window"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    GuiSettings getPopUpWindowGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Path getJelphaBotFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void setJelphaBotFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** Returns the JelphaBot */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ReadOnlyJelphaBot getJelphaBot();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void setJelphaBot(ReadOnlyJelphaBot addressBook);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    boolean hasReminder(Reminder reminder);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task must exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Deletes the given reminder."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param reminder"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    void deleteReminder(Reminder reminder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code task} must not already exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    void addReminder(Reminder reminder);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the existing productivity with {@code productivity}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    void setProductivity(Productivity productivity);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Replaces the existing summary with {@code summary}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void setSummary(Summary summary);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    GroupedTaskList getGroupedTaskList(GroupedTaskList.Category category);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    PinnedTaskList getPinnedTaskList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ViewTaskList getLastShownList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list in the Calendar*/"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredCalendarTaskList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    List\u003cTask\u003e getTaskListFromJelphaBot();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    List\u003cReminder\u003e getReminderListFromJelphaBot();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns an unmodifiable view of the incomplete tasks that are due soon,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * as specified by the user"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    //public ObservableList\u003cTask\u003e getFilteredByReminder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the user\u0027s productivity."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    ProductivityList getProductivityList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns an unmodifiable view of the user\u0027s summary."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    SummaryList getSummaryList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updates the filter of the filtered calendar task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    void updateFilteredCalendarTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 30,
      "yapdianhao": 21,
      "Clouddoggo": 26,
      "eedenong": 21,
      "-": 57,
      "alam8064": 9
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.GroupedTaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.PinnedTaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ViewTaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final JelphaBot readOnlyJelphaBot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final FilteredList\u003cReminder\u003e filteredReminders;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredCalendarTasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final ProductivityList productivityList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final SummaryList summaryList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private GroupedTaskList lastShownList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Initializes a ModelManager with the given readOnlyJelphaBot and userPrefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ModelManager(ReadOnlyJelphaBot readOnlyJelphaBot, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireAllNonNull(readOnlyJelphaBot, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + readOnlyJelphaBot + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.readOnlyJelphaBot \u003d new JelphaBot(readOnlyJelphaBot);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.readOnlyJelphaBot.getTaskList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        filteredReminders \u003d new FilteredList\u003c\u003e(this.readOnlyJelphaBot.getReminderList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        filteredCalendarTasks \u003d new FilteredList\u003c\u003e(this.readOnlyJelphaBot.getTaskList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityList \u003d new ProductivityList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryList \u003d new SummaryList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        lastShownList \u003d getGroupedTaskList(GroupedTaskList.Category.DATE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this(new JelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public GuiSettings getPopUpWindowGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return userPrefs.getPopUpWindowGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return userPrefs.getJelphaBotFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return userPrefs.getRemindersFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setJelphaBotFilePath(Path readOnlyJelphaBotFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(readOnlyJelphaBotFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        userPrefs.setJelphaBotFilePath(readOnlyJelphaBotFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setJelphaBotReminderFilePath(Path reminderFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireAllNonNull(reminderFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        userPrefs.setJelphaBotReminderFilePath(reminderFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d JelphaBot"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ReadOnlyJelphaBot getJelphaBot() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return readOnlyJelphaBot;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setJelphaBot(ReadOnlyJelphaBot readOnlyJelphaBot) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.readOnlyJelphaBot.resetData(readOnlyJelphaBot);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return readOnlyJelphaBot.hasTask(task);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return readOnlyJelphaBot.hasReminder(reminder);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        readOnlyJelphaBot.removeTask(target);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        readOnlyJelphaBot.removeReminder(reminder);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        readOnlyJelphaBot.addTask(task);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        readOnlyJelphaBot.addReminder(reminder);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        readOnlyJelphaBot.setTask(target, editedTask);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setReminder(Reminder target, Reminder newReminder) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireAllNonNull(target, newReminder);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        readOnlyJelphaBot.setReminder(target, newReminder);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Productivity List"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setProductivity(Productivity productivity) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireAllNonNull(productivity);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityList.setProductivity(productivity);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ProductivityList getProductivityList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return productivityList;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Summary List"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setSummary(Summary summary) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireAllNonNull(summary);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryList.setSummary(summary);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public SummaryList getSummaryList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return summaryList;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * internal list of {@code versionedJelphaBot}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedTaskList getGroupedTaskList(GroupedTaskList.Category category) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (lastShownList !\u003d null \u0026\u0026 lastShownList.getCategory() \u003d\u003d category) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return lastShownList;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            lastShownList \u003d GroupedTaskList.makeGroupedTaskList("
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                getFilteredTaskList(),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                category,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                getPinnedTaskList()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return lastShownList;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public PinnedTaskList getPinnedTaskList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // TODO implement pinned tasks"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new PinnedTaskList(filteredTasks.filtered(task -\u003e false), Bindings.createIntegerBinding(() -\u003e 0));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ViewTaskList getLastShownList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return lastShownList;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return filteredReminders;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredCalendarTaskList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return filteredCalendarTasks;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public List\u003cTask\u003e getTaskListFromJelphaBot() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return this.readOnlyJelphaBot.getTasksAsList();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public List\u003cReminder\u003e getReminderListFromJelphaBot() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return this.readOnlyJelphaBot.getRemindersAsList();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updates the filter of the filtered calendar task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void updateFilteredCalendarTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        filteredCalendarTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return readOnlyJelphaBot.equals(other.readOnlyJelphaBot) \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 48,
      "yapdianhao": 67,
      "Clouddoggo": 28,
      "eedenong": 29,
      "-": 101,
      "alam8064": 18
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/ReadOnlyJelphaBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public interface ReadOnlyJelphaBot {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    ObservableList\u003cReminder\u003e getReminderList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    void setTasks(List\u003cTask\u003e tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    void setReminders(List\u003cReminder\u003e reminders);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "yapdianhao": 11,
      "Clouddoggo": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Path getJelphaBotFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "yapdianhao": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"jelphabot.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Path remindersFilePath \u003d Paths.get(\"data\", \"reminder.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        setJelphaBotFilePath(newUserPrefs.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        setJelphaBotReminderFilePath(newUserPrefs.getRemindersFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public GuiSettings getPopUpWindowGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // create a new GuiSettings object with smaller dimensions than the default"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new GuiSettings(540.0, 400.0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return remindersFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setJelphaBotFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setJelphaBotReminderFilePath(Path remindersFilePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(remindersFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.remindersFilePath \u003d remindersFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "yapdianhao": 12,
      "eedenong": 5,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/calendar/CalendarDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Class representing a date without time, mainly for the calendar UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarDate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final String[] months \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDate(LocalDate date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static CalendarDate getCurrent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return new CalendarDate(DateUtil.getDateToday());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean isToday() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date.equals(DateUtil.getDateToday());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date.getDayOfMonth();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date.getMonthValue();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date.getYear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public String getMonthName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return months[getMonth() - 1];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getDayOfWeek() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDate getFirstDay() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return new CalendarDate(date.minusDays(getDay() - 1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getLengthCurrMonth() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date.lengthOfMonth();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getLengthPrevMonth() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate prevMonth \u003d date.minusMonths(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return prevMonth.lengthOfMonth();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Creates a date of the previous month with the specified day input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param day Specified day for the previous month."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @return CalendarDate object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDate createPrevMonthDate(int day) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate prevMonth \u003d date.minusMonths(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate datePrevMonth \u003d prevMonth.withDayOfMonth(day);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return new CalendarDate(datePrevMonth);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean isSameMonth(int month) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return getMonth() \u003d\u003d month;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDate dateNextDay() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return new CalendarDate(date.plusDays(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 84
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/productivity/Productivity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getDueThisWeekPredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getOverduePredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// TODO: if time spent is 0, don\u0027t show in card."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents the overall productivity of the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class Productivity {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private TasksCompleted tasksCompleted;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private RunningTimers runningTimers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private TimeSpentToday timeSpentToday;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Productivity(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        createProductivites();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TasksCompleted getTasksCompleted() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasksCompleted;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public RunningTimers getRunningTimers() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return runningTimers;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TimeSpentToday getTimeSpentToday() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return timeSpentToday;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Creates the respective productivity objects."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private void createProductivites() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ObservableList\u003cTask\u003e tasksDueToday \u003d taskList.filtered(new TaskDueWithinDayPredicate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ObservableList\u003cTask\u003e tasksDueThisWeek \u003d taskList.filtered(getDueThisWeekPredicate());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.tasksCompleted \u003d new TasksCompleted(tasksDueToday, tasksDueThisWeek,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            taskList.filtered(getOverduePredicate()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.runningTimers \u003d new RunningTimers(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.timeSpentToday \u003d new TimeSpentToday(tasksDueToday, tasksDueThisWeek);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 50,
      "eedenong": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/productivity/ProductivityList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * A list of productivity that does not allow nulls"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Only allows set and add list operations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class ProductivityList implements Iterable\u003cProductivity\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final ObservableList\u003cProductivity\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final ObservableList\u003cProductivity\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Adds a productivity to the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void addProductivity(Productivity toAdd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Clears the list and adds {@code productivity} into the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setProductivity(Productivity productivity) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        internalList.add(productivity);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ObservableList\u003cProductivity\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public Iterator\u003cProductivity\u003e iterator() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   || (other instanceof ProductivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                           \u0026\u0026 internalList.equals(((ProductivityList) other).internalList));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 59
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/productivity/RunningTimers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_NO_TIMERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents the timer that is currently running for the user\u0027s task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class RunningTimers {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public RunningTimers(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Timer is currently running for:\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        int n \u003d taskList.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        int idx \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (int i \u003d 0; i \u003c n; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (task.isBeingTimed()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                idx \u003d i;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                result.append(String.format(\"Task %d: %s %s, DateTime: %s\\n\", (idx + 1), task.getModuleCode(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    task.getDescription(), task.getDateTime()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (idx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return MESSAGE_NO_TIMERS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 41
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/productivity/TasksCompleted.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_COMPLIMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_CRITICISM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_ENCOURAGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsIncompletePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Highlights overdue tasks if any, and mentions number of tasks completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class TasksCompleted {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksDueToday;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksDueThisWeek;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e overdueTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private double percentage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TasksCompleted(ObservableList\u003cTask\u003e tasksDueToday, ObservableList\u003cTask\u003e tasksDueThisWeek,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ObservableList\u003cTask\u003e overdueTasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireAllNonNull(tasksDueToday, tasksDueThisWeek, overdueTasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.tasksDueToday \u003d tasksDueToday;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.tasksDueThisWeek \u003d tasksDueThisWeek;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.overdueTasks \u003d overdueTasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.percentage \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public String getCompletionStatus() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        double size \u003d tasksDueThisWeek.size() + tasksDueToday.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        double completed \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (Task task : tasksDueThisWeek) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (task.getStatus() \u003d\u003d Status.COMPLETE) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                completed++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (Task task : tasksDueToday) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (task.getStatus() \u003d\u003d Status.COMPLETE) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                completed++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (size \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            double percentage \u003d completed / size;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            this.percentage \u003d percentage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (percentage \u003e 0.7) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                message \u003d \"Great work today!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            } else if (percentage \u003e 0.4) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                message \u003d \"Not bad but let\u0027s do better.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                message \u003d \"Wow! It must feel great to have accomplished so little today!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            message \u003d \"There are no tasks to complete today!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return String.format(\"%.0f out of %.0f tasks done.\\n%s\", completed,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            size, message);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the number of incomplete overdue tasks and provides criticism or encouragement depending on the number."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private String getOverdueStatus() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        int n \u003d overdueTasks.filtered(new TaskIsIncompletePredicate()).size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StringBuilder response \u003d new StringBuilder(\"There \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (n \u003e 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            response.append(\"are \").append(n).append(\" overdue tasks that are incomplete.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else if (n \u003d\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            response.append(\"is \").append(n).append(\" overdue task that is incomplete.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            response.append(\"are \").append(\" no overdue tasks that are incomplete.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (n \u003e 3) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            response.append(\"\\n\").append(MESSAGE_CRITICISM);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else if (n \u003e 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            response.append(\"\\n\").append(MESSAGE_ENCOURAGEMENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            response.append(\"\\n\").append(MESSAGE_COMPLIMENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return response.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public double getPercentage() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return this.percentage;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public String[] toStringArray() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new String[] {getCompletionStatus(), getOverdueStatus()};"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 95,
      "eedenong": 6
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/productivity/TimeSpentToday.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents the user\u0027s productivity for the day"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class TimeSpentToday {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksDueToday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksDueThisWeek;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TimeSpentToday(ObservableList\u003cTask\u003e tasksList, ObservableList\u003cTask\u003e tasksDueThisWeek) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireAllNonNull(tasksList, tasksDueThisWeek);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.tasksDueToday \u003d tasksList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.tasksDueThisWeek \u003d tasksDueThisWeek;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private TimeSpent getTimeSpent(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        TimeSpent result \u003d new TimeSpent(Duration.ZERO);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            result.addTime(task.getTimeSpent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return String.format(\"Tasks due today: %s.\\nTasks due in next 7 days: %s.\", getTimeSpent(tasksDueToday),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            getTimeSpent(tasksDueThisWeek));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 36,
      "eedenong": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/reminder/Reminder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Represents a reminder in Jelphabot. Reminder has an index of task to be reminded of, and days and hours before"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * the task dues."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final ReminderDay daysToRemind;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final ReminderHour hoursToRemind;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Reminder(Index index, ReminderDay daysToRemind, ReminderHour hoursToRemind) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(daysToRemind);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(hoursToRemind);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.daysToRemind \u003d daysToRemind;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.hoursToRemind \u003d hoursToRemind;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderDay getDaysToRemind() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.daysToRemind;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderHour getHoursToRemind() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.hoursToRemind;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   || (other instanceof Reminder // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                           \u0026\u0026 index.equals(((Reminder) other).index)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns true is both reminder refers to the same task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param otherReminder"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean isSameReminder(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return otherReminder.getIndex().equals(getIndex())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   \u0026\u0026 otherReminder.getDaysToRemind().equals(getDaysToRemind())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   \u0026\u0026 otherReminder.getHoursToRemind().equals(getHoursToRemind());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 67
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/reminder/ReminderDay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Represents the days before the task dues in JelphaBot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderDay {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Reminder date should be within one week from now\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final int reminderDay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderDay(int reminderDay) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        checkArgument(isValidReminderDay(reminderDay), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminderDay \u003d reminderDay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public int getReminderDay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.reminderDay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns a boolean to determine whether the days to remind is within 7 days."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param dayToTest"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static boolean isValidReminderDay(int dayToTest) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return 0 \u003c\u003d dayToTest \u0026\u0026 dayToTest \u003c\u003d 7;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns a boolean to determine whether two reminders share the same day."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   || (other instanceof ReminderDay \u0026\u0026 reminderDay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                           \u003d\u003d ((ReminderDay) other).reminderDay);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 42
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/reminder/ReminderHour.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Represent the hours before the task dues in JelphaBot."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderHour {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Reminder hour should be within 24 hours from now\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final int reminderHour;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderHour(int reminderHour) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(reminderHour);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        checkArgument(isValidReminderHour(reminderHour), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminderHour \u003d reminderHour;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static boolean isValidReminderHour(int hourToTest) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return 0 \u003c\u003d hourToTest \u0026\u0026 hourToTest \u003c\u003d 24;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public int getReminderHour() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.reminderHour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns a boolean to determine whether two reminders share the same hour."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   || (other instanceof ReminderHour \u0026\u0026 reminderHour \u003d\u003d ((ReminderHour) other).reminderHour);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 38
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/reminder/UniqueReminderList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.exceptions.DuplicateReminderException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.exceptions.ReminderNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A list of reminders that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A task is considered unique by comparing using {@code Reminder#isSameReminder(Reminder)}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * As such, adding and updating of tasks uses Task#isSameTask(Task)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class UniqueReminderList implements Iterable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns true if the list contains an equivalent reminder as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean contains(Reminder toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameReminder);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Adds a reminder to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * The reminder must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void add(Reminder toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ObservableList\u003cReminder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Removes the equivalent reminder from the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * The reminder must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void remove(Reminder toRemove) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setReminder(Reminder target, Reminder newReminder) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireAllNonNull(target, newReminder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!target.isSameReminder(target) \u0026\u0026 contains(newReminder)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        internalList.set(index, newReminder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setReminders(UniqueReminderList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireAllNonNull(reminders);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!remindersAreUnique(reminders)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        internalList.setAll(reminders);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Iterator\u003cReminder\u003e iterator() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   || (other instanceof UniqueReminderList // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                           \u0026\u0026 internalList.equals(((UniqueReminderList) other).internalList));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns true if {@code reminder} contains only unique tasks."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean remindersAreUnique(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        HashSet\u003cReminder\u003e seen \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Reminder reminder : reminders) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (seen.contains(reminder)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            seen.add(reminder);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 132
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/reminder/exceptions/DuplicateReminderException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Signals that the operation will result in duplicate Reminders"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * (Reminders are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class DuplicateReminderException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public DuplicateReminderException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        super(\"Operation would result in duplicate reminders\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 12
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/reminder/exceptions/ReminderNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Signals that the operation is unable to find the specified Reminder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 6
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/summary/Summary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskCompletedWithinDayPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayAndIncompletePredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Represents a Summary for the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class Summary {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private TasksIncompleteDueToday tasksIncompleteDueToday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private TasksCompletedToday tasksCompletedToday;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Summary(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        populateSummary();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TasksIncompleteDueToday getTasksIncompleteDueToday() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return tasksIncompleteDueToday;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TasksCompletedToday getTasksCompletedToday() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return tasksCompletedToday;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * populates the respective Summary objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private void populateSummary() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e dueTodayTaskList \u003d taskList.filtered(new TaskDueWithinDayAndIncompletePredicate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e completedTodayTaskList \u003d taskList.filtered(new TaskCompletedWithinDayPredicate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.tasksIncompleteDueToday \u003d new TasksIncompleteDueToday(dueTodayTaskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.tasksCompletedToday \u003d new TasksCompletedToday(completedTodayTaskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "eedenong": 43
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/summary/SummaryList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * A list of summary that does not allow nulls"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Only allows set and add list operations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryList implements Iterable\u003cSummary\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final ObservableList\u003cSummary\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final ObservableList\u003cSummary\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Adds a summary to the list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void addSummary(Summary summaryToAdd) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(summaryToAdd);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        internalList.add(summaryToAdd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setSummary(Summary summary) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(summary);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        internalList.add(summary);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cSummary\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Iterator\u003cSummary\u003e iterator() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   || (other instanceof SummaryList // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                           \u0026\u0026 internalList.equals(((SummaryList) other).internalList));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 54
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/summary/TasksCompletedToday.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Gives an overview of the tasks that were completed today (within the day)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TasksCompletedToday {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksCompletedToday;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TasksCompletedToday(ObservableList\u003cTask\u003e tasksCompletedToday) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireAllNonNull(tasksCompletedToday);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.tasksCompletedToday \u003d tasksCompletedToday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public String getTasksCompletedTodayString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // For each of the tasks, arrange them in the format example:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // [ ] (CS3230) Assignment 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        for (Task task: tasksCompletedToday) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String moduleCodeString \u003d task.getModuleCode().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String descriptionString \u003d task.getDescription().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String toAppend \u003d String.format(\"[X] (%s) %s\\n\", moduleCodeString, descriptionString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            sb.append(toAppend);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 34
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/summary/TasksIncompleteDueToday.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Gives an overview of the tasks that are due today."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TasksIncompleteDueToday {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksDueToday;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TasksIncompleteDueToday(ObservableList\u003cTask\u003e tasksDueToday) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireAllNonNull(tasksDueToday);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.tasksDueToday \u003d tasksDueToday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //TODO: implement method to get string of the tasks due today"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public String getTasksDueTodayString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // For each of the tasks, arrange them in the format example:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // [ ] (CS3230) Assignment 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        for (Task task: tasksDueToday) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String moduleCodeString \u003d task.getModuleCode().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String descriptionString \u003d task.getDescription().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String toAppend \u003d String.format(\"[ ] (%s) %s\\n\", moduleCodeString, descriptionString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            sb.append(toAppend);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 33
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \"Tag names should only contain alphanumeric characters, dash, or underscore, and be non-empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9-_]+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return test.trim().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                   || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "Clouddoggo": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Class representing the Date and Time of the modelled task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \"Date should be of the format Month-Day-Year where Month is a three-letter abbreviation. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            + \"Time should be in the 24 hour format HH mm.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String STANDARD_FORMAT \u003d \"MMM-d-uuuu HH mm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String DISPLAY_FORMAT \u003d \"d-MMM-uuuu HH mm\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final DateTimeFormatter STANDARD_FORMATTER \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DateTimeFormatter.ofPattern(STANDARD_FORMAT).withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final DateTimeFormatter DISPLAY_FORMATTER \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DateTimeFormatter.ofPattern(DISPLAY_FORMAT).withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final DateTimeFormatter ACCEPTED_INPUT_FORMATTER \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .appendOptional(STANDARD_FORMATTER)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .appendOptional(DISPLAY_FORMATTER)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"MMM/d/uuuu HH mm\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d/M/u HH mm\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d MMM uuuu HH mm\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .toFormatter().withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public final LocalDateTime value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Constructs an {@code DateTime}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param dateTime A valid datetime."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        value \u003d LocalDateTime.parse(dateTime, ACCEPTED_INPUT_FORMATTER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns if the given string is a valid datetime format, specified in the List dateFormatStrings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @param test The date to be checked."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @return The boolean representing whether the date provided is valid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            LocalDateTime.parse(test, ACCEPTED_INPUT_FORMATTER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Converts stored dateTime value to the display format (Display format is the format the datetime is shown in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * the view, defined in #DateTime.DISPLAY_FORMAT)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return dateString converted to display format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String getDisplayValue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return value.format(DISPLAY_FORMATTER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Converts stored dateTime value to the standard format"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * (Standard format is the DateTimeFormatter used for storing the date in Json and is defined in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * #DateTime.STANDARD_FORMAT)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return A string with the Date rendered in standard format"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return value.format(STANDARD_FORMATTER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                           \u0026\u0026 value.equals(((DateTime) other).value)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return value.toLocalDate();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 65,
      "Clouddoggo": 39,
      "eedenong": 1,
      "alam8064": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/Description.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents a Task\u0027s description in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \"Descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public final String fullDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        fullDescription \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return fullDescription;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u0026\u0026 fullDescription.equals(((Description) other).fullDescription)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return fullDescription.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 14,
      "Clouddoggo": 5,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/GroupedByDateTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getDueSomedayPredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getDueThisWeekPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getDueTodayPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getOverduePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.NumberBinding;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsIncompletePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * A container for ObservableList\u0026lt;Task\u0026gt; that splits the TaskList into groups."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * GroupedByDateTaskList groups Tasks by how close the due date is to the current date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Separation is done over @code{ObservableList} through use of filters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class GroupedByDateTaskList implements GroupedTaskList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Predicate\u003cTask\u003e isOverdue \u003d getOverduePredicate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Predicate\u003cTask\u003e isDueToday \u003d getDueTodayPredicate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Predicate\u003cTask\u003e isDueThisWeek \u003d getDueThisWeekPredicate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Predicate\u003cTask\u003e isDueSomeday \u003d getDueSomedayPredicate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Predicate\u003cTask\u003e isIncomplete \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final ObservableList\u003cSubgroupTaskList\u003e dueDateTaskLists \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final NumberBinding sizeBinding;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedByDateTaskList(ObservableList\u003cTask\u003e taskList, PinnedTaskList pinnedTasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireAllNonNull(taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dueDateTaskLists.add(pinnedTasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        NumberBinding tempSize \u003d pinnedTasks.sizeBinding();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        SubgroupTaskList overdueTaskList \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new SubgroupTaskList(\"Overdue\", taskList.filtered(isOverdue.and(isIncomplete)), tempSize);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dueDateTaskLists.add(overdueTaskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        tempSize \u003d tempSize.add(overdueTaskList.sizeBinding());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        SubgroupTaskList dueTodayTaskList \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new SubgroupTaskList(\"Due Today\", taskList.filtered(isDueToday), tempSize);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dueDateTaskLists.add(dueTodayTaskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        tempSize \u003d tempSize.add(dueTodayTaskList.sizeBinding());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        SubgroupTaskList dueThisWeekTaskList \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new SubgroupTaskList(\"Due This Week\", taskList.filtered(isDueThisWeek), tempSize);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dueDateTaskLists.add(dueThisWeekTaskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        tempSize \u003d tempSize.add(dueThisWeekTaskList.sizeBinding());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        SubgroupTaskList dueSomedayTaskList \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new SubgroupTaskList(\"Due Someday\", taskList.filtered(isDueSomeday), tempSize);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dueDateTaskLists.add(dueSomedayTaskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        tempSize \u003d tempSize.add(dueSomedayTaskList.sizeBinding());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.sizeBinding \u003d tempSize;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return Category.DATE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ObservableList\u003cSubgroupTaskList\u003e getList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return dueDateTaskLists;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return sizeBinding.intValue();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // public Iterator\u003cSubgroupTaskList\u003e iterator() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //     return dueDateTaskLists.iterator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Task get(int id) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (SubgroupTaskList sublist : dueDateTaskLists) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (id \u003c sublist.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                return sublist.get(id);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                id -\u003d sublist.size();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Task get(Index index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return get(index.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 97
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/GroupedByModuleTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.NumberBinding;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * A container for ObservableList\u0026lt;Task\u0026gt; that splits the TaskList into groups."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * GroupedByDateTaskList groups Tasks by their module codes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Separation is done over @code{ObservableList} through use of filters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class GroupedByModuleTaskList implements GroupedTaskList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final ObservableList\u003cSubgroupTaskList\u003e moduleCodeTaskLists \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final NumberBinding sizeBinding;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedByModuleTaskList(ObservableList\u003cTask\u003e taskList, PinnedTaskList pinnedTasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireAllNonNull(taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleCodeTaskLists.add(pinnedTasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        NumberBinding tempSize \u003d Bindings.createIntegerBinding(pinnedTasks::size);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (ModuleCode code : getUniqueModuleSet(taskList)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            SubgroupTaskList moduleCodeSubList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new SubgroupTaskList(code.toString(), taskList.filtered(hasModuleCode(code)), tempSize);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            moduleCodeTaskLists.add(moduleCodeSubList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            moduleCodeSubList.addListener(makeDeleteOnEmptyListener(moduleCodeSubList));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            tempSize \u003d tempSize.add(moduleCodeSubList.sizeBinding());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.sizeBinding \u003d tempSize;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static HashSet\u003cModuleCode\u003e getUniqueModuleSet(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        HashSet\u003cModuleCode\u003e moduleSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            moduleSet.add(task.getModuleCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return moduleSet;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param moduleCodeSubList the SubgroupTaskList to be removed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a listener which removes the respective SubgroupTaskList when the inner ObservableList is empty."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private ListChangeListener\u003cTask\u003e makeDeleteOnEmptyListener(SubgroupTaskList moduleCodeSubList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return change -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (moduleCodeSubList.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                GroupedByModuleTaskList.this.moduleCodeTaskLists.remove(moduleCodeSubList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param moduleCode The ModuleCode to be tested"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a predicate which tests Tasks for the parameter module code."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Predicate\u003cTask\u003e hasModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return task -\u003e task.getModuleCode().equals(moduleCode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // public Iterator\u003cSubgroupTaskList\u003e iterator() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //     return moduleCodeTaskLists.iterator();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return Category.MODULE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ObservableList\u003cSubgroupTaskList\u003e getList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return moduleCodeTaskLists;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return sizeBinding.intValue();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Task get(int id) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assert id \u003c size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (SubgroupTaskList sublist : moduleCodeTaskLists) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (id \u003c sublist.size()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                return sublist.get(id);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                id -\u003d sublist.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Task get(Index index) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return get(index.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 106
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/GroupedTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Interface representing a TaskList which is split into sub-groups by predefined groups."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Each \u0027GroupedTaskList\u0027 is a container for `ObservableList\u0026lt;Task\u003e objects,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * each containing a unique filter over the full task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Classes which extend GroupedTaskList are expected to provide a getter method for each grouping defined."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public interface GroupedTaskList extends ViewTaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    static GroupedTaskList makeGroupedTaskList(ObservableList\u003cTask\u003e tasks, Category category,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        PinnedTaskList pinnedTasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return category.construct(tasks, pinnedTasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Category getCategory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ObservableList\u003cSubgroupTaskList\u003e getList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * GroupedTaskList.Groupings define a set of fixed enum mappings from the commandArgument to the corresponding"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    enum Category {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DATE(\"date\", GroupedByDateTaskList::new),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        MODULE(\"module\", GroupedByModuleTaskList::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public final String commandArgument;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        private final BiFunction\u003cObservableList\u003cTask\u003e, PinnedTaskList, GroupedTaskList\u003e constructor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Category(String commandArgument,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            BiFunction\u003cObservableList\u003cTask\u003e, PinnedTaskList, GroupedTaskList\u003e groupedTaskListConstructor) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            this.commandArgument \u003d commandArgument;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            this.constructor \u003d groupedTaskListConstructor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        private GroupedTaskList construct(ObservableList\u003cTask\u003e tasks, PinnedTaskList pinnedTasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return constructor.apply(tasks, pinnedTasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 44
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/ModuleCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents a Task\u0027s module code in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Module Code should be of the format [faculty][code][variant] \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"1. The faculty should only contain alphabetical characters.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"2. This is followed by a reference code, and optionally a variant tag.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"    - The reference code must be 4 digits long.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"    - The variant tag is an optional alphabetical character.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String FACULTY_REGEX \u003d \"^[A-Za-z]{2,3}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String REFERENCE_CODE \u003d \"\\\\d{4}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String VARIANT_TAG \u003d \"[A-Za-z]?$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d FACULTY_REGEX + REFERENCE_CODE + VARIANT_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Constructs an {@code ModuleCode}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param moduleCode code A valid module code address."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        value \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns if a given string is a valid module code."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u0026\u0026 value.equals(((ModuleCode) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 23,
      "Clouddoggo": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/PinnedTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.NumberBinding;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Wrapper class for a ObservableList of pinned Tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class PinnedTaskList extends SubgroupTaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public PinnedTaskList(ObservableList\u003cTask\u003e taskList, NumberBinding startIndex) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(\"Pinned\", taskList, startIndex);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 13
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Enum class representative of the different possible priorities that a task can have."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * By default, the priority of a task is set to MEDIUM."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    MEDIUM,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    LOW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"Priority should be either -1, 0, or 1, or the string representation HIGH, MEDIUM or LOW\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns if the given string is a valid priority."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param test The date to be checked."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return The boolean representing whether the priority provided is valid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        switch (test.toLowerCase()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"-1\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"0\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Converts input String to Priority object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param test String to convert."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @return Priority of the input string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Priority toPriority(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        switch (test.toLowerCase()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case \"high\": // fallthrough"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return Priority.HIGH;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case \"medium\": // fallthrough"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"0\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return Priority.MEDIUM;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case \"low\": // fallthrough"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"-1\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            checkArgument(isValidPriority(test), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 34,
      "Clouddoggo": 5,
      "eedenong": 17
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/ReminderPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsIncompletePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code DateTime} is due within a week from now."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderPredicate extends TaskIsIncompletePredicate {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final LocalTime currTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final LocalDateTime currDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderPredicate.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final List\u003cReminder\u003e reminderList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderPredicate(List\u003cTask\u003e taskList, List\u003cReminder\u003e reminderList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminderList \u003d reminderList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        int reminderKey \u003d taskList.indexOf(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Reminder correspondingReminder \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Reminder reminder : reminderList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            //logger.info(\"reminder index: \" + reminder.getIndex().getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (reminder.getIndex().getZeroBased() \u003d\u003d reminderKey) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                correspondingReminder \u003d reminder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (correspondingReminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return shouldBeReminded(task, correspondingReminder);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A task should be reminded if it is before the specified day by the reminder, or within the specified hour."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param reminder"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean shouldBeReminded(Task task, Reminder reminder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        LocalDateTime taskDateTime \u003d task.getDateTime().getDateTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //logger.info(\"\" + taskDateTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //logger.info(\"shouldBeReminded \" + taskDateTime.minusDays(reminder.getDaysToRemind().getReminderDay())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //                                     .isAfter(currDateTime));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //logger.info(\"shouldBeReminded1 \" + taskDateTime"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //                                       .minusHours(reminder.getHoursToRemind()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //                                                       .getReminderHour())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //                                      .isAfter(currDateTime));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //logger.info(\"shouldBeReminded2 \" + taskDateTime"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //                                       .minusDays(reminder.getDaysToRemind()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //                                                      .getReminderDay())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //                                       .isBefore(currDateTime));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (taskDateTime.isBefore(currDateTime)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (taskDateTime.minusDays(reminder.getDaysToRemind().getReminderDay())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                .isAfter(currDateTime)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (taskDateTime.minusDays(reminder.getDaysToRemind().getReminderDay()).isBefore(currDateTime)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return taskDateTime.minusHours(reminder.getHoursToRemind().getReminderHour()).isAfter(currDateTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   || (other instanceof TaskIsIncompletePredicate); // instanceof handles null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "yapdianhao": 79,
      "eedenong": 3
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/Status.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Enum class containing the possible states of a task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    COMPLETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    INCOMPLETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Status toStatus(String test) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return Status.valueOf(test.strip().toUpperCase());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 8,
      "eedenong": 5
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/SubgroupTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.IntegerBinding;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.NumberBinding;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Wrapper class for a ObservableList Tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class SubgroupTaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final String groupName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final IntegerBinding size;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final NumberBinding startIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    SubgroupTaskList(String groupName, ObservableList\u003cTask\u003e taskList, NumberBinding startIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.size \u003d Bindings.size(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.startIndex \u003d startIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ObservableList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String getGroupName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return size.intValue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return taskList.isEmpty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public NumberBinding sizeBinding() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public NumberBinding startIndexBinding() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return startIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void addListener(ListChangeListener\u003cTask\u003e deleteOnEmptyList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskList.addListener(deleteOnEmptyList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 56
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents a Task in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private LocalDateTime doneTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private TimeSpent timeSpent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private boolean isTiming;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public Task(Description description, Status status, DateTime dateTime, ModuleCode moduleCode, Priority priority,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                Set\u003cTag\u003e tags, TimeSpent timeSpent) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireAllNonNull(description, status, dateTime, moduleCode, tags, timeSpent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.timeSpent \u003d timeSpent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.isTiming \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Starts the timer for the task specified."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void startTimer() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.isTiming \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Stops the timer for the task specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void stopTimer() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.endTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.isTiming \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.timeSpent.addTime(new TimeSpent(Duration.between(this.startTime, this.endTime)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TimeSpent getTimeSpent() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return this.timeSpent;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setDoneTime() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.doneTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setDoneTime(DateTime datetime) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.doneTime \u003d datetime.getDateTime();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public LocalDateTime getDoneTime() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return this.doneTime;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns true if both tasks of the same description also occur at the same dateTime and have the same ModuleCode."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Those fields that are chosen are a combination which is meant to be unique."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Mainly used to check for duplicate tasks."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   \u0026\u0026 otherTask.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   \u0026\u0026 otherTask.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns true if the timer is running for this task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean isBeingTimed() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return this.isTiming;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Used to check for two instances of the same model entity."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   \u0026\u0026 otherTask.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   \u0026\u0026 otherTask.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   \u0026\u0026 otherTask.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return Objects.hash(description, dateTime, moduleCode, tags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .append(\" Status: \")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .append(getStatus())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            .append(\" DateTime: \")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            .append(getDateTime())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .append(\" ModuleCode: \")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .append(getModuleCode())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .append(\" Priority: \")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .append(getPriority())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 37,
      "yapdianhao": 6,
      "Clouddoggo": 54,
      "eedenong": 23,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/TimeSpent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents amount of time spent on a Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class TimeSpent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // Empty constructor needed to pass test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TimeSpent() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TimeSpent(Duration duration) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void addTime(TimeSpent timeSpent) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.duration \u003d this.duration.plus(timeSpent.duration);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return String.format(\"%d h %d m %d s\", duration.toHoursPart(), duration.toMinutesPart(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            duration.toSecondsPart());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   || (other instanceof TimeSpent // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                           \u0026\u0026 duration.equals(((TimeSpent) other).duration)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return duration.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 48
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/UniqueModuleCodeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.DuplicateModuleCodeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * A list of module codes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Two ModuleCodes are considered equal if they have the same module code String."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class UniqueModuleCodeList implements Iterable\u003cModuleCode\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final ObservableList\u003cModuleCode\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final ObservableList\u003cModuleCode\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean contains(ModuleCode toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Adds a ModuleCode to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The ModuleCode must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void add(ModuleCode toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new DuplicateModuleCodeException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Iterator\u003cModuleCode\u003e iterator() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setModuleCodes(UniqueModuleCodeList replacement) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setModuleCodes(ObservableList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        HashSet\u003cModuleCode\u003e replacement \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            replacement.add(task.getModuleCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        internalList.setAll(replacement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 69
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/UniqueTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean hasTaskBeingTimed() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return internalList.stream().anyMatch(task -\u003e task.isBeingTimed());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                           \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 16,
      "yapdianhao": 13,
      "Clouddoggo": 28,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/ViewTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Represents a wrapper class for a list of tasks that are displayed in Ui."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public interface ViewTaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Task get(int id);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Task get(Index index);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    int size();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 12
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/exceptions/DuplicateModuleCodeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Signals that the operation will result in duplicate ModuleCode (Module Codes are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * the same internal string)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class DuplicateModuleCodeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public DuplicateModuleCodeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 11
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 11
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "Clouddoggo": 2,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/DescriptionContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDescription().fullDescription, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 10,
      "yapdianhao": 1,
      "eedenong": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskCompletedWithinDayPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.dateToLocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Tests that a {@code Task} is completed within the specified Date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskCompletedWithinDayPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // default constructor sets the date to the instant the constructor is called"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskCompletedWithinDayPredicate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskCompletedWithinDayPredicate(Date date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.date \u003d dateToLocalDate(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskCompletedWithinDayPredicate(DateTime dateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.date \u003d dateTime.getDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Tests that a {@code Task}\u0027s {@code DateTime}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            LocalDate taskDoneTime \u003d task.getDoneTime().toLocalDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return !taskDoneTime.isAfter(date.plusDays(1))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                       \u0026\u0026 !taskDoneTime.isBefore(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   || (other instanceof TaskCompletedWithinDayPredicate) // instanceof handles null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                          \u0026\u0026 this.date.equals(((TaskCompletedWithinDayPredicate) other).date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "eedenong": 52
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskDueAfterDatePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code DateTime} falls after the given Date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskDueAfterDatePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final LocalDateTime date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // default constructor sets the date to the instant the method was called"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueAfterDatePredicate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        date \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueAfterDatePredicate(LocalDate date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.date \u003d date.atStartOfDay();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueAfterDatePredicate(DateTime dateTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.date \u003d dateTime.getDateTime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDateTime taskDate \u003d task.getDateTime().getDateTime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return taskDate.isAfter(this.date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   || (other instanceof TaskDueAfterDatePredicate) // instanceof handles null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                          \u0026\u0026 this.date.equals(((TaskDueAfterDatePredicate) other).date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 42
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskDueBeforeDatePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code DateTime} falls before the given Date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskDueBeforeDatePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final LocalDateTime date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // default constructor sets the date to the instant the method was called"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueBeforeDatePredicate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        date \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueBeforeDatePredicate(LocalDate date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.date \u003d date.atStartOfDay();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Support for methods that use Java7 Date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param dateTime the internal model representation of DateTime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueBeforeDatePredicate(DateTime dateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.date \u003d dateTime.getDateTime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDateTime taskDate \u003d task.getDateTime().getDateTime();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return taskDate.isBefore(this.date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   || (other instanceof TaskDueBeforeDatePredicate) // instanceof handles null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                          \u0026\u0026 this.date.equals(((TaskDueBeforeDatePredicate) other).date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 47
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskDueWithinDayAndIncompletePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code DateTime} is due within the day and is incomplete"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TaskDueWithinDayAndIncompletePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskDueWithinDayAndIncompletePredicate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskDueWithinDayAndIncompletePredicate(LocalDate date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskDueWithinDayAndIncompletePredicate(DateTime dateTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.date \u003d dateTime.getDate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        LocalDate taskDate \u003d task.getDateTime().getDate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Status status \u003d task.getStatus();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return !taskDate.isAfter(date)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 !taskDate.isBefore(date)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 (status !\u003d Status.COMPLETE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 36
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskDueWithinDayPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code DateTime} falls within the given Date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskDueWithinDayPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // default constructor sets the date to the instant the method was called"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueWithinDayPredicate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public TaskDueWithinDayPredicate(LocalDate date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueWithinDayPredicate(DateTime dateTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.date \u003d dateTime.getDate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Tests that a {@code Task}\u0027s {@code DateTime} falls within the given Date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDate taskDate \u003d task.getDateTime().getDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return !taskDate.isAfter(date.plusDays(1))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   \u0026\u0026 !taskDate.isBefore(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   || (other instanceof TaskDueWithinDayPredicate) // instanceof handles null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                          \u0026\u0026 this.date.equals(((TaskDueWithinDayPredicate) other).date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 42,
      "alam8064": 6
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskIsCompletedPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Status} is COMPLETE."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskIsCompletedPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return task.getStatus() \u003d\u003d Status.COMPLETE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same objcet"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                || (other instanceof TaskIsCompletedPredicate); // instanceof handles null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 6,
      "eedenong": 17
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskIsIncompletePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Status} is INCOMPLETE."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskIsIncompletePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return task.getStatus() \u003d\u003d Status.INCOMPLETE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                || (other instanceof TaskIsIncompletePredicate); // instanceof handles null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 6,
      "eedenong": 16
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.FIVE_DAYS_LATER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.LAST_NIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.LAST_WEEK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.NEXT_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.NEXT_WEEK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.TODAY_MORNING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.TONIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Contains utility methods for populating {@code JelphaBot} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new Task[]{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Individual Assignment 1\"), Status.INCOMPLETE, new DateTime(LAST_NIGHT),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"CS3230\"), Priority.HIGH, getTagSet(\"graded\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(7))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Tutorial 3\"), Status.INCOMPLETE, new DateTime(LAST_WEEK),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"ACC1101\"), Priority.LOW, getTagSet(\"classpart\", \"SU-able\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(3))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"MidTerm Revision Papers\"), Status.INCOMPLETE, new DateTime(NEXT_MONTH),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"ST2334\"), Priority.MEDIUM, getTagSet(\"exam\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(4))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Consultation with David Li\"), Status.INCOMPLETE, new DateTime(NEXT_WEEK),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"PF1103\"), Priority.MEDIUM, getTagSet(\"consult\", \"prepare\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(1))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Tutorial 4\"), Status.INCOMPLETE, new DateTime(TODAY_MORNING),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"ACC1101\"), Priority.LOW, getTagSet(\"classpart\", \"Su-able\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(9))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Graded Homework 3\"), Status.INCOMPLETE, new DateTime(FIVE_DAYS_LATER),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"MA1101R\"), Priority.HIGH, getTagSet(\"graded\", \"SU-able\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(4))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Lab 1\"), Status.INCOMPLETE, new DateTime(FIVE_DAYS_LATER),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"MA1101R\"), Priority.LOW, getTagSet(\"ungraded\", \"SU-able\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(6))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Assignment 3\"), Status.INCOMPLETE, new DateTime(TONIGHT),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"ST2334\"), Priority.MEDIUM, getTagSet(\"schoolwork\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(7))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Readings\"), Status.INCOMPLETE, new DateTime(NEXT_MONTH),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"EC1103\"), Priority.MEDIUM, getTagSet(\"readings\", \"SU-able\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofSeconds(7))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            )"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static ReadOnlyJelphaBot getSampleJelphaBot() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBot sampleAb \u003d new JelphaBot();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                   .map(Tag::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                   .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 45,
      "yapdianhao": 1,
      "Clouddoggo": 23,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/util/SampleDateUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Class to generate updated dates for SampleDataUtil."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class SampleDateUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"MMM-d-yyyy HH mm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String LAST_NIGHT \u003d LocalDate.now().atStartOfDay().minusMinutes(1).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String LAST_WEEK \u003d LocalDate.now().atStartOfDay().minusDays(7).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String TODAY_MORNING \u003d LocalDate.now().atStartOfDay().plusHours(10).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String TONIGHT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDate.now().atStartOfDay().plusHours(23).plusMinutes(59).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String FIVE_DAYS_LATER \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDate.now().atStartOfDay().plusDays(5).plusHours(14).plusMinutes(30).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String NEXT_WEEK \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDate.now().atStartOfDay().plusDays(7).plusHours(9).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String NEXT_MONTH \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDate.now().atStartOfDay().plusMonths(1).minusMinutes(1).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 22
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/util/SampleReminderUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderDay;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderHour;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Contains utility methods for populating {@code JelphaBot} with sample reminders data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class SampleReminderUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static Reminder[] getSampleReminders() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new Reminder[] {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            new Reminder(Index.fromOneBased(1), new ReminderDay(1), new ReminderHour(1)),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            new Reminder(Index.fromOneBased(2), new ReminderDay(1), new ReminderHour(4)),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            new Reminder(Index.fromOneBased(3), new ReminderDay(2), new ReminderHour(2))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static ReadOnlyJelphaBot getSampleJelphaBot() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        JelphaBot sampleAb \u003d new JelphaBot();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Reminder sampleReminder : getSampleReminders()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            sampleAb.addReminder(sampleReminder);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 30
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JelphaBotStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Represents a storage for {@link seedu.jelphabot.model.JelphaBot}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public interface JelphaBotStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Path getJelphaBotFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    Path getJelphaBotReminderPath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns JelphaBot data as a {@link ReadOnlyJelphaBot}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns JelphaBot reminders as a {@link ReadOnlyJelphaBot}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(boolean isReminder) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @see #getJelphaBotFilePath()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Saves the given {@link ReadOnlyJelphaBot} to the storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param jelphaBot cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    void saveJelphaBot(ReadOnlyJelphaBot jelphaBot) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Saves the given {@link ReadOnlyJelphaBot} which contains only reminders to the storage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param jelphaBot cannot be null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, boolean isReminder) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @see #saveJelphaBot(ReadOnlyJelphaBot)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 42,
      "yapdianhao": 19
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JsonAdaptedReminder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderDay;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderHour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Jackson-friendly version of {@link Reminder}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "class JsonAdaptedReminder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Reminder %s\u0027s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final String index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final String reminderDay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final String reminderHour;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructs a {@code JsonAdaptedReminder} with the given reminder details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public JsonAdaptedReminder ("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        @JsonProperty(\"index\") int index,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        @JsonProperty(\"reminderDay\") int reminderDay,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        @JsonProperty(\"reminderHour\") int reminderHour"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.index \u003d index + \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminderDay \u003d reminderDay + \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminderHour \u003d reminderHour + \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Converts a given {@code Reminder} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public JsonAdaptedReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.index \u003d reminder.getIndex().getZeroBased() + \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminderDay \u003d reminder.getDaysToRemind().getReminderDay() + \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminderHour \u003d reminder.getHoursToRemind().getReminderHour() + \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Converts this Jackson-friendly adapted reminder object into the model\u0027s"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * {@code Reminder} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *                               the adapted reminder."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Reminder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (index \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Index.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (reminderDay \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, ReminderDay.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!ReminderDay.isValidReminderDay(Integer.parseInt(reminderDay))) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new IllegalValueException(ReminderDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (reminderHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, ReminderHour.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!ReminderHour.isValidReminderHour(Integer.parseInt(reminderHour))) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String.format(ReminderHour.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new Reminder("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            Index.fromZeroBased(Integer.parseInt(index)),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            new ReminderDay(Integer.parseInt(reminderDay)),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            new ReminderHour(Integer.parseInt(reminderHour)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 78
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JsonAdaptedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final TimeSpent timeSpent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JsonAdaptedTask("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @JsonProperty(\"desc\") String description,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @JsonProperty(\"status\") Status status,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @JsonProperty(\"dateTime\") String dateTime,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @JsonProperty(\"module\") String moduleCode,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @JsonProperty(\"priority\") Priority priority,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @JsonProperty(\"timeSpent\") TimeSpent timeSpent) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.timeSpent \u003d timeSpent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.status \u003d source.getStatus();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.dateTime \u003d source.getDateTime().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.moduleCode \u003d source.getModuleCode().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.priority \u003d source.getPriority();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tagged.addAll(source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.timeSpent \u003d source.getTimeSpent();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code Task} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *                               the adapted task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final DateTime modelDateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final Priority modelPriority \u003d priority;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new Task("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                modelDescription,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                status,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                modelDateTime,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                modelModuleCode,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                modelPriority,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                modelTags,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                timeSpent"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 55,
      "yapdianhao": 2,
      "Clouddoggo": 38,
      "eedenong": 5,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JsonJelphaBotStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * A class to access JelphaBot data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class JsonJelphaBotStorage implements JelphaBotStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonJelphaBotStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Path reminderPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public JsonJelphaBotStorage(Path filePath, Path reminderPath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminderPath \u003d reminderPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Path getJelphaBotReminderPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return reminderPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return readJelphaBot(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(boolean isReminder) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(reminderPath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Optional\u003cJsonSerializableReminderJelphaBot\u003e jsonReminderJelphaBot \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            reminderPath, JsonSerializableReminderJelphaBot.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!jsonReminderJelphaBot.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return Optional.of(jsonReminderJelphaBot.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            logger.info(\"Illegal values found in \" + reminderPath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Similar to {@link #readJelphaBot()}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Optional\u003cJsonSerializableJelphaBot\u003e jsonJelphaBot \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                filePath, JsonSerializableJelphaBot.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!jsonJelphaBot.isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return Optional.of(jsonJelphaBot.get().toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        saveJelphaBot(jelphaBot, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, boolean isReminder) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(jelphaBot);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        requireNonNull(reminderPath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        FileUtil.createIfMissing(reminderPath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableReminderJelphaBot(jelphaBot), reminderPath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Similar to {@link #saveJelphaBot(ReadOnlyJelphaBot)}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(jelphaBot);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableJelphaBot(jelphaBot), filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 26,
      "yapdianhao": 34,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JsonSerializableJelphaBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * An Immutable JelphaBot that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "@JsonRootName(value \u003d \"jelphabot\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class JsonSerializableJelphaBot {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Constructs a {@code JsonSerializableJelphaBot} with the given tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JsonSerializableJelphaBot(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Converts a given {@code ReadOnlyJelphaBot} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableJelphaBot}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JsonSerializableJelphaBot(ReadOnlyJelphaBot source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Converts this address book into the model\u0027s {@code JelphaBot} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JelphaBot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBot jelphaBot \u003d new JelphaBot();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (jelphaBot.hasTask(task)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            jelphaBot.addTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return jelphaBot;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 24,
      "yapdianhao": 2,
      "Clouddoggo": 6,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JsonSerializableReminderJelphaBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * An Immutable JelphaBot that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "@JsonRootName(value \u003d \"reminders\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "class JsonSerializableReminderJelphaBot {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDERS \u003d \"Reminders list contains duplicate reminder(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final List\u003cJsonAdaptedReminder\u003e reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructs a {@code JsonSerializableJelphaBot} with the given reminders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public JsonSerializableReminderJelphaBot(@JsonProperty(\"reminders\") List\u003cJsonAdaptedReminder\u003e reminders) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminders.addAll(reminders);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Converts a given {@code ReadOnlyJelphaBot} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableJelphaBot}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public JsonSerializableReminderJelphaBot(ReadOnlyJelphaBot source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminders.addAll(source.getReminderList().stream().map(JsonAdaptedReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Converts this address book into the model\u0027s {@code JelphaBot} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public JelphaBot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        JelphaBot jelphaBot \u003d new JelphaBot();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // jelphabot\u0027s reminders."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (JsonAdaptedReminder jsonAdaptedReminder : reminders) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            Reminder reminder \u003d jsonAdaptedReminder.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (jelphaBot.hasReminder(reminder)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REMINDERS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            jelphaBot.addReminder(reminder);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return jelphaBot;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 61
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public interface Storage extends JelphaBotStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Path getJelphaBotFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    void saveJelphaBot(ReadOnlyJelphaBot jelphaBot) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, boolean isReminder) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 13,
      "yapdianhao": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Manages storage of JelphaBot data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private JelphaBotStorage jelphaBotStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public StorageManager(JelphaBotStorage jelphaBotStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.jelphaBotStorage \u003d jelphaBotStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d JelphaBot methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return jelphaBotStorage.getJelphaBotFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Path getJelphaBotReminderPath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return jelphaBotStorage.getJelphaBotReminderPath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return readJelphaBot(jelphaBotStorage.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(boolean isReminder) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return jelphaBotStorage.readJelphaBot(isReminder);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return jelphaBotStorage.readJelphaBot(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        saveJelphaBot(jelphaBot, jelphaBotStorage.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, boolean isReminder) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        jelphaBotStorage.saveJelphaBot(jelphaBot, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        jelphaBotStorage.saveJelphaBot(jelphaBot, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 17,
      "yapdianhao": 24,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Represents a storage for {@link seedu.jelphabot.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Saves the given {@link seedu.jelphabot.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/CalendarDayCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.calendar.CalendarDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * UI component that displays the day on the calendar."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarDayCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String FXML \u003d \"CalendarDayCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarDate calendarDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label calendarDay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Circle circleDay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDayCard(CalendarDate calendarDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.calendarDate \u003d calendarDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setText(String.valueOf(calendarDate.getDay()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDate getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return calendarDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Highlights today\u0027s date on the calendar."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void highlightToday() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setTextFill(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setStyle(\"-fx-font-weight:bold\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        circleDay.setFill(Paint.valueOf(\"#4169E1\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Remove highlight for today\u0027s date on the calendar."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void removeHighlightedToday() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setTextFill(Paint.valueOf(\"#4169E1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        circleDay.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Remove highlight for a date on the calendar."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void removeHighlightedDay() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        circleDay.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Highlights the day card on the calendar when calendar command is run."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void highlightDay() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        circleDay.setFill(Paint.valueOf(\"#B0C4DE\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Sets the colour of labels for dates this month."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void setSameMonth() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setTextFill(Paint.valueOf(\"000000\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Sets the colour of labels for trailing dates from the previous and next months."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void setDiffMonth() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setTextFill(Paint.valueOf(\"808080\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setOpacity(0.75);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "alam8064": 80
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/CalendarPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.calendar.CalendarDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * UI component for calendar view to be displayed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static ArrayList\u003cCalendarDayCard\u003e dayCardsInMonth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarDate calendarDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarDayCard highlightedDay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private TabPane mainWindowTabPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private GridPane calendarGrid;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label monthYear;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarPanel(CalendarDate calendarDate, TabPane mainWindowTabPane) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        logger.info(\"Initialising calendar panel stage\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.mainWindowTabPane \u003d mainWindowTabPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.calendarDate \u003d calendarDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        monthYear.setText(calendarDate.getMonthName() + \", \" + calendarDate.getYear());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarDate firstDay \u003d calendarDate.getFirstDay();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        fillGridPane(firstDay);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Fills the grid pane of the calendar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param firstDay The date representing the first day of the month."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void fillGridPane(CalendarDate firstDay) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarGrid.getChildren().clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        int weekIndex \u003d firstDay.getDayOfWeek() - 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        int lengthPrevMonth \u003d firstDay.getLengthPrevMonth();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        int day \u003d lengthPrevMonth - weekIndex + 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarDate currDate \u003d firstDay.createPrevMonthDate(day);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        dayCardsInMonth \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        for (int row \u003d 0; row \u003c 6; row++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            for (int col \u003d 0; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                CalendarDayCard calendarDayCard \u003d new CalendarDayCard(currDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                if (currDate.isSameMonth(firstDay.getMonth())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    calendarDayCard.setSameMonth();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    dayCardsInMonth.add(calendarDayCard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    calendarDayCard.setDiffMonth();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                if (currDate.isToday()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    // logger.info(\"today date\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    calendarDayCard.highlightToday();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    highlightedDay \u003d calendarDayCard;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                calendarGrid.add(calendarDayCard.getRoot(), col, row);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                currDate \u003d currDate.dateNextDay();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        logger.info(\"length of dayCardsInMonth \" + dayCardsInMonth.size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updatest the MonthYear Label of the Calendar Panel with the inputted parameter."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param yearMonth Specifies the year and month of the calendar to be set to."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void changeMonthYearLabel(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDate \u003d new CalendarDate(yearMonth.atEndOfMonth());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        monthYear.setText(calendarDate.getMonthName() + \", \" + calendarDate.getYear());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public String getMonthYear() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return monthYear.getText();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getCalendarMonth() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return calendarDate.getMonth();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Switches to display the calendar panel tab."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        logger.fine(\"Showing calendar panel of application.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        mainWindowTabPane.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Returns true if the calendar panel is currently being shown."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return mainWindowTabPane.isPressed();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static CalendarDayCard getDayCard(int dayIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return CalendarPanel.dayCardsInMonth.get(dayIndex - 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDayCard getHighlightedDay() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return highlightedDay;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void setHighlightedDay(int dayIndex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        highlightedDay \u003d dayCardsInMonth.get(dayIndex - 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean isTodayHighlighted() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return highlightedDay.getDate().isToday();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 1,
      "alam8064": 126
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/CalendarTaskCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * An UI component that displays information of a {@code Task} in Calendar."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarTaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String FXML \u003d \"CalendarTaskListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on JelphaBot level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label timeSpent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarTaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        populateChildElements(task, displayedIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Populates the child elements in the CalendarTaskCard"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param task           the task to populate."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param displayedIndex the indicated index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void populateChildElements(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        description.setText(task.getDescription().fullDescription);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        moduleCode.setText(task.getModuleCode().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        status.setText(task.getStatus().name());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        timeSpent.setText(\"(time spent: \" + task.getTimeSpent().toString() + \")\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        //TODO add in task PRIORITY"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarTaskCard card \u003d (CalendarTaskCard) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                   \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 88
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/CalendarTaskListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarTaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                setGraphic(new CalendarTaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "alam8064": 47
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "         * @see seedu.jelphabot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/GroupedTaskListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.GroupedTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.SubgroupTaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Tasks are further sorted into subgroups"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class GroupedTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String FXML \u003d \"GroupedTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final ObservableList\u003cSubgroupTaskList\u003e subLists;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final GroupedTaskList groupedTaskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private ListView\u003cSubgroupTaskList\u003e taskListGroups;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedTaskListPanel(GroupedTaskList groupedTaskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.groupedTaskList \u003d groupedTaskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.subLists \u003d groupedTaskList.getList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskListGroups.setCellFactory(viewCell -\u003e new GroupedTaskListPanel.GroupedTaskListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskListGroups.setItems(subLists);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        subLists.addListener((ListChangeListener\u003c? super SubgroupTaskList\u003e) change -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            while (change.next()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                if (change.wasRemoved()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    refresh();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedTaskList.Category getCategory() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return groupedTaskList.getCategory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void refresh() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskListGroups.setItems(subLists);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        logger.log(Level.INFO, \"GroupedTaskListPanel Refreshed\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code GroupedTaskCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    class GroupedTaskListViewCell extends ListCell\u003cSubgroupTaskList\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        protected void updateItem(SubgroupTaskList task, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setGraphic(new SubgroupTaskListPanel(task).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 70,
      "Clouddoggo": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f09-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.util.DateUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.calendar.CalendarDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.GroupedTaskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.GroupedTaskList.Category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static boolean firstStart \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final String WELCOME_STRING \u003d \"Welcome to JelphaBot!\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                                     + \"To go back to the list of your tasks, type list!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private GroupedTaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarTaskListPanel calendarTaskListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ProductivityPanel productivityPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private SummaryPanel summaryPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Productivity productivity;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private TabPane mainWindowTabPane;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private StackPane calendarTaskListPanelPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private StackPane calendarPanelPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private StackPane productivityPanelPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private StackPane summaryPanelPlaceholder;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static CalendarPanel getCalendarPanel() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return calendarPanel;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskListPanel \u003d new GroupedTaskListPanel(logic.getGroupedTaskList(Category.DATE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        //update getFilteredCalendarTaskList"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarTaskListPanel \u003d new CalendarTaskListPanel(logic.getFilteredCalendarTaskList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        logic.updateFilteredCalendarTaskList(DateUtil.getDueTodayPredicate());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarTaskListPanelPlaceholder.getChildren().add(calendarTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(CalendarDate.getCurrent(), mainWindowTabPane);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarPanelPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        SummaryList summaryList \u003d logic.getSummaryList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryList.addSummary(new Summary(logic.getFilteredTaskList()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryPanel \u003d new SummaryPanel(summaryList.asUnmodifiableObservableList(), mainWindowTabPane);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryPanelPlaceholder.getChildren().add(summaryPanel.getRoot());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ProductivityList productivityList \u003d logic.getProductivityList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        productivityList.addProductivity(new Productivity(logic.getFilteredTaskList()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityPanel \u003d new ProductivityPanel(productivityList.asUnmodifiableObservableList(), mainWindowTabPane);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityPanelPlaceholder.getChildren().add(productivityPanel.getRoot());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // StatusBarFooter statusBarFooter \u003d new"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // StatusBarFooter(logic.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Switches view to productivity panel."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private void handleProductivity() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!productivityPanel.isShowing()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            productivityPanel.show();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // TODO: add case when alr on panel."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Switches view to calendar panel."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void handleCalendar() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (!calendarPanel.isShowing()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.show();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Switches view to summary panel."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void handleSummary() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (!summaryPanel.isShowing()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            summaryPanel.show();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (firstStart) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            resultDisplay.setFeedbackToUser(WELCOME_STRING);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            firstStart \u003d false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Switches view to Task List panel."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void handleTaskList(GroupedTaskList.Category sublistCategory) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        mainWindowTabPane.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        GroupedTaskList groupedTasks \u003d logic.getGroupedTaskList(sublistCategory);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskListPanel \u003d new GroupedTaskListPanel(groupedTasks);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedTaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ProductivityPanel getProductivityPanel() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return productivityPanel;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @see seedu.jelphabot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            } else if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            switch (commandResult.getTabSwitch()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case CALENDAR:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                handleCalendar();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case PRODUCTIVITY:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                handleProductivity();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case SUMMARY:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                handleSummary();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case TASK_LIST_DATE:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                handleTaskList(GroupedTaskList.Category.DATE);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case TASK_LIST_MODULE:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                handleTaskList(Category.MODULE);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case STAY_ON_CURRENT:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                // do nothing"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 50,
      "Clouddoggo": 42,
      "eedenong": 35,
      "-": 158,
      "alam8064": 38
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/ProductivityCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * An UI component that displays information of a {@code Productivity}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class ProductivityCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String FXML \u003d \"ProductivityCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public final Productivity productivity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label tasksCompleted;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label overdueStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label runningTimers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label timeSpentToday;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ProgressBar tasksCompletionProgress;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ProductivityCard(Productivity productivity) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.productivity \u003d productivity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        String[] tmp \u003d productivity.getTasksCompleted().toStringArray();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        String[] completion \u003d tmp[0].split(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        tasksCompleted.setText(\"   \" + completion[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        remark.setText(completion[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        overdueStatus.setText(tmp[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        runningTimers.setText(productivity.getRunningTimers().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        timeSpentToday.setText(productivity.getTimeSpentToday().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tasksCompletionProgress.setProgress(productivity.getTasksCompleted().getPercentage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!(other instanceof ProductivityCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ProductivityCard card \u003d (ProductivityCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasksCompleted.getText().equals(card.tasksCompleted.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 runningTimers.getText().equals(card.runningTimers.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 remark.getText().equals(card.remark.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 overdueStatus.getText().equals(card.overdueStatus.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 timeSpentToday.getText().equals(card.timeSpentToday.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 productivity.equals(card.productivity);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 63,
      "eedenong": 5
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/ProductivityPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * The Productivity Panel. Provides the basic application layout of productivity of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class ProductivityPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String FXML \u003d \"ProductivityPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProductivityPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private TabPane mainWindowTabPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ListView\u003cProductivity\u003e productivityListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ProductivityPanel(ObservableList\u003cProductivity\u003e productivityList, TabPane tabPane) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        logger.info(\"Initialising productivity panel stage\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.mainWindowTabPane \u003d tabPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityListView.setItems(productivityList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityListView.setCellFactory(listView -\u003e new ProductivityListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Swtiches to the productivity panel."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        logger.fine(\"Showing productivity panel of application.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        mainWindowTabPane.getSelectionModel().select(3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns true if the productivity panel is currently being shown."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return mainWindowTabPane.isPressed();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    class ProductivityListViewCell extends ListCell\u003cProductivity\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        protected void updateItem(Productivity productivity, boolean empty) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            super.updateItem(productivity, empty);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (empty || productivity \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                setGraphic(new ProductivityCard(productivity).getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 79,
      "eedenong": 2
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/ReminderPopup.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//import javafx.stage.Popup;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Reminders shown in app startup. Will show when tasks are about to expire,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * as specified by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderPopup extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String FXML \u003d \"ReminderPopup.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String REMINDERS_STRING \u003d \"Here are your tasks that are due soon!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    //private final List\u003cPopup\u003e popupList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    //private final List\u003cTask\u003e toBeReminded;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Stage reminderStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderPopup (Stage reminderStage, Logic logic) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        super(FXML, reminderStage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        logger.info(\"Initialising reminders\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminderStage \u003d reminderStage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.taskList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        setWindowDefaultSize(logic.getPopUpWindowGuiSettings());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Fills the placeholders of this window"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    void fillWindow() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // get the list of Incomplete tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //ObservableList\u003cTask\u003e taskList \u003d logic.getFilteredByReminder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Task task : logic.getFilteredByReminder()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            //logger.info(\"added reminder\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //logger.info(\"taskList size \" + taskList.size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(taskList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // initialise resultDisplay"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        resultDisplay.setFeedbackToUser(REMINDERS_STRING);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Shows the reminder popup. If no reminders are pending,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * a popup is not required."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        logger.info(\"Showing reminderStage\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //logger.info(\"reminded size: \" + taskList.size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            reminderStage.show();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminderStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminderStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            reminderStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            reminderStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private void closeButtonAction() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        logger.info(\"Close Button pressed. Closing morningCallWindow\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminderStage.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "yapdianhao": 107,
      "Clouddoggo": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/SubgroupTaskListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.NumberBinding;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.control.TitledPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.SubgroupTaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Panel containing one grouped list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Tasks are further sorted into pinned, dueToday, dueThisWeek, dueSomeday"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class SubgroupTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String FXML \u003d \"SubgroupTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final int PREF_CELL_HEIGHT \u003d 100;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final NumberBinding START_INDEX \u003d Bindings.createIntegerBinding(() -\u003e 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private TitledPane category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private ListView\u003cTask\u003e groupingList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private SubgroupTaskList subGroupTaskList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public SubgroupTaskListPanel(SubgroupTaskList subGroupTaskList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.subGroupTaskList \u003d subGroupTaskList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        category.setText(subGroupTaskList.getGroupName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupingList.setCellFactory(viewCell -\u003e new SubgroupTaskListViewCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupingList.prefHeightProperty().bind(subGroupTaskList.sizeBinding().multiply(PREF_CELL_HEIGHT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupingList.setItems(subGroupTaskList.getList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code GroupedTaskCard}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    class SubgroupTaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setGraphic(new TaskCard("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    task,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    START_INDEX.add(subGroupTaskList.startIndexBinding()).add(getIndex())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                ).getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 64,
      "Clouddoggo": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/SummaryCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * A UI Component that displays information of a {@code Summary}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final String FXML \u003d \"SummaryCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final String BREAKLINE_STRING \u003d \"--------------------------------------------------\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Summary summary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Label breakline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Label tasksDueToday;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Label tasksCompletedToday;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public SummaryCard(Summary summary) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        breakline.setText(BREAKLINE_STRING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        tasksDueToday.setText(summary.getTasksIncompleteDueToday().getTasksDueTodayString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        tasksCompletedToday.setText(summary.getTasksCompletedToday().getTasksCompletedTodayString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        //short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (!(other instanceof SummaryCard)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        SummaryCard summaryCard \u003d (SummaryCard) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return breakline.getText().equals(summaryCard.breakline.getText())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u0026\u0026 tasksDueToday.getText().equals(summaryCard.tasksDueToday.getText())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u0026\u0026 tasksCompletedToday.getText().equals(summaryCard.tasksCompletedToday.getText());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 54
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/SummaryPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * The Summary Panel. Provides the basic application layout of the summary of tasks due today,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final String FXML \u003d \"SummaryPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final int PREF_CELL_HEIGHT \u003d 210;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SummaryPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private TabPane mainWindowTabPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private ListView\u003cSummary\u003e summaryPanelListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public SummaryPanel(ObservableList\u003cSummary\u003e summaryList, TabPane tabPane) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        logger.info(\"Initialising summary panel stage\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.mainWindowTabPane \u003d tabPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryPanelListView.setItems(summaryList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryPanelListView.setCellFactory(listView -\u003e new SummaryTaskListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Swtiches to the summary panel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        logger.info(\"Showing summary panel of application\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        mainWindowTabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns true if the summary panel is currently being shown"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return mainWindowTabPane.isPressed();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eedenong"
        },
        "content": "class SummaryTaskListViewCell extends ListCell\u003cSummary\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    protected void updateItem(Summary summary, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        super.updateItem(summary, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (empty || summary \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            setGraphic(new SummaryCard(summary).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "eedenong": 69
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/TaskCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.NumberBinding;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String FXML \u003d \"GroupedTaskListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on JelphaBot level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label timeSpent;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskCard(Task task, NumberBinding displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        setId(displayedIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        populateTaskElements(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        setId(displayedIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        populateTaskElements(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void setId(NumberBinding displayedIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        id.textProperty().bind(displayedIndex.asString(\"%d. \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void setId(int displayedIndex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        id.setText(String.format(\"%d. \", displayedIndex));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Populates TaskCard with data from a model."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param task the task containing model data for this TaskCard"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void populateTaskElements(Task task) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        description.setText(task.getDescription().fullDescription);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleCode.setText(task.getModuleCode().value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        applyPriorityMarkdown(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        status.setText(task.getStatus().name());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        timeSpent.setText(\"(SPENT: \" + task.getTimeSpent().toString() + \")\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dateTime.setText(task.getDateTime().getDisplayValue());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Applies markdown to TaskCard based on Task priority"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param task the task containing model data for this TaskCard."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void applyPriorityMarkdown(Task task) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (task.getPriority().equals(Priority.HIGH)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            description.setId(\"highPriority\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            moduleCode.setId(\"highPriority\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else if (task.getPriority() \u003d\u003d Priority.LOW) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            description.setId(\"lowPriority\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            moduleCode.setId(\"lowPriority\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            description.setId(\"normalPriority\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            moduleCode.setId(\"normalPriority\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 65,
      "yapdianhao": 3,
      "Clouddoggo": 2,
      "eedenong": 2,
      "-": 45,
      "alam8064": 4
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/TaskListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // public void show() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     logger.fine()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 11,
      "yapdianhao": 3,
      "Clouddoggo": 7,
      "eedenong": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ProductivityPanel productivityPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private ReminderPopup reminderPopup;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // create second stage for MorningCallWindow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Stage reminderStage \u003d new Stage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            reminderPopup \u003d new ReminderPopup(reminderStage, logic);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            reminderPopup.fillWindow();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            reminderPopup.show();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            // show summary tab first as \"Morning call\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            mainWindow.handleSummary();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/JelphaBotTheme.css\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "yapdianhao": 6,
      "Clouddoggo": 2,
      "eedenong": 5,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CalendarDayCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"calendarGridDay\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cCircle fx:id\u003d\"circleDay\" fill\u003d\"#ffffff00\" radius\u003d\"14.0\" stroke\u003d\"#ffffff00\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cLabel fx:id\u003d\"calendarDay\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"\\$day\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "alam8064": 10
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"374.0\" prefWidth\u003d\"415.0\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003cStackPane alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"375.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cLabel fx:id\u003d\"monthYear\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"\\$month\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cFont name\u003d\"Franklin Gothic Medium\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003cStackPane prefHeight\u003d\"74.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cGridPane alignment\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Mon\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Tue\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Wed\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Thu\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Fri\" GridPane.columnIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Sat\" GridPane.columnIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Sun\" GridPane.columnIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cGridPane fx:id\u003d\"calendarGrid\" alignment\u003d\"CENTER\" prefHeight\u003d\"134.0\" prefWidth\u003d\"375.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "alam8064": 64
    }
  },
  {
    "path": "src/main/resources/view/CalendarTaskListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" alignment\u003d\"CENTER_LEFT\" fillHeight\u003d\"false\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "      spacing\u003d\"16.0\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003cLabel fx:id\u003d\"moduleCode\" alignment\u003d\"CENTER\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"70.0\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "           text\u003d\"\\$moduleCode\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003cGridPane maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"105.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105.0\" spacing\u003d\"4.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cInsets left\u003d\"16.0\" right\u003d\"8.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"16.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeSpent\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeSpent\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c!--    \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$dateTime\"/\u003e--\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "alam8064": 37
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/GroupedTaskListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" alignment\u003d\"CENTER_LEFT\" fillHeight\u003d\"false\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"400.0\" spacing\u003d\"16.0\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003cLabel fx:id\u003d\"moduleCode\" alignment\u003d\"CENTER\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"100.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003cGridPane maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"105.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105.0\" spacing\u003d\"4.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003cInsets left\u003d\"16.0\" right\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"16.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeSpent\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeSpent\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cRowConstraints vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 37
    }
  },
  {
    "path": "src/main/resources/view/GroupedTaskListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cScrollPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"groupedTaskListPanel\" fx:id\u003d\"groupedTaskListPanel\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minViewportHeight\u003d\"400.0\" minViewportWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "      \u003cListView id\u003d\"taskListGroups\" fx:id\u003d\"taskListGroups\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"400.0\" minWidth\u003d\"600.0\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 9
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cfx:root minHeight\u003d\"600.0\" minWidth\u003d\"600.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"JelphaBot\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cURL value\u003d\"@JelphaBotTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"545.0\" prefWidth\u003d\"650.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" maxHeight\u003d\"-Infinity\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--            \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"SOMETIMES\"\u003e--\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--               \u003cchildren\u003e--\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cTabPane fx:id\u003d\"mainWindowTabPane\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003ctabs\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003cTab fx:id\u003d\"summaryTab\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                \u003cVBox fx:id\u003d\"summaryPanel\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"340\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"summaryPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                \u003cLabel graphicTextGap\u003d\"0.0\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"ummary\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                        \u003cLabel styleClass\u003d\"bold-letter\" text\u003d\"S\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003cTab fx:id\u003d\"taskListTab\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: MAROON;\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                \u003cLabel graphicTextGap\u003d\"0.0\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"ask List\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                        \u003cLabel styleClass\u003d\"bold-letter\" text\u003d\"T\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cTab\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                \u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                        \u003cSplitPane fx:id\u003d\"calendarPane\" dividerPositions\u003d\"0.47\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                   maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                            \u003citems\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                        \u003cVBox fx:id\u003d\"calendarTaskList\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                            \u003cStackPane fx:id\u003d\"calendarTaskListPanelPlaceholder\" prefHeight\u003d\"372.0\" prefWidth\u003d\"172.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                        \u003cVBox fx:id\u003d\"calendarView\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                \u003cStackPane fx:id\u003d\"calendarPanelPlaceholder\" prefHeight\u003d\"374.0\" prefWidth\u003d\"415.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                            \u003c/children\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                            \u003c/items\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                \u003cLabel graphicTextGap\u003d\"0.0\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"alendar\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                        \u003cLabel styleClass\u003d\"bold-letter\" text\u003d\"C\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cTab\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                \u003cVBox fx:id\u003d\"productivityPanel\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"340\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"productivityPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                \u003cLabel graphicTextGap\u003d\"0.0\" text\u003d\"roductivity\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                        \u003cLabel styleClass\u003d\"bold-letter\" text\u003d\"P\" /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--               \u003c/children\u003e--\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--            \u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e--\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"stack-pane\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"500.0\" minHeight\u003d\"200.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e--\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--                    \u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e--\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--                    \u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--                \u003c/StackPane\u003e--\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"35.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"stack-pane\" VBox.vgrow\u003d\"NEVER\"\u003e--\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--                    \u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e--\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--                    \u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c!--                \u003c/StackPane\u003e--\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 11,
      "Clouddoggo": 26,
      "eedenong": 13,
      "-": 41,
      "alam8064": 70
    }
  },
  {
    "path": "src/main/resources/view/MorningCallWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.control.ScrollBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" minHeight\u003d\"540\" minWidth\u003d\"400\" title\u003d\"Morning Call\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cURL value\u003d\"@JelphaBotTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"500.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"140\" prefWidth\u003d\"140.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003cInsets left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                           \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                 \u003cScrollBar layoutX\u003d\"364.0\" layoutY\u003d\"1.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"395.0\" prefWidth\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                           \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \u003c/children\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"50\" minHeight\u003d\"50\" prefHeight\u003d\"50\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cButtonBar maxHeight\u003d\"40.0\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"40.0\" prefWidth\u003d\"80.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003cbuttons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                 \u003cButton fx:id\u003d\"closeButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"0.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#closeButtonAction\" prefHeight\u003d\"31.0\" text\u003d\"OK\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003c/buttons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "yapdianhao": 16,
      "Clouddoggo": 1,
      "eedenong": 32
    }
  },
  {
    "path": "src/main/resources/view/NightDebriefWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003cfx:root minHeight\u003d\"540\" minWidth\u003d\"400\" title\u003d\"Night Debrief\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cURL value\u003d\"@JelphaBotTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"500.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"140\" prefWidth\u003d\"140.0\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                              AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003cInsets left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                       prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cButtonBar maxHeight\u003d\"40.0\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"40.0\" prefWidth\u003d\"80.0\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003cbuttons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003cButton fx:id\u003d\"closeButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"0.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#closeButtonAction\" prefHeight\u003d\"31.0\" text\u003d\"OK\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003c/buttons\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "eedenong": 47
    }
  },
  {
    "path": "src/main/resources/view/ProductivityCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c!-- TODO: fix UI --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"85\" prefHeight\u003d\"140.0\" prefWidth\u003d\"195.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cInsets bottom\u003d\"4\" left\u003d\"15\" right\u003d\"4\" top\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cLabel graphicTextGap\u003d\"0.0\" prefHeight\u003d\"24.0\" prefWidth\u003d\"155.0\" styleClass\u003d\"cell_big_label\" text\u003d\"Productivity Report\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cHBox prefHeight\u003d\"26.0\" prefWidth\u003d\"176.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cProgressBar fx:id\u003d\"tasksCompletionProgress\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" progress\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cLabel fx:id\u003d\"tasksCompleted\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$tasksCompleted\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cLabel fx:id\u003d\"overdueStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$overdueStatus\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cInsets bottom\u003d\"4\" left\u003d\"15\" right\u003d\"4\" top\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"85\" prefHeight\u003d\"100.0\" prefWidth\u003d\"195.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cInsets bottom\u003d\"4\" left\u003d\"15\" right\u003d\"4\" top\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cLabel prefHeight\u003d\"24.0\" prefWidth\u003d\"90.0\" styleClass\u003d\"cell_medium_label\" text\u003d\"Time Spent\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeSpentToday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeSpentToday\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"85\" prefHeight\u003d\"100.0\" prefWidth\u003d\"195.0\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cInsets bottom\u003d\"4\" left\u003d\"15\" right\u003d\"4\" top\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         \u003cHBox prefHeight\u003d\"30.0\" prefWidth\u003d\"176.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003cLabel prefHeight\u003d\"24.0\" prefWidth\u003d\"120.0\" styleClass\u003d\"cell_medium_label\" text\u003d\"Running Timer(s)\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                      \u003cminWidth\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                          \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                      \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003cImageView fitHeight\u003d\"27.0\" fitWidth\u003d\"17.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003cimage\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                     \u003cImage url\u003d\"@../images/timer.png\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003c/image\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cLabel fx:id\u003d\"runningTimers\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$runningTimers\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "Clouddoggo": 78
    }
  },
  {
    "path": "src/main/resources/view/ProductivityPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cListView fx:id\u003d\"productivityListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 7
    }
  },
  {
    "path": "src/main/resources/view/ReminderPopup.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.control.ScrollBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cfx:root minHeight\u003d\"540\" minWidth\u003d\"400\" title\u003d\"Reminder Popup\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        \u003cImage url\u003d\"@/images/reminder.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cURL value\u003d\"@JelphaBotTheme.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"500.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"140\" prefWidth\u003d\"140.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                \u003cInsets left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                           \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                 \u003cScrollBar layoutX\u003d\"364.0\" layoutY\u003d\"1.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"395.0\" prefWidth\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                           \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \u003c/children\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"50\" minHeight\u003d\"50\" prefHeight\u003d\"50\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                            \u003cButtonBar maxHeight\u003d\"40.0\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"40.0\" prefWidth\u003d\"80.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \u003cbuttons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                 \u003cButton fx:id\u003d\"closeButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"0.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#closeButtonAction\" prefHeight\u003d\"31.0\" text\u003d\"OK\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \u003c/buttons\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                            \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "yapdianhao": 49,
      "Clouddoggo": 1
    }
  },
  {
    "path": "src/main/resources/view/SortedTaskListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"SortedTaskList\" stylesheets\u003d\"@JelphaBotTheme.css\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003cScrollPane fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003cTitledPane animated\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"587.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                text\u003d\"Pinned Tasks\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                            \u003cListView fx:id\u003d\"pinnedTaskListView\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"585.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003cTitledPane animated\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Overdue Tasks\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                            \u003cListView fx:id\u003d\"overdueTaskListView\" maxHeight\u003d\"1.7976931348623157E308\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003cTitledPane animated\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Due Today\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                            \u003cListView fx:id\u003d\"dueTodayTaskListView\" maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"0.0\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                      prefWidth\u003d\"585.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003cTitledPane animated\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Due This Week\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                            \u003cListView fx:id\u003d\"dueThisWeekTaskListView\" maxHeight\u003d\"1.7976931348623157E308\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003cTitledPane animated\u003d\"false\" contentDisplay\u003d\"BOTTOM\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                text\u003d\"Due Someday\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                            \u003cListView fx:id\u003d\"dueSomedayTaskListView\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 41,
      "Clouddoggo": 2
    }
  },
  {
    "path": "src/main/resources/view/SubgroupTaskListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cTitledPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"category\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Group Title\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \u003cListView fx:id\u003d\"groupingList\" maxWidth\u003d\"1.7976931348623157E308\" stylesheets\u003d\"@JelphaBotTheme.css\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003cfont\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "      \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003c/font\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c/TitledPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 12,
      "Clouddoggo": 1
    }
  },
  {
    "path": "src/main/resources/view/SummaryCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "      \u003cVBox maxHeight\u003d\"-Infinity\" prefHeight\u003d\"50.0\" prefWidth\u003d\"195.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cLabel prefHeight\u003d\"24.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"cell_big_label\" text\u003d\"Welcome to JelphaBot!\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cLabel fx:id\u003d\"breakline\" text\u003d\"\\$breakline\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "      \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"363.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Here are your tasks that are due today!\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cLabel fx:id\u003d\"tasksDueToday\" text\u003d\"\\$tasksDueToday\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "      \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Here are your tasks that you have completed today!\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "             \u003cLabel fx:id\u003d\"tasksCompletedToday\" text\u003d\"\\$tasksCompletedToday\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                 \u003cminWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                     \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                 \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "             \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "eedenong": 37
    }
  },
  {
    "path": "src/main/resources/view/SummaryPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003cVBox stylesheets\u003d\"@JelphaBotTheme.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "      \u003cListView fx:id\u003d\"summaryPanelListView\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "eedenong": 10
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefHeight\u003d\"105.0\" prefWidth\u003d\"195.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" maxWidth\u003d\"1.7976931348623157E308\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003cLabel fx:id\u003d\"timeSpent\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeSpent\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 18,
      "-": 7,
      "alam8064": 9
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\" + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final Index fifthTaskIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(fifthTaskIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 7,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DATETIME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.storage.JsonJelphaBotStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        JsonJelphaBotStorage addressBookStorage \u003d new JsonJelphaBotStorage("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            temporaryFolder.resolve(\"jelphaBot.json\"), temporaryFolder.resolve(\"reminder.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // Setup LogicManager with JsonJelphaBotIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonJelphaBotStorage addressBookStorage \u003d new JsonJelphaBotIoExceptionThrowingStub("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            temporaryFolder.resolve(\"ioExceptionJelphaBot.json\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            temporaryFolder.resolve(\"ioExceptionReminder.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            AddCommand.COMMAND_WORD + DESCRIPTION_DESC_TUTORIAL + DATETIME_DESC_TUTORIAL + MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(TUTORIAL).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void getFilteredByCompleteTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredByCompleteTaskList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void getFilteredByIncompleteTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredByIncompleteTaskList().remove(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void getFilteredByIncompleteDueTodayTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                                                    .getFilteredByIncompleteDueTodayTaskList()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                                                    .remove(0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * - the internal model manager state is the same as that in"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        throws CommandException, ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * result message is correct."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * result message is correct."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * - the internal model manager state is the same as that in"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static class JsonJelphaBotIoExceptionThrowingStub extends JsonJelphaBotStorage {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        private JsonJelphaBotIoExceptionThrowingStub(Path filePath, Path reminderPath) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            super(filePath, reminderPath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 37,
      "yapdianhao": 6,
      "Clouddoggo": 27,
      "eedenong": 17,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertCommandSuccess(new AddCommand(validTask), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskInList \u003d model.getJelphaBot().getTaskList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertCommandFailure(new AddCommand(taskInList), model, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 19,
      "yapdianhao": 2,
      "Clouddoggo": 1,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.GroupedTaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.PinnedTaskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ViewTaskList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // TODO: fix this fking test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     CommandResult commandResult \u003d new AddCommand(validTask).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTask), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_TASK, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task alice \u003d new TaskBuilder().withDescription(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task bob \u003d new TaskBuilder().withDescription(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommandCopy);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(1, addAliceCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(null, addAliceCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(addAliceCommand, addBobCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public GuiSettings getPopUpWindowGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void setJelphaBotFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public ReadOnlyJelphaBot getJelphaBot() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public List\u003cTask\u003e getTaskListFromJelphaBot() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public List\u003cReminder\u003e getReminderListFromJelphaBot() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void setJelphaBot(ReadOnlyJelphaBot newData) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public void setProductivity(Productivity productivity) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public ProductivityList getProductivityList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public GroupedTaskList getGroupedTaskList(GroupedTaskList.Category category) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public PinnedTaskList getPinnedTaskList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public ViewTaskList getLastShownList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredCalendarTaskList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        public void updateFilteredCalendarTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public SummaryList getSummaryList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public void setSummary(Summary summary) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final ArrayList\u003cProductivity\u003e productivityAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public void setProductivity(Productivity productivity) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            requireNonNull(productivity);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            productivityAdded.add(productivity);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new FilteredList\u003cTask\u003e(getJelphaBot().getTaskList());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public ReadOnlyJelphaBot getJelphaBot() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new JelphaBot();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 66,
      "yapdianhao": 25,
      "Clouddoggo": 43,
      "eedenong": 47,
      "-": 117,
      "alam8064": 3
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/CalendarCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Contains integration tests (interaction with the Model) for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * {@code CalendarCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void execute_calendar_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new CommandResult(CalendarCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowCalendar();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertCommandSuccess(new CalendarCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    //TODO fix null pointer error next week for commented out tests"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void equals_for_predicateConstructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        TaskDueWithinDayPredicate firstPredicate \u003d new TaskDueWithinDayPredicate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate date \u003d LocalDate.now().plusMonths(1).plusDays(1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        TaskDueWithinDayPredicate secondPredicate \u003d new TaskDueWithinDayPredicate(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarFirstCommand \u003d new CalendarCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarSecondCommand \u003d new CalendarCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(calendarFirstCommand.equals(calendarFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // CalendarCommand calendarFirstCommandCopy \u003d new CalendarCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // assertTrue(calendarFirstCommand.equals(calendarFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(calendarSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void equals_for_yearMonthConstructor() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        YearMonth first \u003d YearMonth.now();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        YearMonth second \u003d YearMonth.parse(\"Mar-2020\", DateTimeFormatter.ofPattern(\"MMM-uuuu\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarFirstCommand \u003d new CalendarCommand(first);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarSecondCommand \u003d new CalendarCommand(second);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(calendarFirstCommand.equals(calendarFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // CalendarCommand calendarFirstCommandCopy \u003d new CalendarCommand(first);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // assertTrue(calendarFirstCommand.equals(calendarFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // // different commands -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // assertFalse(calendarFirstCommand.equals(calendarSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void equals_for_bothConstructors() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        TaskDueWithinDayPredicate firstPredicate \u003d new TaskDueWithinDayPredicate();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate date \u003d LocalDate.now().plusMonths(1).plusDays(1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        TaskDueWithinDayPredicate secondPredicate \u003d new TaskDueWithinDayPredicate(date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        YearMonth first \u003d YearMonth.now();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        YearMonth second \u003d YearMonth.parse(\"Mar-2020\", DateTimeFormatter.ofPattern(\"MMM-uuuu\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarFirstCommand \u003d new CalendarCommand(firstPredicate, first);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarSecondCommand \u003d new CalendarCommand(secondPredicate, second);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(calendarFirstCommand.equals(calendarFirstCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarFirstCommandCopy \u003d new CalendarCommand(firstPredicate, first);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(calendarFirstCommand.equals(calendarFirstCommandCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(calendarSecondCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 1,
      "alam8064": 114
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void execute_emptyJelphaBot_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void execute_nonEmptyJelphaBot_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedModel.setJelphaBot(new JelphaBot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 13,
      "Clouddoggo": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different productivity value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\").isShowProductivity()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different calendar value -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\").isShowCalendar()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different task list value -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\").isShowDateTaskList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different task list value -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\").isShowModuleTaskList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // different summary value -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\").isShowSummary()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different productivity value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\").isShowProductivity().hashCode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different calendar value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\").isShowCalendar().hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // different summary value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\").isShowSummary().hashCode());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different task list value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\").isShowDateTaskList().hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 17,
      "Clouddoggo": 4,
      "eedenong": 4,
      "-": 52,
      "alam8064": 4
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.GroupedTaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsCompletedPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsIncompletePredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_DESCRIPTION_ASSIGNMENT \u003d \"Individual Assignment 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_DESCRIPTION_TUTORIAL \u003d \"Tutorial 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_STATUS_ASSIGNMENT \u003d \"INCOMPLETE\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_STATUS_TUTORIAL \u003d \"COMPLETE\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_DATETIME_ASSIGNMENT \u003d \"Jan-12-2020 22 00\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_DATETIME_TUTORIAL \u003d \"Mar-2-2019 23 59\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_MODULE_CODE_ASSIGNMENT \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_MODULE_CODE_TUTORIAL \u003d \"CS2101\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_PRIORITY_ASSIGNMENT \u003d \"1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_PRIORITY_TUTORIAL \u003d \"-1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_TAG_GRADED \u003d \"graded\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_TAG_PROJECT \u003d \"project\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String VALID_ASSESSMENT_REMINDER_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String VALID_ASSESSMENT_REMINDER_HOUR \u003d \"1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String VALID_ASSESSMENT_REMINDER_DAY \u003d \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String VALID_BOOK_REPORT_REMINDER_INDEX \u003d \"2\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String VALID_BOOK_REPORT_REMINDER_HOUR \u003d \"2\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String VALID_BOOK_REPORT_REMINDER_DAY \u003d \"2\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String VALID_ASSIGNMENT_REMINDER_INDEX \u003d \"3\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DESCRIPTION_DESC_ASSIGNMENT \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_ASSIGNMENT;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DESCRIPTION_DESC_TUTORIAL \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DATETIME_DESC_ASSIGNMENT \u003d \" \" + PREFIX_DATETIME + VALID_DATETIME_ASSIGNMENT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DATETIME_DESC_TUTORIAL \u003d \" \" + PREFIX_DATETIME + VALID_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MODULE_CODE_DESC_ASSIGNMENT \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_ASSIGNMENT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MODULE_CODE_DESC_TUTORIAL \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_TUTORIAL;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String PRIORITY_DESC_ASSIGNMENT \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_ASSIGNMENT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String PRIORITY_DESC_TUTORIAL \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String TAG_DESC_GRADED \u003d \" \" + PREFIX_TAG + VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String TAG_DESC_PROJECT \u003d \" \" + PREFIX_TAG + VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // \u0027!\u0026\u0027 not allowed in description"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"!Indivual \u0026ssignment 1\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // Inconsistent format + out of range"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String INVALID_DATETIME_DESC \u003d \" \" + PREFIX_DATETIME + \"22-10/2020 33 59\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // prefix requires at least 2 characters"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String INVALID_MODULE_CODE_DESC \u003d \" \" + PREFIX_MODULE_CODE + \"C2103T\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // priority only allows 1, 0, -1"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"-2\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // empty tag not allowed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"*\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    // reminder day negative"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String INVALID_REMINDER_DAY \u003d \"-1\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    //reminder hour \u003e 24"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String INVALID_REMINDER_HOUR \u003d \"30\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final String NEGATIVE_INDEX \u003d \"-1\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_TUTORIAL;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DESC_ASSIGNMENT \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_ASSIGNMENT)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withDateTime(VALID_DATETIME_ASSIGNMENT)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_ASSIGNMENT)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withPriority(VALID_PRIORITY_ASSIGNMENT)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DESC_TUTORIAL \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withDateTime(VALID_DATETIME_TUTORIAL)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_TUTORIAL)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withPriority(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Convenience wrapper to"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@link #assertCommandSuccess(Command, Model, CommandResult, Model)} that"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * - the address book, filtered task list and selected task in"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBot expectedJelphaBot \u003d new JelphaBot(actualModel.getJelphaBot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedJelphaBot, actualModel.getJelphaBot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code targetIndex} in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task task \u003d model.getLastShownList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final String[] splitName \u003d task.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        model.updateFilteredTaskList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * {@code targetIndex} in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex, GroupedTaskList.Category category) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task task \u003d model.getGroupedTaskList(category).get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final String[] splitName \u003d task.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only tasks that are"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * of the specified {@code status}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static void showTasksWithSpecifiedStatus(Model model, Status status) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        //ViewTaskList taskList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        List\u003cTask\u003e taskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        List\u003cTask\u003e tasksWithPredicate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        for (Task t: taskList) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            if (t.getStatus() \u003d\u003d status) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                tasksWithPredicate.add(t);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Predicate\u003cTask\u003e predicate;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (status \u003d\u003d Status.COMPLETE) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            predicate \u003d new TaskIsCompletedPredicate();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            predicate \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertEquals(tasksWithPredicate.size(), model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 86,
      "yapdianhao": 13,
      "Clouddoggo": 21,
      "eedenong": 29,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * RedoCommand) and unit tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskToDelete \u003d model.getLastShownList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getLastShownList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskToDelete \u003d model.getLastShownList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJelphaBot().getTaskList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 24,
      "Clouddoggo": 22,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/DeleteReminderCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class DeleteReminderCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void execute_validIndexUnfilteredReminder_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Reminder reminderToDelete \u003d model.getFilteredReminderList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        DeleteReminderCommand deleteReminderCommand \u003d new DeleteReminderCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteReminderCommand.MESSAGE_DELETE_REMINDER_SUCCESS,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        expectedModel.deleteReminder(reminderToDelete);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertCommandSuccess(deleteReminderCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 28
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.DoneCommand.createDoneTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.GroupedTaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskToMarkDone \u003d model.getLastShownList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task doneTask \u003d createDoneTask(taskToMarkDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_COMPLETE_SUCCESS, doneTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        expectedModel.setTask(taskToMarkDone, doneTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getLastShownList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskToMarkDone \u003d model.getLastShownList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task doneTask \u003d createDoneTask(taskToMarkDone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_COMPLETE_SUCCESS, doneTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedModel.setTask(taskToMarkDone, doneTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the task list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJelphaBot().getTaskList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test // Test against Category.MODULE as tasks that are overdue and completed are not shown."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_taskAlreadyCompletedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task firstTask \u003d model.getGroupedTaskList(GroupedTaskList.Category.MODULE).get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task doneTask \u003d createDoneTask(firstTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Model newModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        newModel.getGroupedTaskList(GroupedTaskList.Category.MODULE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        newModel.setTask(firstTask, doneTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandFailure(doneCommand, newModel, DoneCommand.MESSAGE_TASK_ALREADY_MARKED_COMPLETE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test // Test against Category.MODULE as tasks that are overdue and completed are not shown."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_taskAlreadyCompletedFilteredList_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK, GroupedTaskList.Category.MODULE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskInList \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            model.getGroupedTaskList(GroupedTaskList.Category.MODULE).get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task doneTask \u003d createDoneTask(taskInList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Model newModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        newModel.getGroupedTaskList(GroupedTaskList.Category.MODULE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        newModel.setTask(taskInList, doneTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandFailure(doneCommand, newModel, DoneCommand.MESSAGE_TASK_ALREADY_MARKED_COMPLETE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand firstDoneCommand \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand secondDoneCommand \u003d new DoneCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // same object returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(firstDoneCommand.equals(firstDoneCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // same values returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand firstDoneCommandCopy \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(firstDoneCommand.equals(firstDoneCommandCopy));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // different types returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(firstDoneCommand.equals(1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // null returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(firstDoneCommand.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different commands returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(firstDoneCommand.equals(secondDoneCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 16,
      "yapdianhao": 2,
      "Clouddoggo": 7,
      "eedenong": 112
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new JelphaBot(model.getJelphaBot()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getLastShownList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task lastTask \u003d model.getLastShownList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task editedTask \u003d taskInList.withDescription(VALID_DESCRIPTION_TUTORIAL).withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new JelphaBot(model.getJelphaBot()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedModel.setTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new JelphaBot(model.getJelphaBot()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL).build()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new JelphaBot(model.getJelphaBot()), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_duplicateTaskUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TASK, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_duplicateTaskFilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // edit task in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task taskInList \u003d model.getJelphaBot().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder(taskInList).build()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getLastShownList().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list, but"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * smaller than size of address book"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_invalidTaskIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJelphaBot().getTaskList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL).build()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand.EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(standardCommand, commandWithSameValues);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(null, standardCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(standardCommand, new ClearCommand());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        /* different index -\u003e returns false */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(standardCommand, new EditCommand(INDEX_SECOND_TASK, DESC_ASSIGNMENT));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(standardCommand, new EditCommand(INDEX_FIRST_TASK, DESC_TUTORIAL));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 62,
      "Clouddoggo": 35,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/EditTaskDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESC_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptorWithSameValues \u003d new EditCommand.EditTaskDescriptor(DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(DESC_ASSIGNMENT, descriptorWithSameValues);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(DESC_ASSIGNMENT, DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(null, DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(5, DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, DESC_TUTORIAL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditTaskDescriptor editedAssignment \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder(DESC_ASSIGNMENT).withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // does not check different status -\u003e (edittaskdescriptor should not be able to change the status of a task)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new EditTaskDescriptorBuilder(DESC_ASSIGNMENT).withDateTime(VALID_DATETIME_TUTORIAL).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder(DESC_ASSIGNMENT).withModuleCode(VALID_MODULE_CODE_TUTORIAL).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder(DESC_ASSIGNMENT).withPriority(VALID_PRIORITY_TUTORIAL).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new EditTaskDescriptorBuilder(DESC_ASSIGNMENT).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 39,
      "yapdianhao": 1,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "Clouddoggo": 1,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.CLASS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ERRAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.FINALS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Contains integration tests (interaction with the Model) for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_multipleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Yoga Milk Open\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(Arrays.asList(CLASS, ERRAND, FINALS), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 22,
      "Clouddoggo": 21,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "Clouddoggo": 1,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new CommandResult(ListCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowDateTaskList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedModel"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new CommandResult(ListCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowDateTaskList(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedModel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 18,
      "Clouddoggo": 4,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ProductivityCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.ProductivityCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class ProductivityCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_productivity_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new CommandResult(MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowProductivity();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandSuccess(new ProductivityCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 19
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ReminderCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void constructor_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ReminderCommand(null, null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Reminder reminder \u003d new ReminderBuilder().withIndex(\"2\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ReminderCommand reminderCommand \u003d new ReminderCommand(INDEX_THIRD_TASK, reminder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String expectedMessage \u003d String.format(ReminderCommand.MESSAGE_SUCCESS, INDEX_THIRD_TASK.getOneBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        expectedModel.addReminder(reminder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertCommandSuccess(reminderCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        int outOfBoundIndex \u003d model.getFilteredTaskList().size() + 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Reminder reminder \u003d new ReminderBuilder().withIndex(\"\" + outOfBoundIndex).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ReminderCommand reminderCommand \u003d new ReminderCommand(Index.fromOneBased(outOfBoundIndex), reminder);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertCommandFailure(reminderCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 50
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ShowCompletedCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTasksWithSpecifiedStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ShowCompletedCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class ShowCompletedCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        showTasksWithSpecifiedStatus(expectedModel, Status.COMPLETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // public void execute_listIsFilteredByPredicate_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     showTasksWithSpecifiedStatus(model, Status.COMPLETE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     assertCommandSuccess(new ShowCompletedCommand(), model, ShowCompletedCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 34
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ShowIncompleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTasksWithSpecifiedStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Contains integration tests (interaction with Model) and unit tests for ShowIncompleteCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class ShowIncompleteCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        showTasksWithSpecifiedStatus(expectedModel, Status.INCOMPLETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // public void execute_listIsFilteredByPredicate_showsIncompleteTasks() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     showTasksWithSpecifiedStatus(model, Status.INCOMPLETE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     assertCommandSuccess(new ShowIncompleteCommand(), model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     ShowIncompleteCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 35
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/SummaryCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_summary_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new CommandResult(SummaryCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowSummary();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandSuccess(new SummaryCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 1,
      "eedenong": 18
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DATETIME_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DATETIME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESCRIPTION_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.MODULE_CODE_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.PRIORITY_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.PRIORITY_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.TAG_DESC_PROJECT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_ASSIGNMENT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_ASSIGNMENT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_ASSIGNMENT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSIGNMENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(ASSIGNMENT).withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            PREAMBLE_WHITESPACE + DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_TUTORIAL + DESCRIPTION_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + DATETIME_DESC_ASSIGNMENT + MODULE_CODE_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // multiple datetime - last datetime accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + DATETIME_DESC_ASSIGNMENT + MODULE_CODE_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // multiple module codes - last module code accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_TUTORIAL + MODULE_CODE_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // multiple priorities - last priority accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_TUTORIAL"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task expectedTaskMultipleTags \u003d new TaskBuilder(ASSIGNMENT).withTags(VALID_TAG_PROJECT, VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTaskMultipleTags)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // no priority - defaults to medium priority"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(TUTORIAL).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_TUTORIAL + DATETIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_TUTORIAL + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedTask \u003d new TaskBuilder(TUTORIAL)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                           .withPriority(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                           .withTags().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_TUTORIAL + DATETIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedMessage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // missing datetime prefix"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + VALID_DATETIME_ASSIGNMENT"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedMessage"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // missing module code prefix"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + VALID_MODULE_CODE_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedMessage"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_ASSIGNMENT + VALID_DATETIME_ASSIGNMENT"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + VALID_MODULE_CODE_ASSIGNMENT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedMessage"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Description.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid datetime"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + INVALID_DATETIME_DESC"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            DateTime.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + INVALID_MODULE_CODE_DESC + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ModuleCode.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + INVALID_PRIORITY_DESC + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Priority.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            INVALID_DESCRIPTION_DESC + DATETIME_DESC_ASSIGNMENT + INVALID_MODULE_CODE_DESC"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + PRIORITY_DESC_ASSIGNMENT + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Description.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + TAG_DESC_PROJECT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 148,
      "Clouddoggo": 1,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 148
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/CalendarCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarCommandParser parser \u003d new CalendarCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    //input parse test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void isValidDate_invalidDate_returnsFalse() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid Date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid variations of MMM-d-uuuu / d-MMM-uuuu"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"2020-1-May\")); // wrong format: yyyy-d-MMM"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"05-1-2020\")); // wrong format: MM-d-yyyy"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid variations of MMM/d/uuuu / d/MMM/uuuu"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"May1/2020\")); // Missing / between month and day"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"1May/2020\")); // Missing / between month and day"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"May/12020\")); // Missing / between month and year"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"1/May2020\")); // Missing / between month and year"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"May12020\")); // Missing / between month, day and year"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"1May2020\")); // Missing / between month, day and year"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void constructDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM-d-uuuu\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        String stringRep \u003d formatter.format(LocalDate.now());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate fromFormat \u003d LocalDate.parse(stringRep, formatter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void isValidDate_validDate_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // valid DateTime formats"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidDate(\"May-1-2020\")); // MMM-d-yyyy"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidDate(\"1-May-2020\")); // d-MMM-yyyy"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidDate(\"May/1/2020\")); // MMM/d/yyyy"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void isValidYearMonth_invalidYearMonth_returnsFalse() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid YearMonth"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"\")); // empty string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\" \")); // spaces only"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"2020\")); // year with no month"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid variations of MMM-yyyy / yyyy-MMM / yyyy-MM / yy-MM"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"05-2020\")); // wrong format: MM-yyyy"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"05-20\")); // wrong format: MM-yy"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid variations of MMM/yyyy / yyyy/MMM / yyyy/MM / yy/MM"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"05/2020\")); // wrong format: MM/yyyy"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"05/20\")); // wrong format: MM/yy"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"May2020\")); // Missing / between month and year"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"202005\")); // Missing / between year and month"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void constructYearMonth() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM-uuuu\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        String stringRep \u003d formatter.format(YearMonth.now());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        YearMonth fromFormat \u003d YearMonth.parse(stringRep, formatter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void isValidYearMonth_validYearMonth_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // valid DateTime formats"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidYearMonth(\"May-2020\")); // MMM-yyyy"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidYearMonth(\"2020/May\")); // yyyy/MMM"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidYearMonth(\"May/2020\")); // MMM/yyyy"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidYearMonth(\"2020/05\")); // yyyy/MM"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidYearMonth(\"20-05\")); // yy/MM"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 90
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "Clouddoggo": 2,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/DeleteReminderCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.logic.commands.DeleteReminderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class DeleteReminderCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private DeleteReminderCommandParser parser \u003d new DeleteReminderCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void parse_validArgs_returnDeleteReminderCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteReminderCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 26
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/DoneCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * outside of the DoneCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * same path through the DoneCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void parse_validArgs_returnsDoneCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DoneCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "eedenong": 31
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DATETIME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.MODULE_CODE_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.TAG_DESC_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_ASSIGNMENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_TUTORIAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.EditCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_TUTORIAL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DESCRIPTION_DESC_TUTORIAL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, \"0\" + DESCRIPTION_DESC_TUTORIAL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid desc"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // invalid datetime"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertParseFailure(parser, 1 + INVALID_DATETIME_DESC, DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_CODE_DESC, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"1\" + TAG_DESC_GRADED + TAG_DESC_PROJECT + TAG_EMPTY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"1\" + TAG_DESC_GRADED + TAG_EMPTY + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"1\" + TAG_EMPTY + TAG_DESC_GRADED + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"1\" + INVALID_DESCRIPTION_DESC + INVALID_MODULE_CODE_DESC + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Description.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            targetIndex.getOneBased() + TAG_DESC_PROJECT + MODULE_CODE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_TUTORIAL)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withTags(VALID_TAG_GRADED, VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_TUTORIAL).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // method should only test fields corresponding to isSameTask"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // module code"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_TUTORIAL).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // datetime"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATETIME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDateTime(VALID_DATETIME_TUTORIAL).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            targetIndex.getOneBased() + MODULE_CODE_DESC_TUTORIAL + TAG_DESC_GRADED"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + MODULE_CODE_DESC_TUTORIAL + TAG_DESC_GRADED"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + MODULE_CODE_DESC_ASSIGNMENT + TAG_DESC_PROJECT;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                            .withModuleCode(VALID_MODULE_CODE_ASSIGNMENT)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                            .withTags(VALID_TAG_PROJECT, VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                            .build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \"\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 97,
      "Clouddoggo": 15,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"     \","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 17,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/JelphaBotParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class JelphaBotParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final JelphaBotParser parser \u003d new JelphaBotParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test // test against a task with Status \u003d INCOMPLETE as that is the default value upon task creation."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        FindCommand command \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + String.join(\" \", keywords));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new FindCommand(new DescriptionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            -\u003e parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void parseCommand_done() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DoneCommand command \u003d (DoneCommand) parser.parseCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            DoneCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DoneCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                -\u003e parser.parseCommand(\"\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                -\u003e parser.parseCommand(\"unknownCommand\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 61,
      "yapdianhao": 1,
      "Clouddoggo": 3,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"@ssignment !\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \"ASFE1000R\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String INVALID_DATETIME \u003d \"03/10/-2020 33 79\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#graded\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Assignment 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d \"AS1000\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String VALID_DATETIME \u003d \"Mar-20-2020 11 50\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"graded\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"project\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // description tests"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(nameWithWhitespace));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // module code tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseModuleCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleCode(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseModuleCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleCode(INVALID_MODULE_CODE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseModuleCode_validValueWithoutWhitespace_returnsModuleCode() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ModuleCode expectedAddress \u003d new ModuleCode(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseModuleCode(VALID_MODULE_CODE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseModuleCode_validValueWithWhitespace_returnsTrimmedModuleCode() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String moduleCodeWithWhiteSpace \u003d WHITESPACE + VALID_MODULE_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ModuleCode expectedAddress \u003d new ModuleCode(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseModuleCode(moduleCodeWithWhiteSpace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // datetime tests"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseDateTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseDateTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATETIME));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseDateTime_validValueWithoutWhitespace_returnsDateTime() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DateTime expectedAddress \u003d new DateTime(VALID_DATETIME);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseDateTime(VALID_DATETIME));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseDateTime_validValueWithWhitespace_returnsTrimmedDateTime() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String dateTimeWithWhiteSpace \u003d WHITESPACE + VALID_DATETIME + WHITESPACE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DateTime expectedAddress \u003d new DateTime(VALID_DATETIME);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseDateTime(dateTimeWithWhiteSpace));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // tag tests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 18,
      "Clouddoggo": 67,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/ReminderCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 5
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/JelphaBotTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSESSMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class JelphaBotTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private final JelphaBot jelphaBot \u003d new JelphaBot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertEquals(Collections.emptyList(), jelphaBot.getTaskList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e jelphaBot.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void resetData_withValidReadOnlyJelphaBot_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBot newData \u003d getTypicalJelphaBot();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        jelphaBot.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertEquals(newData, jelphaBot);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ASSESSMENT).withTags(VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(ASSESSMENT, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBotStub newData \u003d new JelphaBotStub(newTasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e jelphaBot.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e jelphaBot.hasTask(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void hasTask_taskNotInJelphaBot_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertFalse(jelphaBot.hasTask(ASSESSMENT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void hasTask_tasknJelphaBot_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        jelphaBot.addTask(ASSESSMENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertTrue(jelphaBot.hasTask(ASSESSMENT));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInJelphaBot_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        jelphaBot.addTask(ASSESSMENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ASSESSMENT).withTags(VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertTrue(jelphaBot.hasTask(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e jelphaBot.getTaskList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * A stub ReadOnlyJelphaBot whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static class JelphaBotStub implements ReadOnlyJelphaBot {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        private final ObservableList\u003cReminder\u003e reminders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBotStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return reminders;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            this.reminders.setAll(reminders);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 26,
      "yapdianhao": 35,
      "Clouddoggo": 7,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSESSMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.BOOK_REPORT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.JelphaBotBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new JelphaBot(), new JelphaBot(modelManager.getJelphaBot()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        userPrefs.setJelphaBotFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        userPrefs.setJelphaBotFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setJelphaBotFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setJelphaBotFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setJelphaBotFilePath_validPath_setsJelphaBotFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        modelManager.setJelphaBotFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(path, modelManager.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void hasTask_taskNotInJelphaBot_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(modelManager.hasTask(ASSESSMENT));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void hasTask_taskInJelphaBot_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        modelManager.addTask(ASSESSMENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(modelManager.hasTask(ASSESSMENT));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void getFilteredCalendarTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCalendarTaskList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBot addressBook \u003d new JelphaBotBuilder().withTask(ASSESSMENT).withTask(BOOK_REPORT).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBot differentJelphaBot \u003d new JelphaBot();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(modelManager, modelManagerCopy);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(null, modelManager);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(5, modelManager);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(differentJelphaBot, userPrefs));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String[] keywords \u003d ASSESSMENT.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        modelManager.updateFilteredTaskList(new DescriptionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(addressBook, userPrefs));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        differentUserPrefs.setJelphaBotFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(addressBook, differentUserPrefs));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 42,
      "Clouddoggo": 7,
      "eedenong": 5,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setJelphaBotFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setJelphaBotFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/reminder/ReminderDayTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderDayTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void isValidReminderDay() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // invalid ReminderDay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertFalse(ReminderDay.isValidReminderDay(-1)); // negative days"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertFalse(ReminderDay.isValidReminderDay(8)); // too far a reminder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // valid ReminderDay"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertTrue(ReminderDay.isValidReminderDay(1)); // valid day"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 20
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/reminder/ReminderHourTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderHourTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void isValidReminderDay() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // invalid ReminderDay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertFalse(ReminderHour.isValidReminderHour(-1)); // negative hours"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertFalse(ReminderHour.isValidReminderHour(30)); // 1 day 6 hours"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // valid ReminderDay"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertTrue(ReminderHour.isValidReminderHour(1)); // valid hours"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 20
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/reminder/ReminderTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_ASSESSMENT_REMINDER_DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_ASSESSMENT_REMINDER_HOUR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_ASSIGNMENT_REMINDER_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_BOOK_REPORT_REMINDER_DAY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_BOOK_REPORT_REMINDER_HOUR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_BOOK_REPORT_REMINDER_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalReminders.ASSESSMENT_REMINDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalReminders.BOOK_REPORT_REMINDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void isSameReminder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertTrue(ASSESSMENT_REMINDER.isSameReminder(ASSESSMENT_REMINDER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertFalse(ASSESSMENT_REMINDER.isSameReminder(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // different reminder day -\u003e returns False"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Reminder editedAssessmentReminder \u003d new ReminderBuilder(ASSESSMENT_REMINDER)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                .withReminderDay(VALID_BOOK_REPORT_REMINDER_DAY)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertFalse(ASSESSMENT_REMINDER.isSameReminder(editedAssessmentReminder));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // different reminder hour  -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        editedAssessmentReminder \u003d new ReminderBuilder(ASSESSMENT_REMINDER)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                       .withReminderHour(VALID_BOOK_REPORT_REMINDER_HOUR).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertFalse(ASSESSMENT_REMINDER.isSameReminder(editedAssessmentReminder));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        editedAssessmentReminder \u003d new ReminderBuilder(ASSESSMENT_REMINDER)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                       .withIndex(VALID_BOOK_REPORT_REMINDER_INDEX).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertFalse(ASSESSMENT_REMINDER.isSameReminder(editedAssessmentReminder));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Reminder assessmentReminderCopy \u003d new ReminderBuilder(ASSESSMENT_REMINDER).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertEquals(ASSESSMENT_REMINDER, assessmentReminderCopy);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertEquals(ASSESSMENT_REMINDER, ASSESSMENT_REMINDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertNotEquals(null, ASSESSMENT_REMINDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertNotEquals(5, ASSESSMENT_REMINDER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // different reminder -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertNotEquals(ASSESSMENT_REMINDER, BOOK_REPORT_REMINDER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // different reminder day -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Reminder editedAssessmentReminder \u003d new ReminderBuilder(ASSESSMENT_REMINDER)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                .withReminderDay(VALID_BOOK_REPORT_REMINDER_DAY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //assertNotEquals(ASSESSMENT_REMINDER, editedAssessmentReminder);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        // different reminder hour  -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Reminder editedBookReminder \u003d new ReminderBuilder(BOOK_REPORT_REMINDER)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                          .withReminderHour(VALID_ASSESSMENT_REMINDER_HOUR)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                          .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //assertNotEquals(BOOK_REPORT_REMINDER, editedBookReminder);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        editedBookReminder \u003d new ReminderBuilder(BOOK_REPORT_REMINDER)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                 .withIndex(VALID_ASSIGNMENT_REMINDER_INDEX)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                 .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertNotEquals(BOOK_REPORT_REMINDER, editedBookReminder);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        editedBookReminder \u003d new ReminderBuilder(BOOK_REPORT_REMINDER)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                 .withReminderDay(VALID_ASSESSMENT_REMINDER_DAY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                 .withReminderHour(VALID_ASSESSMENT_REMINDER_HOUR)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                 .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //assertNotEquals(BOOK_REPORT_REMINDER, editedBookReminder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 88
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/summary/SummaryListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void addsummary_nullargument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SummaryList().addSummary(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setsummary_nullargument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SummaryList().setSummary(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 17
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String invalidDateTime \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDateTime));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void isValidDateTime_invalidDateTime_returnsFalse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // null datetime"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // invalid DateTime"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"Jan-1-2020\")); // date with no time"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"11 11\")); // time with no date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // invalid variations of MMM-d-yyyy HH mm / d-MMM-yyyy"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020-1-May 22 00\")); // wrong format: yyyy-d-MM HH mm"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"05-1-2020 22 00\")); // wrong format: MM-d-yyyy HH mm"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // invalid variations of MMM/d/yyyy HH mm / d/M/y"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"May1/2020 22 00\")); // Missing / between month and day"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"1May/2020 22 00\")); // Missing / between month and day"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"May/12020 22 00\")); // Missing / between month and year"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"1/May2020 22 00\")); // Missing / between month and year"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"May12020 22 00\")); // Missing / between month, day and year"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"1May2020 22 00\")); // Missing / between month, day and year"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        //invalid variations of d MMM yyyy HH mm"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"May 2 2020 22 00\")); // wrong format: MMM d yyyy HH mm"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020 2 May 22 00\")); // wrong format: yyy d MMM"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2 05 2020 22 00\")); // wrong format: d MM yyyy"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void construct() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTime.STANDARD_FORMATTER;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String stringRep \u003d formatter.format(LocalDateTime.now());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDateTime fromFormat \u003d LocalDateTime.parse(stringRep, formatter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void isValidDateTime_validDateTime_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // valid DateTime formats"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"May-1-2020 11 11\")); // MMM-d-yyyy HH mm"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"1-May-2020 11 11\")); // d-MMM-yyyy HH mm"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"May/1/2020 22 00\")); // MMM/d/yyyy HH mm"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"1/1/2020 12 00\")); // d/M/y HH mm"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"2 May 2020 20 20\")); // d MMM yyyy HH mm"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void constructor_validDateTime_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"May-1-2020 11 11\"), new DateTime(\"May-1-2020 11 11\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1-May-2020 00 00\"), new DateTime(\"May-1-2020 00 00\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"May/1/2020 22 00\"), new DateTime(\"May-1-2020 22 00\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1/5/2020 12 00\"), new DateTime(\"May-1-2020 12 00\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1 May 2020 23 59\"), new DateTime(\"May-1-2020 23 59\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void getValue_returnsCorrectDisplayString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"May-1-2020 11 11\").getDisplayValue(), \"1-May-2020 11 11\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1-May-2020 00 00\").getDisplayValue(), \"1-May-2020 00 00\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"May/1/2020 22 00\").getDisplayValue(), \"1-May-2020 22 00\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1/5/2020 12 00\").getDisplayValue(), \"1-May-2020 12 00\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1 May 2020 23 59\").getDisplayValue(), \"1-May-2020 23 59\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 35,
      "Clouddoggo": 28,
      "eedenong": 26
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/DescriptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Description.isValidDescription(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long descriptions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 24,
      "Clouddoggo": 16
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/ModuleCodeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // null module code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // invalid module codes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"CS\")); // No numbers only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"2101S\")); // No Faculty code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"A2101\")); // Invalid Faculty code"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // valid module codes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2101\")); // No ending tag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103T\")); // yes module tag"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"ACC1301\")); // module code has max 3 chars"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 36,
      "Clouddoggo": 3
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/PriorityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class PriorityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    void isValidPriority() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // null priority"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"^\")); // non-alphanumeric characters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"high*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // valid priority"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"0\")); // number between -1 and 1 inclusive"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"-1\")); // number between -1 and 1 inclusive"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"HIGH\")); // priority in string representation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"LOW\")); // priority in string representation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 29
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_STATUS_ASSIGNMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_STATUS_TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSIGNMENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e task.getTags().remove(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(ASSIGNMENT.isSameTask(ASSIGNMENT));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTask(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTask(editedAssignment));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different dateTime  -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withDateTime(VALID_DATETIME_TUTORIAL).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTask(editedAssignment));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder().withModuleCode(VALID_MODULE_CODE_TUTORIAL).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTask(editedAssignment));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // same description, same datetime, same module code, different tag -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withPriority(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                               .withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(ASSIGNMENT.isSameTask(editedAssignment));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // same description, same datetime, same module code, different tag -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withStatus(VALID_STATUS_ASSIGNMENT)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                               .withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(ASSIGNMENT.isSameTask(editedAssignment));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task assignmentCopy \u003d new TaskBuilder(ASSIGNMENT).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(ASSIGNMENT, assignmentCopy);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(ASSIGNMENT, ASSIGNMENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(null, ASSIGNMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(5, ASSIGNMENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, TUTORIAL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different dateTime  -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withDateTime(VALID_DATETIME_TUTORIAL).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withModuleCode(VALID_MODULE_CODE_TUTORIAL).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withPriority(VALID_PRIORITY_TUTORIAL).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different status -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withStatus(VALID_STATUS_TUTORIAL).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 57,
      "yapdianhao": 2,
      "Clouddoggo": 10,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/UniqueTaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSESSMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSIGNMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(uniqueTaskList.contains(ASSESSMENT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(uniqueTaskList.contains(ASSESSMENT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ASSESSMENT).withTags(VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                               .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(ASSESSMENT));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, ASSESSMENT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(ASSESSMENT, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(ASSESSMENT, ASSESSMENT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.setTask(ASSESSMENT, ASSESSMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedUniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ASSESSMENT).withTags(VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                               .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.setTask(ASSESSMENT, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedUniqueTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.setTask(ASSESSMENT, TUTORIAL);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedUniqueTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask(ASSESSMENT, TUTORIAL));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(ASSESSMENT));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.remove(ASSESSMENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedUniqueTaskList.add(ASSIGNMENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Arrays.asList(TUTORIAL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedUniqueTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(ASSESSMENT, ASSESSMENT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()-\u003e uniqueTaskList"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 91,
      "yapdianhao": 1,
      "Clouddoggo": 5,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(firstPredicate, firstPredicateCopy);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(1, firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // Keywords match datetime and module code, but does not match description"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"ALI1234\", \"1-May-2020\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDescription(\"Alice\").withModuleCode(\"ALI1234\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                       .build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 40,
      "Clouddoggo": 2,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskCompletedWithinDayPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TaskCompletedWithinDayPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final TaskCompletedWithinDayPredicate testPred \u003d new TaskCompletedWithinDayPredicate("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        new DateTime(\"Apr-30-2020 23 59\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void test_taskDoneSameDayDifferentTime_returnsTrue() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"Apr-30-2020 00 01\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        task.setDoneTime(new DateTime(\"Apr-30-2020 12 00\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(testPred.test(task));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void test_taskDoneDifferentDay_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"Apr-30-2020 00 01\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        task.setDoneTime(new DateTime(\"May-10-2020 00 01\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(testPred.test(task));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 29
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskDueAfterDatePredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class TaskDueAfterDatePredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void and() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate condition1 \u003d new TaskDueAfterDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate condition2 \u003d new TaskDueAfterDatePredicate(new DateTime(\"May-2-2020 00 01\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Predicate\u003cTask\u003e predicate \u003d condition1.and(condition2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskAfterDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(taskAfterDate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskDateAfterDate_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate predicate \u003d new TaskDueAfterDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskAfterDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(taskAfterDate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskDateBeforeDate_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate predicate \u003d new TaskDueAfterDatePredicate(new DateTime(\"May-2-2020 00 01\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskAfterDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(taskAfterDate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate predicate1 \u003d new TaskDueAfterDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate predicate2 \u003d new TaskDueAfterDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate predicate3 \u003d new TaskDueAfterDatePredicate(new DateTime(\"May-01-2020 00 01\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(predicate2, predicate3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 52
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskDueBeforeDatePredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class TaskDueBeforeDatePredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void and() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate condition1 \u003d new TaskDueBeforeDatePredicate(new DateTime(\"May-30-2020 00 01\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate condition2 \u003d new TaskDueBeforeDatePredicate(new DateTime(\"May-2-2020 00 01\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Predicate\u003cTask\u003e predicate \u003d condition1.and(condition2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskBeforeDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(taskBeforeDate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskDateAfterDate_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate predicate \u003d new TaskDueBeforeDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskBeforeDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(taskBeforeDate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskDateBeforeDate_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate predicate \u003d new TaskDueBeforeDatePredicate(new DateTime(\"May-2-2020 00 01\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskBeforeDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(taskBeforeDate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate predicate1 \u003d new TaskDueBeforeDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate predicate2 \u003d new TaskDueBeforeDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate predicate3 \u003d new TaskDueBeforeDatePredicate(new DateTime(\"May-01-2020 00 01\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(predicate2, predicate3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 52
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskDueWithinDayAndIncompletePredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "class TaskDueWithinDayAndIncompletePredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void test_taskSameDateDifferentTime_returnsTrue() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DateTime dt \u003d new DateTime(\"Jun-01-2020 00 01\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskDueWithinDayAndIncompletePredicate predicate \u003d new TaskDueWithinDayAndIncompletePredicate(dt);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"Jun-01-2020 22 02\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(predicate.test(task));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void test_taskDateDifferent_returnsFalse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DateTime dt \u003d new DateTime(\"May-2-2020 00 01\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskDueWithinDayAndIncompletePredicate pred \u003d new TaskDueWithinDayAndIncompletePredicate(dt);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(pred.test(task));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void test_taskDateSameStatusComplete_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DateTime dt \u003d new DateTime(\"Jan-01-2020 00 22\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskDueWithinDayAndIncompletePredicate pred \u003d new TaskDueWithinDayAndIncompletePredicate(dt);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"Jan-01-2020 00 22\").withStatus(\"COMPLETE\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(pred.test(task));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 37
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskDueWithinDayPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class TaskDueWithinDayPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskSameDateDifferentTime_returnsTrue() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueWithinDayPredicate predicate \u003d new TaskDueWithinDayPredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"Apr-30-2020 00 02\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(task));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskDateDifferent_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueWithinDayPredicate predicate \u003d new TaskDueWithinDayPredicate(new DateTime(\"May-2-2020 00 01\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(task));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueWithinDayPredicate predicate1 \u003d new TaskDueWithinDayPredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueWithinDayPredicate predicate2 \u003d new TaskDueWithinDayPredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueWithinDayPredicate predicate3 \u003d new TaskDueWithinDayPredicate(new DateTime(\"May-01-2020 00 01\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(predicate2, predicate3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 41
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskIsCompletedPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskIsCompletedPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskIsCompletedPredicate predicate \u003d new TaskIsCompletedPredicate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // same object returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertEquals(predicate, predicate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // different types returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertNotEquals(1, predicate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // null returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertNotEquals(null, predicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void test_taskStatusEqual_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // true if the status of the Task is set to COMPLETED"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskIsCompletedPredicate predicate \u003d new TaskIsCompletedPredicate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task completedTask \u003d new TaskBuilder().withStatus(\"COMPLETE\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(predicate.test(completedTask));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "eedenong": 30
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskIsIncompletePredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskIsIncompletePredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskIsIncompletePredicate predicate \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // same object returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertEquals(predicate, predicate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // different types returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertNotEquals(1, predicate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // null returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertNotEquals(null, predicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void test_taskStatusEqual_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // true if the status of the Task is set to INCOMPLETE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskIsIncompletePredicate predicate \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task incompleteTask \u003d new TaskBuilder().withStatus(\"INCOMPLETE\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(predicate.test(incompleteTask));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "eedenong": 30
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/storage/JsonAdaptedReminderTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 2
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/storage/JsonAdaptedTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.BOOK_REPORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// TODO: add test for invalid priority"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// no test for status and TimeSpent needed because they are not user-dependent"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"∫3L L1M\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // private static final String INVALID_PRIORITY \u003d \"INVALID\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \"2103T\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#rabbit!!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String INVALID_DATETIME \u003d \"03-19/1999 00:00\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BOOK_REPORT.getDescription().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d BOOK_REPORT.getModuleCode().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String VALID_DATETIME \u003d BOOK_REPORT.getDateTime().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Priority VALID_PRIORITY \u003d BOOK_REPORT.getPriority();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Status VALID_STATUS \u003d BOOK_REPORT.getStatus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BOOK_REPORT.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                                                               .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                                                               .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final TimeSpent VALID_TIME_SPENT \u003d new TimeSpent(Duration.ofHours(2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(BOOK_REPORT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(BOOK_REPORT, task.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new JsonAdaptedTask(INVALID_DESCRIPTION, VALID_STATUS, VALID_DATETIME, VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                VALID_PRIORITY, VALID_TAGS, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_STATUS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_DATETIME,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_PRIORITY,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            VALID_TAGS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            VALID_TIME_SPENT"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void toModelType_invalidModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new JsonAdaptedTask(VALID_DESCRIPTION, VALID_STATUS, VALID_DATETIME, INVALID_MODULE_CODE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                VALID_TAGS, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String expectedMessage \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void toModelType_nullModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                VALID_STATUS,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                VALID_DATETIME,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                VALID_PRIORITY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                VALID_TAGS, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void toModelType_invalidDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new JsonAdaptedTask(VALID_DESCRIPTION, VALID_STATUS, INVALID_DATETIME, VALID_MODULE_CODE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                VALID_TAGS, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void toModelType_nullDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_STATUS,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_PRIORITY,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            VALID_TAGS, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    //     JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    //         new JsonAdaptedTask(VALID_DESCRIPTION, VALID_STATUS, VALID_DATETIME, VALID_MODULE_CODE, INVALID_PRIORITY,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    //             VALID_TAGS, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    //         );"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    //     String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    //     assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new JsonAdaptedTask(VALID_DESCRIPTION, VALID_STATUS, VALID_DATETIME, VALID_MODULE_CODE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                invalidTags, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            );"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 52,
      "yapdianhao": 34,
      "Clouddoggo": 45,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/storage/JsonJelphaBotStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSESSMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class JsonJelphaBotStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonJelphaBotStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void readJelphaBot_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readJelphaBot(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private java.util.Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new JsonJelphaBotStorage(Paths.get(filePath), testFolder.resolve(\"reminder.json\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                   .readJelphaBot(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(readJelphaBot(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readJelphaBot(\"notJsonFormatJelphaBot.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void readJelphaBot_invalidTaskJelphaBot_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readJelphaBot(\"invalidTaskJelphaBot.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void readJelphaBot_invalidAndValidTaskJelphaBot_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readJelphaBot(\"invalidAndValidTaskJelphaBot.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void readAndSaveJelphaBot_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempJelphaBot.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Path reminderPath \u003d testFolder.resolve(\"TempReminder.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBot original \u003d getTypicalJelphaBot();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        JsonJelphaBotStorage jsonJelphaBotStorage \u003d new JsonJelphaBotStorage(filePath, reminderPath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        jsonJelphaBotStorage.saveJelphaBot(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ReadOnlyJelphaBot readBack \u003d jsonJelphaBotStorage.readJelphaBot(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(original, new JelphaBot(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        original.addTask(TUTORIAL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        original.removeTask(ASSESSMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        jsonJelphaBotStorage.saveJelphaBot(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        readBack \u003d jsonJelphaBotStorage.readJelphaBot(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(original, new JelphaBot(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        original.addTask(ASSESSMENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        jsonJelphaBotStorage.saveJelphaBot(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        readBack \u003d jsonJelphaBotStorage.readJelphaBot().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(original, new JelphaBot(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void saveJelphaBot_nullJelphaBot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveJelphaBot(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void saveJelphaBot(ReadOnlyJelphaBot addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            new JsonJelphaBotStorage(Paths.get(filePath), testFolder.resolve(\"reminder.json\"))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    .saveJelphaBot(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void saveJelphaBot_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveJelphaBot(new JelphaBot(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 47,
      "yapdianhao": 5,
      "Clouddoggo": 3,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/storage/JsonSerializableJelphaBotTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class JsonSerializableJelphaBotTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableJelphaBotTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksJelphaBot.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskJelphaBot.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskJelphaBot.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonSerializableJelphaBot dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                JsonSerializableJelphaBot.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBot addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JelphaBot typicalTasksJelphaBot \u003d TypicalTasks.getTypicalJelphaBot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(addressBookFromFile, typicalTasksJelphaBot);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonSerializableJelphaBot dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                JsonSerializableJelphaBot.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonSerializableJelphaBot dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                JsonSerializableJelphaBot.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableJelphaBot.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 21,
      "Clouddoggo": 10,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        userPrefs.setJelphaBotFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        JsonJelphaBotStorage jelphaBotStorage \u003d new JsonJelphaBotStorage("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            getTempFilePath(\"ab\"), getTempFilePath(\"reminder\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        storageManager \u003d new StorageManager(jelphaBotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "         * {@link JsonJelphaBotStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonJelphaBotStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBot original \u003d getTypicalJelphaBot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        storageManager.saveJelphaBot(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ReadOnlyJelphaBot retrieved \u003d storageManager.readJelphaBot().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(original, new JelphaBot(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotNull(storageManager.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 13,
      "yapdianhao": 3,
      "Clouddoggo": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/EditTaskDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private EditCommand.EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setDescription(task.getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setDateTime(task.getDateTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setModuleCode(task.getModuleCode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setPriority(task.getPriority());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditTaskDescriptorBuilder withDescription(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setDescription(new Description(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code DateTime} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditTaskDescriptorBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setDateTime(new DateTime(dateTime));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditTaskDescriptorBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setModuleCode(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditTaskDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setPriority(Priority.toPriority(priority));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 52,
      "yapdianhao": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/JelphaBotBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *     {@code JelphaBot ab \u003d new JelphaBotBuilder().withTask(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class JelphaBotBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private JelphaBot jelphaBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JelphaBotBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        jelphaBot \u003d new JelphaBot();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JelphaBotBuilder(JelphaBot jelphaBot) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.jelphaBot \u003d jelphaBot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Adds a new {@code Task} to the {@code JelphaBot} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JelphaBotBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        jelphaBot.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JelphaBot build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return jelphaBot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 14,
      "Clouddoggo": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/ReminderBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderDay;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderHour;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A utility class to help build Reminder objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class ReminderBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final int DEFAULT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final int DEFAULT_REMINDERDAY \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final int DEFAULT_REMINDERHOUR \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private ReminderDay reminderDay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private ReminderHour reminderHour;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        index \u003d Index.fromOneBased(DEFAULT_INDEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminderDay \u003d new ReminderDay(DEFAULT_REMINDERDAY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminderHour \u003d new ReminderHour(DEFAULT_REMINDERHOUR);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Initializes the ReminderBuilder with the data of {@code reminderToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param toCopy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderBuilder(Reminder reminderToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        index \u003d reminderToCopy.getIndex();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminderDay \u003d reminderToCopy.getDaysToRemind();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        reminderHour \u003d reminderToCopy.getHoursToRemind();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Sets the {@code Index} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderBuilder withIndex(String index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.index \u003d Index.fromZeroBased(Integer.parseInt(index));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Sets the {@code ReminderDay} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderBuilder withReminderDay(String reminderDay) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminderDay \u003d new ReminderDay(Integer.parseInt(reminderDay));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Sets the {@code ReminderHour} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public ReminderBuilder withReminderHour(String reminderHour) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.reminderHour \u003d new ReminderHour(Integer.parseInt(reminderHour));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Reminder build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new Reminder(index, reminderDay, reminderHour);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 64
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/TaskBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Default Task 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DEFAULT_STATUS \u003d \"INCOMPLETE\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"May-1-2020 00 01\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"TES1000\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final Duration DEFAULT_TIME_SPENT \u003d Duration.ZERO;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private TimeSpent timeSpent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        status \u003d Status.toStatus(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleCode \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        priority \u003d Priority.toPriority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        timeSpent \u003d new TimeSpent(DEFAULT_TIME_SPENT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        status \u003d taskToCopy.getStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dateTime \u003d taskToCopy.getDateTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleCode \u003d taskToCopy.getModuleCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        priority \u003d taskToCopy.getPriority();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        timeSpent \u003d taskToCopy.getTimeSpent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskBuilder withDescription(String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.description \u003d new Description(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code Status} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.status \u003d Status.toStatus(status);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.dateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code Priority} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.priority \u003d Priority.toPriority(priority);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * {@code Task} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new Task(description, status, dateTime, moduleCode, priority, tags, timeSpent);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 73,
      "yapdianhao": 2,
      "Clouddoggo": 7,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/TaskUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an add command string for adding the {@code task}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Does not include status as status cannot be set from a command string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION).append(task.getDescription().fullDescription).append(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        sb.append(PREFIX_DATETIME).append(task.getDateTime().toString()).append(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        sb.append(PREFIX_MODULE_CODE).append(task.getModuleCode().value).append(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        sb.append(PREFIX_PRIORITY).append(task.getPriority().toString()).append(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        task.getTags().forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.getDescription()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .ifPresent(name -\u003e sb.append(PREFIX_DESCRIPTION).append(name.toString()).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.getDateTime()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .ifPresent(dateTime -\u003e sb.append(PREFIX_DATETIME).append(dateTime.toString()).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.getModuleCode()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .ifPresent(moduleCode -\u003e sb.append(PREFIX_MODULE_CODE).append(moduleCode.toString()).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.getPriority()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .ifPresent(priority -\u003e sb.append(PREFIX_PRIORITY).append(priority.toString()).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 32,
      "yapdianhao": 1,
      "Clouddoggo": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * path. Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the middle index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the last index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the task in the {@code model}\u0027s task list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "Clouddoggo": 9,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/TypicalReminders.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A utility class containing a list of {@code Reminder} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class TypicalReminders {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final Reminder ASSESSMENT_REMINDER \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        new ReminderBuilder().withIndex(\"0\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            .withReminderDay(\"1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            .withReminderHour(\"1\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final Reminder BOOK_REPORT_REMINDER \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        new ReminderBuilder().withIndex(\"1\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            .withReminderDay(\"2\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            .withReminderHour(\"2\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static final Reminder ASSIGNMENT_REMINDER \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        new ReminderBuilder().withIndex(\"2\").withReminderDay(\"3\").withReminderHour(\"3\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private TypicalReminders() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Returns an {@code JelphaBot} with all the typical tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static JelphaBot getTypicalJelphaBot() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        JelphaBot ab \u003d new JelphaBot();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Reminder reminder: getTypicalReminders()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            ab.addReminder(reminder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static List\u003cReminder\u003e getTypicalReminders() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ASSESSMENT_REMINDER));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 46
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/TypicalTasks.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_ASSIGNMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_ASSIGNMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_PRIORITY_ASSIGNMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_STATUS_ASSIGNMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task ASSESSMENT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        new TaskBuilder().withDescription(\"Online Midterm Assessment\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .withModuleCode(\"MA1101R\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .withPriority(\"HIGH\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .withTags(\"school\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task BOOK_REPORT \u003d new TaskBuilder().withDescription(\"Book Report 1\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                               .withStatus(\"COMPLETE\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                               .withModuleCode(\"GES1028\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                               .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                               .withTags(\"project\", \"school\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task CLASS \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                         .withDescription(\"Yoga class\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                         .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                         .withModuleCode(\"YG1011\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task DATE \u003d new TaskBuilder().withDescription(\"Daniel Meier\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                        .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                        .withModuleCode(\"DT1101\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task ERRAND \u003d new TaskBuilder().withDescription(\"Milk errand\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                          .withModuleCode(\"MYB1101\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                          .withDateTime(\"Feb-1-2020 11 00\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task FINALS \u003d new TaskBuilder().withDescription(\"Open book finals\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                          .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                          .withModuleCode(\"CS3230\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                          .withTags(\"school\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task GROUP_WORK \u003d new TaskBuilder().withDescription(\"Group project meeting\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withModuleCode(\"CS2103T\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withTags(\"project\", \"school\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task ASSIGNMENT \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withDescription(VALID_DESCRIPTION_ASSIGNMENT)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withStatus(VALID_STATUS_ASSIGNMENT)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withDateTime(VALID_DATETIME_ASSIGNMENT)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withModuleCode(VALID_MODULE_CODE_ASSIGNMENT)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withPriority(VALID_PRIORITY_ASSIGNMENT)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task TUTORIAL \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                            .withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                            .withDateTime(VALID_DATETIME_TUTORIAL)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                            .withModuleCode(VALID_MODULE_CODE_TUTORIAL)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                            .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private TypicalTasks() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an {@code JelphaBot} with all the typical tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static JelphaBot getTypicalJelphaBot() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBot ab \u003d new JelphaBot();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Reminder reminder : TypicalReminders.getTypicalReminders()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            ab.addReminder(reminder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ASSESSMENT, BOOK_REPORT, CLASS, DATE, ERRAND, FINALS, GROUP_WORK));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 58,
      "yapdianhao": 4,
      "Clouddoggo": 9,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link this.VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "-": 110
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import seedu.jelphabot.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import seedu.jelphabot.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"seedu.jelphabot.ui.TestFxmlObject\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 4
    }
  }
]
