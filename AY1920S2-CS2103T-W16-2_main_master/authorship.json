[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    id \"com.star-zero.gradle.githook\" version \"1.2.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "mainClassName \u003d \u0027seedu.zerotoone.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "githook {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    gradleCommand \u003d file(\"./gradlew\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    hooksDir \u003d file(\".git/hooks\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    failOnMissingHooksDir \u003d false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    createHooksDirIfNotExist \u003d true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    hooks {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \"pre-push\" {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            task \u003d \"checkstyleMain checkstyleTest\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            shell \u003d \"bash config/travis/run-checks.sh\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    archiveName \u003d \u0027exerciselist.jar\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        \u0027site-name\u0027: \u0027ZeroToOne\u0027,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W16-2/main\u0027,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "jiachen247": 16,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.util.SampleExerciseDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.exercise.ExerciseListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.exercise.ExerciseListStorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.storage.schedule.ScheduleListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.storage.schedule.ScheduleListStorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.storage.userprefs.UserPrefsStorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ZeroToOne ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Common"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new UserPrefsStorageManager(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Exercise List"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseListStorage exerciseListStorage \u003d new ExerciseListStorageManager(userPrefs.getExerciseListFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // Schedule"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ScheduleListStorage scheduleListStorage \u003d new ScheduleListStorageManager(userPrefs.getScheduleListFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Common"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                exerciseListStorage,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                scheduleListStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s ZeroToOne storage"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e The data from the sample ZeroToOne storage will"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * be used instead if {@code storage}\u0027s ZeroToOne storage is not found, or an empty ZeroToOne"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * storage will be used instead if errors occur when reading {@code storage}\u0027s ZeroToOne storage."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Optional\u003cReadOnlyExerciseList\u003e exerciseListOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ReadOnlyExerciseList initialExerciseListData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Optional\u003cScheduleList\u003e scheduleListOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ScheduleList initialScheduleListData;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Exercise List"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            exerciseListOptional \u003d storage.readExerciseList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            if (!exerciseListOptional.isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ExerciseList\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            initialExerciseListData \u003d exerciseListOptional.orElseGet(SampleExerciseDataUtil::getSampleExerciseList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ExerciseList\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            initialExerciseListData \u003d new ExerciseList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExerciseList\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            initialExerciseListData \u003d new ExerciseList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // Schedule List"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            scheduleListOptional \u003d storage.readScheduleList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            if (!scheduleListOptional.isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty ScheduleList\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            // STEPH_TODO: implement later"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            // initialScheduleListData \u003d scheduleListOptional.orElseGet(SampleScheduleDataUtil::getSampleScheduleList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            initialScheduleListData \u003d scheduleListOptional.orElseGet(ScheduleList::new);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ScheduleList\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            initialScheduleListData \u003d new ScheduleList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ScheduleList\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            initialScheduleListData \u003d new ScheduleList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return new ModelManager(userPrefs,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                initialExerciseListData,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                initialScheduleListData);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExerciseList\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        logger.info(\"Starting ZeroToOne \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping ZeroToOne ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 46,
      "Guofeng-Tang": 32,
      "jiachen247": 7,
      "-": 132
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private static final String LOG_FILE \u003d \"exerciseList.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "jiachen247": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"The index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduledWorkout;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Common"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Exercise List"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns the ExerciseList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @see seedu.zerotoone.model.Model#getExerciseList()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    ReadOnlyExerciseList getExerciseList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of exercises */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns the user prefs\u0027 exercise list file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    Path getExerciseListFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    ObservableList\u003cScheduledWorkout\u003e getSortedScheduledWorkoutList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 26,
      "Guofeng-Tang": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.ParserManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduledWorkout;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final ParserManager parser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        parser \u003d new ParserManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Command command \u003d parser.parse(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            storage.saveExerciseList(model.getExerciseList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            storage.saveScheduleList(model.getScheduleList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Common"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Exercise List"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ReadOnlyExerciseList getExerciseList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return model.getExerciseList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Path getExerciseListFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return model.getExerciseListFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ObservableList\u003cScheduledWorkout\u003e getSortedScheduledWorkoutList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return model.getSortedScheduledWorkoutList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 30,
      "Guofeng-Tang": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting ZeroToOne as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/StartCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gb3h"
        },
        "content": "package seedu.zerotoone.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gb3h"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gb3h"
        },
        "content": " * Deletes a exercise identified using it\u0027s displayed index from the exercise list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gb3h"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gb3h"
        },
        "content": "public class StartCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: start EXERCISE_ID\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_START_EXERCISE_SUCCESS \u003d \"Started Exercise: %1$s at \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_IN_SESSION \u003d \"There is a workout session already in progress!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    private final Index exerciseId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    private final FormatStyle formatStyle \u003d FormatStyle.MEDIUM;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public StartCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        this.exerciseId \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        if (exerciseId.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gb3h"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        Exercise exerciseToStart \u003d lastShownList.get(exerciseId.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        if (model.isInSession()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gb3h"
        },
        "content": "            throw new CommandException((MESSAGE_IN_SESSION));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        model.startSession(exerciseToStart, currentDateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        String formatted \u003d currentDateTime.format(DateTimeFormatter.ofLocalizedDateTime(this.formatStyle));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        String outputMessage \u003d String.format(MESSAGE_START_EXERCISE_SUCCESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gb3h"
        },
        "content": "                exerciseToStart.getExerciseName().toString()) + formatted;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        return new CommandResult(outputMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gb3h"
        },
        "content": "                || (other instanceof StartCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gb3h"
        },
        "content": "                \u0026\u0026 exerciseId.equals(((StartCommand) other).exerciseId)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gb3h"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gb3h": 63
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/StopCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gb3h"
        },
        "content": "package seedu.zerotoone.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gb3h"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gb3h"
        },
        "content": " * Deletes a exercise identified using it\u0027s displayed index from the exercise list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gb3h"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gb3h"
        },
        "content": "public class StopCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stop\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: stop\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_STOP_SESSION_SUCCESS \u003d \"Successfully completed session\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_NOT_STARTED \u003d \"There is no session in progress!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    private final FormatStyle formatStyle \u003d FormatStyle.MEDIUM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public StopCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        if (!model.isInSession()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gb3h"
        },
        "content": "            throw new CommandException((MESSAGE_NOT_STARTED));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        model.stopSession(currentDateTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        return new CommandResult(MESSAGE_STOP_SESSION_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gb3h"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gb3h": 40
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/exercise/CreateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gb3h"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gb3h"
        },
        "content": " * Adds an exercise to the exercise list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gb3h"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gb3h"
        },
        "content": "public class CreateCommand extends ExerciseCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: exercise create e/\u003cexercise_name\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New exercise added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final ExerciseName exerciseName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final List\u003cExerciseSet\u003e exerciseSets;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gb3h"
        },
        "content": "     * Creates a CreateCommand to add the specified {@code Exercise}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gb3h"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public CreateCommand(ExerciseName exerciseName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(exerciseName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise exercise \u003d new Exercise(this.exerciseName, this.exerciseSets);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (model.hasExercise(exercise)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.addExercise(exercise);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String outputMessage \u003d String.format(MESSAGE_SUCCESS, exercise.getExerciseName().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new CommandResult(outputMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gb3h"
        },
        "content": "                || (other instanceof CreateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 exerciseName.equals(((CreateCommand) other).exerciseName));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gb3h"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 26,
      "gb3h": 31
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/exercise/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gb3h"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gb3h"
        },
        "content": " * Deletes a exercise identified using it\u0027s displayed index from the exercise list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gb3h"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class DeleteCommand extends ExerciseCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: exercise delete EXERCISE_ID\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_DELETE_EXERCISE_SUCCESS \u003d \"Deleted Exercise: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final Index exerciseId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseId \u003d targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (exerciseId.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise exerciseToDelete \u003d lastShownList.get(exerciseId.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String outputMessage \u003d String.format(MESSAGE_DELETE_EXERCISE_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                exerciseToDelete.getExerciseName().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new CommandResult(outputMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gb3h"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 exerciseId.equals(((DeleteCommand) other).exerciseId)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gb3h"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 25,
      "gb3h": 27
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/exercise/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gb3h"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Edits the details of an existing exercise in the exercise list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gb3h"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class EditCommand extends ExerciseCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: exercise edit EXERCISE_ID e/\u003cexercise_name\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Edited exercise: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final Index exerciseId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final ExerciseName exerciseName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param exerciseId of the exercise in the filtered exercise list to edit"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param exerciseName details to edit the exercise with"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gb3h"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public EditCommand(Index exerciseId, ExerciseName exerciseName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(exerciseId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(exerciseName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseId \u003d exerciseId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (exerciseId.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise exerciseToEdit \u003d lastShownList.get(exerciseId.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseName updatedExerciseName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (this.exerciseName !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            updatedExerciseName \u003d new ExerciseName(this.exerciseName.fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            updatedExerciseName \u003d new ExerciseName(exerciseToEdit.getExerciseName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise editedExercise \u003d new Exercise(updatedExerciseName, exerciseToEdit.getExerciseSets());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (model.hasExercise(editedExercise)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.setExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String outputMessage \u003d String.format(MESSAGE_EDIT_EXERCISE_SUCCESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                editedExercise.getExerciseName().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new CommandResult(outputMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gb3h"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } else if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gb3h"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        EditCommand otherCommand \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return exerciseId.equals(otherCommand.exerciseId)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 exerciseName.equals(otherCommand.exerciseName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gb3h"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 48,
      "gb3h": 34
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/exercise/ExerciseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gb3h"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gb3h"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gb3h"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public abstract class ExerciseCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exercise\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gb3h"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 4,
      "gb3h": 6
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/exercise/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.PredicateFilterExerciseName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Finds and lists all exercises in exercise list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class FindCommand extends ExerciseCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: exercise find e/\u003cexercise_name\u003e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_EXERCISES_LISTED_OVERVIEW \u003d \"%1$d exercises listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final ExerciseName exerciseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public FindCommand(ExerciseName exerciseName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(exerciseName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        PredicateFilterExerciseName predicate \u003d new PredicateFilterExerciseName(exerciseName.fullName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String outputMessage \u003d String.format(MESSAGE_EXERCISES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new CommandResult(outputMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 exerciseName.equals(((FindCommand) other).exerciseName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 43
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/exercise/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gb3h"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gb3h"
        },
        "content": " * Lists all exercises in the exercise list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gb3h"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ListCommand extends ExerciseCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all exercises\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gb3h"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 6,
      "gb3h": 17
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/exercise/set/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise.set;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.NumReps;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Weight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Edits the details of an existing exercise in the exercise list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class AddCommand extends SetCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: exercise set add EXERCISE_ID r/\u003cnum_reps\u003e m/\u003cweight\u003e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Added exercise set: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final Index exerciseId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final NumReps numReps;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final Weight weight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param index of the exercise in the filtered exercise list to edit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param exerciseSet details to edit the exercise with"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public AddCommand(Index exerciseId, NumReps numReps, Weight weight) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(exerciseId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(numReps);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseId \u003d exerciseId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.numReps \u003d numReps;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (exerciseId.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise exerciseToEdit \u003d lastShownList.get(exerciseId.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExerciseSet\u003e updatedExerciseSets \u003d new ArrayList\u003c\u003e(exerciseToEdit.getExerciseSets());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseSet exerciseSetToAdd \u003d new ExerciseSet(weight, numReps);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        updatedExerciseSets.add(exerciseSetToAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise editedExercise \u003d new Exercise(exerciseToEdit.getExerciseName(), updatedExerciseSets);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.setExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String outputMessage \u003d String.format(MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new CommandResult(outputMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } else if (!(other instanceof AddCommand)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        AddCommand otherCommand \u003d (AddCommand) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return exerciseId.equals(otherCommand.exerciseId)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 numReps.equals(otherCommand.numReps)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 weight.equals(otherCommand.weight);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 83
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/exercise/set/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise.set;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Deletes a exerciseSet identified using it\u0027s displayed index from the exerciseSet list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class DeleteCommand extends SetCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: exercise set delete EXERCISE_ID SET_ID\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_DELETE_EXERCISE_SET_SUCCESS \u003d \"Deleted Exercise Set: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final Index exerciseId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final Index setId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public DeleteCommand(Index exerciseId, Index setId) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(exerciseId);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(setId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseId \u003d exerciseId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.setId \u003d setId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (exerciseId.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise exerciseToEdit \u003d lastShownList.get(exerciseId.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExerciseSet\u003e updatedExerciseSets \u003d new ArrayList\u003c\u003e(exerciseToEdit.getExerciseSets());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        updatedExerciseSets.remove(setId.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise editedExercise \u003d new Exercise(exerciseToEdit.getExerciseName(), updatedExerciseSets);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.setExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String outputMessage \u003d String.format(MESSAGE_DELETE_EXERCISE_SET_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new CommandResult(outputMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 exerciseId.equals(((DeleteCommand) other).exerciseId) // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 setId.equals(((DeleteCommand) other).setId)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 67
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/exercise/set/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise.set;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.NumReps;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Weight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Edits the details of an existing exercise set in an exercise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class EditCommand extends SetCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: exercise set edit EXERCISE_ID SET_ID r/\u003cnum_reps\u003e m/\u003cweight\u003e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Edited exercise set: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final Index exerciseId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final Index setId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final NumReps numReps;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final Weight weight;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param index of the exercise in the filtered exercise list to edit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param weight details to edit the exercise with"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public EditCommand(Index exerciseId, Index setId, NumReps numReps, Weight weight) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(exerciseId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(setId);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(numReps);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseId \u003d exerciseId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.setId \u003d setId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.numReps \u003d numReps;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (exerciseId.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise exerciseToEdit \u003d lastShownList.get(exerciseId.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExerciseSet\u003e updatedExerciseSets \u003d new ArrayList\u003c\u003e(exerciseToEdit.getExerciseSets());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (setId.getZeroBased() \u003e\u003d updatedExerciseSets.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseSet updatedExerciseSet \u003d new ExerciseSet(weight, numReps);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        updatedExerciseSets.remove(this.setId.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        updatedExerciseSets.add(this.setId.getZeroBased(), updatedExerciseSet);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise editedExercise \u003d new Exercise(exerciseToEdit.getExerciseName(), updatedExerciseSets);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.setExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String outputMessage \u003d String.format(MESSAGE_EDIT_EXERCISE_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                editedExercise.getExerciseName().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new CommandResult(outputMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } else if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        EditCommand otherCommand \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return exerciseId.equals(otherCommand.exerciseId)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 setId.equals(otherCommand.setId)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 numReps.equals(otherCommand.numReps)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 weight.equals(otherCommand.weight);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 92
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/exercise/set/SetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise.set;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public abstract class SetCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 10
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/schedule/CreateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.DateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.OneTimeSchedule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class CreateCommand extends ScheduleCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: schedule create WORKOUT_ID d/\u003cdateTime\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Scheduled workout: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"This schedule already exists\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final Index workoutId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public CreateCommand(Index workoutId, DateTime dateTIme) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(workoutId);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(dateTIme);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.workoutId \u003d workoutId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.dateTime \u003d dateTIme;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList(); // TO_CHANGE_EXERCISE_TO_WORKOUT"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (workoutId.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Exercise workoutToSchedule \u003d lastShownList.get(workoutId.getZeroBased()); // TO_CHANGE_EXERCISE_TO_WORKOUT"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        OneTimeSchedule schedule \u003d new OneTimeSchedule(workoutToSchedule, dateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (model.hasSchedule(schedule)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SCHEDULE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        model.addSchedule(schedule);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // TO_CHANGE_EXERCISE_TO_WORKOUT"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        String outputMessage \u003d String.format(MESSAGE_SUCCESS, workoutToSchedule.getExerciseName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return new CommandResult(outputMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 64
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/schedule/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduledWorkout;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Deletes a scheduled workout identified using it\u0027s displayed index from the scheduled workout list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class DeleteCommand extends ScheduleCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage: schedule delete SCHEDULED_WORKOUT_ID\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String MESSAGE_DELETE_SCHEDULED_WORKOUT_SUCCESS \u003d \"Deleted scheduled workout: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final Index scheduledWorkoutId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.scheduledWorkoutId \u003d targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        List\u003cScheduledWorkout\u003e lastShownList \u003d model.getSortedScheduledWorkoutList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (scheduledWorkoutId.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ScheduledWorkout scheduledWorkoutToDelete \u003d lastShownList.get(scheduledWorkoutId.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        model.deleteScheduledWorkout(scheduledWorkoutToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        String outputMessage \u003d String.format(MESSAGE_DELETE_SCHEDULED_WORKOUT_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                scheduledWorkoutToDelete.getScheduledWorkoutName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return new CommandResult(outputMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u0026\u0026 scheduledWorkoutId.equals(((DeleteCommand) other).scheduledWorkoutId)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 51
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/schedule/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ListCommand extends ScheduleCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all scheduled workouts\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 18
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/commands/schedule/ScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.logic.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public abstract class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 10
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Prefix PREFIX_EXERCISE_NAME \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Prefix PREFIX_WORKOUT_NAME \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Prefix PREFIX_NUM_OF_SETS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Prefix PREFIX_NUM_OF_REPS \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Prefix PREFIX_FREQUENCY \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 11,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/ParserManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.logic.commands.StopCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.ExerciseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.schedule.ScheduleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exercise.ExerciseCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.schedule.ScheduleCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.logic.parser.session.StartCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param input full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Command parse(String input) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        case StartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gb3h"
        },
        "content": "            return new StartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        case StopCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gb3h"
        },
        "content": "            return new StopCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case ExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new ExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 15,
      "gb3h": 7,
      "Guofeng-Tang": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exercise/CreateCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.CliSyntax.PREFIX_EXERCISE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.CreateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Parses input arguments and creates a new CreateCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class CreateCommandParser implements Parser\u003cCreateCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * and returns an CreateCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public CreateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EXERCISE_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!ArgumentTokenizer.arePrefixesPresent(argMultimap, PREFIX_EXERCISE_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseName exerciseName \u003d ExerciseParserUtil.parseExerciseName("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                    argMultimap.getValue(PREFIX_EXERCISE_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new CreateCommand(exerciseName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 36,
      "Guofeng-Tang": 1
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exercise/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Index index \u003d ExerciseParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 31
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exercise/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.CliSyntax.PREFIX_EXERCISE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EXERCISE_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!ArgumentTokenizer.arePrefixesPresent(argMultimap, PREFIX_EXERCISE_NAME)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Index index \u003d ExerciseParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseName exerciseName \u003d ExerciseParserUtil.parseExerciseName("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                argMultimap.getValue(PREFIX_EXERCISE_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new EditCommand(index, exerciseName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 38,
      "Guofeng-Tang": 1
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exercise/ExerciseCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.CreateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.set.SetCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exercise.set.SetCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ExerciseCommandParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param input full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Command parse(String input) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case CreateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new CreateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new SetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 23,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exercise/ExerciseParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.NumReps;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Weight;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ExerciseParserUtil extends ParserUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses a {@code String exerciseName} into a {@code ExerciseName}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the given {@code exerciseName} is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static ExerciseName parseExerciseName(String exerciseName) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(exerciseName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String trimmedExerciseName \u003d exerciseName.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!ExerciseName.isValidExerciseName(trimmedExerciseName)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new ExerciseName(trimmedExerciseName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses a {@code String numReps} into a {@code NumReps}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the given {@code numReps} is invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static NumReps parseNumReps(String numReps) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(numReps);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String trimmedNumReps \u003d numReps.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!NumReps.isValidNumReps(trimmedNumReps)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(NumReps.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new NumReps(trimmedNumReps);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses a {@code String weight} into a {@code Weight}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static Weight parseWeight(String weight) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String trimmedWeight \u003d weight.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!Weight.isValidWeight(trimmedWeight)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Weight(trimmedWeight);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 59
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exercise/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.CliSyntax.PREFIX_EXERCISE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EXERCISE_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!ArgumentTokenizer.arePrefixesPresent(argMultimap, PREFIX_EXERCISE_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseName exerciseName \u003d new ExerciseName(argMultimap.getValue(PREFIX_EXERCISE_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new FindCommand(exerciseName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 35
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exercise/set/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise.set;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.CliSyntax.PREFIX_NUM_OF_REPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.set.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.NumReps;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NUM_OF_REPS, PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!ArgumentTokenizer.arePrefixesPresent(argMultimap, PREFIX_NUM_OF_REPS, PREFIX_WEIGHT)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Index index \u003d SetParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        NumReps numReps \u003d SetParserUtil.parseNumReps(argMultimap.getValue(PREFIX_NUM_OF_REPS).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Weight weight \u003d SetParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new AddCommand(index, numReps, weight);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 40
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exercise/set/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise.set;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.set.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Index exerciseId \u003d SetParserUtil.parseIndex(splitArgs[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Index setId \u003d SetParserUtil.parseIndex(splitArgs[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new DeleteCommand(exerciseId, setId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 33
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exercise/set/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise.set;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.CliSyntax.PREFIX_NUM_OF_REPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.set.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.NumReps;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NUM_OF_REPS, PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!ArgumentTokenizer.arePrefixesPresent(argMultimap, PREFIX_NUM_OF_REPS, PREFIX_WEIGHT)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String[] splitPreamble \u003d argMultimap.getPreamble().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (splitPreamble.length !\u003d 2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Index exerciseId \u003d SetParserUtil.parseIndex(splitPreamble[0]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Index setId \u003d SetParserUtil.parseIndex(splitPreamble[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        NumReps numReps \u003d SetParserUtil.parseNumReps(argMultimap.getValue(PREFIX_NUM_OF_REPS).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Weight weight \u003d SetParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new EditCommand(exerciseId, setId, numReps, weight);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 47
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exercise/set/SetCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise.set;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.set.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.set.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.set.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class SetCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param input full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Command parse(String input) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 53
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/exercise/set/SetParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise.set;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.NumReps;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Weight;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class SetParserUtil extends ParserUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses a {@code String numReps} into a {@code NumReps}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the given {@code numReps} is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static NumReps parseNumReps(String numReps) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(numReps);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String trimmedNumReps \u003d numReps.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!NumReps.isValidNumReps(trimmedNumReps)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(NumReps.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new NumReps(trimmedNumReps);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses a {@code String weight} into a {@code Weight}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static Weight parseWeight(String weight) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String trimmedWeight \u003d weight.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!Weight.isValidWeight(trimmedWeight)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new ParseException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Weight(trimmedWeight);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 43
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/schedule/CreateCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static seedu.zerotoone.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.schedule.CreateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.DateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class CreateCommandParser implements Parser\u003cCreateCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @param args STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @return STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws ParseException STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public CreateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!ArgumentTokenizer.arePrefixesPresent(argMultimap, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Index index \u003d ScheduleParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        DateTime dateTime \u003d ScheduleParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return new CreateCommand(index, dateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 39
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/schedule/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.schedule.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Index index \u003d ScheduleParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 31
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/schedule/ScheduleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.schedule.CreateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.schedule.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.commands.schedule.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ScheduleCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @param input STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @return STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws ParseException STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Command parse(String input) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        case CreateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return new CreateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        //     return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 51
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/schedule/ScheduleParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.logic.parser.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ScheduleParserUtil extends ParserUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @param dateTime STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @return STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws ParseException STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return new DateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 28
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/session/StartCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gb3h"
        },
        "content": "package seedu.zerotoone.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.logic.parser.exercise.ExerciseParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gb3h"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gb3h"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gb3h"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gb3h"
        },
        "content": "public class StartCommandParser implements Parser\u003cStartCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gb3h"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gb3h"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gb3h"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gb3h"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public StartCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gb3h"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gb3h"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        Index index \u003d ExerciseParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        return new StartCommand(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gb3h"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gb3h": 32
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/util/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/util/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 10,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/util/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.util.StringUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Contains utility methods used for parsing strings in the various Parser classes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/logic/parser/util/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.Schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduledWorkout;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    Predicate\u003cExercise\u003e PREDICATE_SHOW_ALL_EXERCISES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Common - User Preferences"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Exercise List"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns the user prefs\u0027 exercise list file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Path getExerciseListFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Sets the user prefs\u0027 exercise list file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void setExerciseListFilePath(Path exerciseListFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Replaces exercise list data with the data in {@code exerciseList}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void setExerciseList(ReadOnlyExerciseList exerciseList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /** Returns the ExerciseList */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    ReadOnlyExerciseList getExerciseList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns true if a exercise with the same identity as {@code exercise} exists in the exercise list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    boolean hasExercise(Exercise exercise);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Deletes the given exercise."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * The exercise must exist in the exercise list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    void deleteExercise(Exercise target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Adds the given exercise."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * {@code exercise} must not already exist in the exercise list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    void addExercise(Exercise exercise);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Replaces the given exercise {@code target} with {@code editedExercise}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * {@code target} must exist in the exercise list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * existing exercise in the exercise list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    void setExercise(Exercise target, Exercise editedExercise);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Exercise} backed by the internal list of"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * {@code versionedExerciseList}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Updates the filter of the filtered exercise list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gb3h"
        },
        "content": "     * Returns true if a workout has currently started."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gb3h"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    boolean isInSession();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    void startSession(Exercise exerciseToStart, LocalDateTime currentDateTime);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    void stopSession(LocalDateTime currentDateTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // Schedule"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    boolean hasSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    void addSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    void deleteScheduledWorkout(ScheduledWorkout scheduledWorkoutToDelete);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    ObservableList\u003cScheduledWorkout\u003e getSortedScheduledWorkoutList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    ScheduleList getScheduleList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 33,
      "gb3h": 10,
      "Guofeng-Tang": 11,
      "jiachen247": 5,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.Schedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduledWorkout;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.Scheduler;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.model.session.Session;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Represents the in-memory model of the exercise list data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final ExerciseList exerciseList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final FilteredList\u003cExercise\u003e filteredExercises;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    private Optional\u003cSession\u003e currentSession;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final Scheduler scheduler;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Initializes a ModelManager with the given exerciseList and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ModelManager(ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                        ReadOnlyExerciseList exerciseList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                        ScheduleList scheduleList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireAllNonNull(exerciseList,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                userPrefs,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                scheduleList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        logger.fine(\"Initializing with user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.exerciseList \u003d new ExerciseList(exerciseList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        filteredExercises \u003d new FilteredList\u003c\u003e(this.exerciseList.getExerciseList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        this.currentSession \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.scheduler \u003d new Scheduler(scheduleList); // STEPH_TODO add storage"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this(new UserPrefs(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                new ExerciseList(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                new ScheduleList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Common - User Preferences"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Exercise List"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Path getExerciseListFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return userPrefs.getExerciseListFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void setExerciseListFilePath(Path exerciseListFilePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        requireNonNull(exerciseListFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        userPrefs.setExerciseListFilePath(exerciseListFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void setExerciseList(ReadOnlyExerciseList exerciseList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.exerciseList.resetData(exerciseList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public ReadOnlyExerciseList getExerciseList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return exerciseList.hasExercise(exercise);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseList.removeExercise(target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseList.addExercise(exercise);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseList.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return filteredExercises;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        filteredExercises.setPredicate(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public boolean isInSession() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        return this.currentSession.isPresent();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public void startSession(Exercise exerciseToStart, LocalDateTime currentDateTime) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        Session session \u003d new Session(exerciseToStart, currentDateTime);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        this.currentSession \u003d Optional.of(session);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public void stopSession(LocalDateTime currentDateTime) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        Session completedSession \u003d this.currentSession.get();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        completedSession.finish(currentDateTime);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        // do smth like save completed workout"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        this.currentSession \u003d Optional.empty();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // Schedule"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ScheduleList getScheduleList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduler.getScheduleList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduler.hasSchedule(schedule);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduler.addSchedule(schedule);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void deleteScheduledWorkout(ScheduledWorkout scheduledWorkoutToDelete) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduler.deleteScheduledWorkout(scheduledWorkoutToDelete);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ObservableList\u003cScheduledWorkout\u003e getSortedScheduledWorkoutList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduler.getSortedScheduledWorkoutList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return exerciseList.equals(other.exerciseList)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 filteredExercises.equals(other.filteredExercises);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // \u0026\u0026 scheduler.equals(other.scheduler);   // STEPH_TODO: implement later"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 35,
      "gb3h": 24,
      "Guofeng-Tang": 43,
      "jiachen247": 12,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/exercise/Exercise.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Represents a Exercise in the exercise list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final ExerciseName exerciseName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final List\u003cExerciseSet\u003e exerciseSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Exercise(ExerciseName exerciseName, List\u003cExerciseSet\u003e exerciseSets) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireAllNonNull(exerciseName, exerciseSets);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseSets.addAll(exerciseSets);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ExerciseName getExerciseName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return exerciseName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public List\u003cExerciseSet\u003e getExerciseSets() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return Collections.unmodifiableList(exerciseSets);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns true if both exercises of the same exerciseName."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * This defines a weaker notion of equality between two exercises."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean isSameExercise(Exercise otherExercise) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (otherExercise \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return otherExercise !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 otherExercise.getExerciseName().equals(getExerciseName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * This defines a stronger notion of equality between two exercises."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return otherExercise.getExerciseName().equals(getExerciseName())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u0026\u0026 otherExercise.getExerciseSets().equals(getExerciseSets());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return Objects.hash(exerciseName, exerciseSets);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        builder.append(getExerciseName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                .append(\" Exercise set: \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .append(getExerciseSets().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 18,
      "Guofeng-Tang": 15,
      "-": 49,
      "chishanw": 1
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/exercise/ExerciseList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Wraps all data at the exercise list level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Duplicates are not allowed (by .isSameExercise comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class ExerciseList implements ReadOnlyExerciseList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final UniqueExerciseList exercises;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exercises \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public ExerciseList() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Creates an ExerciseList using the Exercises in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public ExerciseList(ReadOnlyExerciseList toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Replaces the contents of the exercise list with {@code exercises}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * {@code exercises} must not contain duplicate exercises."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exercises.setExercises(exercises);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Resets the existing data of this {@code ExerciseList} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void resetData(ReadOnlyExerciseList newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        setExercises(newData.getExerciseList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    //// exercise-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns true if a exercise with the same identity as {@code exercise} exists in the exercise list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return exercises.contains(exercise);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Adds a exercise to the exercise list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * The exercise must not already exist in the exercise list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void addExercise(Exercise p) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exercises.add(p);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Replaces the given exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * {@code target} must exist in the exercise list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * exercise in the exercise list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(editedExercise);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exercises.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Removes {@code key} from this {@code ExerciseList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * {@code key} must exist in the exercise list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void removeExercise(Exercise key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exercises.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return exercises.asUnmodifiableObservableList().size() + \" exercises\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return exercises.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                || (other instanceof ExerciseList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 exercises.equals(((ExerciseList) other).exercises));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return exercises.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 35,
      "jiachen247": 7,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/exercise/ExerciseName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Represents a Exercise\u0027s Name in the exercise list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ExerciseName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * The first character of the exercise name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ExerciseName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        checkArgument(isValidExerciseName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static boolean isValidExerciseName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                || (other instanceof ExerciseName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 fullName.equals(((ExerciseName) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 10,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/exercise/ExerciseSet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Represents a Exercise Set in the exercise list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class ExerciseSet {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * The first character of the exercise set must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public final Weight weight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public final NumReps numReps;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ExerciseSet(Weight weight, NumReps numReps) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireAllNonNull(weight, numReps);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.numReps \u003d numReps;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Weight getWeight() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public NumReps getNumReps() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return numReps;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        builder.append(\" Weight: \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                .append(getWeight())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                .append(\" Number of repetitions: \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .append(getNumReps());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (!(other instanceof ExerciseSet)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        ExerciseSet otherExerciseSet \u003d (ExerciseSet) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return otherExerciseSet.getWeight().equals(getWeight())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 otherExerciseSet.getNumReps().equals(getNumReps());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return Objects.hash(weight, numReps);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 9,
      "chishanw": 57
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/exercise/NumReps.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents a Set\u0027s number of repetitions in ZeroToOne."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNumReps(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class NumReps {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Number of repetitions should only be one number.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * The first character of the number of repetitions must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs an {@code NumReps}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param numReps A valid number of repetitions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public NumReps(String numReps) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        requireNonNull(numReps);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        checkArgument(isValidNumReps(numReps), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        value \u003d numReps;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Returns true if a given string is a valid number of repetitions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static boolean isValidNumReps(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                || (other instanceof NumReps // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                \u0026\u0026 value.equals(((NumReps) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "chishanw": 55
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/exercise/PredicateFilterExerciseName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Tests that a {@code Exercise}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class PredicateFilterExerciseName implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public PredicateFilterExerciseName(String keyword) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.keywords \u003d Arrays.asList(keyword.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(exercise.getExerciseName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                || (other instanceof PredicateFilterExerciseName // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 keywords.equals(((PredicateFilterExerciseName) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 32
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/exercise/ReadOnlyExerciseList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Unmodifiable view of an exercise list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public interface ReadOnlyExerciseList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns an unmodifiable view of the exercises list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * This list will not contain any duplicate exercises."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    ObservableList\u003cExercise\u003e getExerciseList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 4,
      "jiachen247": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/exercise/UniqueExerciseList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * A list of exercises that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * A exercise is considered unique by comparing using {@code Exercise#isSameExercise(Exercise)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * updating of exercises uses Exercise#isSameExercise(Exercise) for equality so as to ensure that the exercise being"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueExerciseList. However, the removal of a exercise uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Exercise#equals(Object) so as to ensure that the exercise with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * @see Exercise#isSameExercise(Exercise)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class UniqueExerciseList implements Iterable\u003cExercise\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns true if the list contains an equivalent exercise as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean contains(Exercise toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExercise);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Adds a exercise to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * The exercise must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void add(Exercise toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Replaces the exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing exercise in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!target.isSameExercise(editedExercise) \u0026\u0026 contains(editedExercise)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        internalList.set(index, editedExercise);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Removes the equivalent exercise from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * The exercise must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void remove(Exercise toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void setExercises(UniqueExerciseList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Replaces the contents of this list with {@code exercises}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * {@code exercises} must not contain duplicate exercises."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireAllNonNull(exercises);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!exercisesAreUnique(exercises)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        internalList.setAll(exercises);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ObservableList\u003cExercise\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Iterator\u003cExercise\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                || (other instanceof UniqueExerciseList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueExerciseList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns true if {@code exercises} contains only unique exercises."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private boolean exercisesAreUnique(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        for (int i \u003d 0; i \u003c exercises.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            for (int j \u003d i + 1; j \u003c exercises.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                if (exercises.get(i).isSameExercise(exercises.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 4,
      "Guofeng-Tang": 133
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/exercise/Weight.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents a Set\u0027s weight in ZeroToOne."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Weight should be a one to three digits number.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * The first character of the weight must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,3}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs an {@code Weight}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param weight A valid weight."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Weight(String weight) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        checkArgument(isValidWeight(weight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        value \u003d weight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Returns true if a given string is a valid weight."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                || (other instanceof Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                \u0026\u0026 value.equals(((Weight) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 4,
      "chishanw": 53
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/exercise/exceptions/DuplicateExerciseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Signals that the operation will result in duplicate Exercises (Exercises are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class DuplicateExerciseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public DuplicateExerciseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        super(\"Operation would result in duplicate exercises\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "Guofeng-Tang": 5,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/exercise/exceptions/ExerciseNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Signals that the operation is unable to find the specified exercise."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ExerciseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "Guofeng-Tang": 5
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static seedu.zerotoone.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String DATE_TIME_PATTERN \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_TIME_PATTERN);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            String.format(\"DateTime must be in the format %1$s.\", DATE_TIME_PATTERN);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @param dateTime STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @return STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static Boolean isValidDateTime(String dateTime) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            LocalDateTime.parse(dateTime, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return dateTime.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!(other instanceof DateTime)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        DateTime otherDateTime \u003d (DateTime) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return this.dateTime.equals(otherDateTime.dateTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 65
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/OneTimeSchedule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class OneTimeSchedule implements Schedule {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final Exercise workoutToSchedule; // TO_CHANGE_EXERCISE_TO_WORKOUT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public OneTimeSchedule(Exercise workoutToSchedule, DateTime dateTime) { // TO_CHANGE_EXERCISE_TO_WORKOUT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.workoutToSchedule \u003d workoutToSchedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Exercise getWorkoutToSchedule() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return workoutToSchedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Optional\u003cList\u003cScheduledWorkout\u003e\u003e getScheduledWorkout() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ScheduledWorkout scheduledWorkout \u003d new ScheduledWorkout(this, workoutToSchedule, dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return Optional.of(Collections.singletonList(scheduledWorkout));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean isSameSchedule(Schedule other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!(other instanceof OneTimeSchedule)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        OneTimeSchedule otherSchedule \u003d (OneTimeSchedule) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return otherSchedule.getScheduledWorkout().equals(getScheduledWorkout())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u0026\u0026 otherSchedule.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 51
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/ReadOnlyScheduledWorkoutList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Unmodifiable view of a scheduled workout list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public interface ReadOnlyScheduledWorkoutList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns an unmodifiable view of the exercises list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * This list will not contain any duplicate exercises."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    ObservableList\u003cScheduledWorkout\u003e getScheduledWorkoutList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 15
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/RecurringSchedule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class RecurringSchedule implements Schedule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final Exercise workoutToSchedule; // TO_CHANGE_EXERCISE_TO_WORKOUT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final DateTime startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final DateTime endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // private final List\u003cCanceledScheudledWorkout\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // private final List\u003cEditedScheduledWorkout\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public RecurringSchedule(Exercise workoutToSchedule, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // TO_CHANGE_EXERCISE_TO_WORKOUT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.workoutToSchedule \u003d workoutToSchedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Exercise getWorkoutToSchedule() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return workoutToSchedule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Optional\u003cList\u003cScheduledWorkout\u003e\u003e getScheduledWorkout() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // do I have any scheduled workouts after today?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // are some instances of them edited/deleted?"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // return the list of scheduled workouts that are not deleted along with those that are edited, that are"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // scheduled after today"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // ScheduledWorkout scheduledWorkout \u003d new ScheduledWorkout(workoutToSchedule, dateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // return Optional.of(Collections.singletonList(scheduledWorkout));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean isSameSchedule(Schedule other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return false; // STEPH_TODO"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 48
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/Schedule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public interface Schedule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    Exercise getWorkoutToSchedule(); // TO_CHANGE_EXERCISE_TO_WORKOUT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    Optional\u003cList\u003cScheduledWorkout\u003e\u003e getScheduledWorkout();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    boolean isSameSchedule(Schedule other);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 15
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/ScheduleList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ScheduleList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final UniqueScheduleList schedules;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        schedules \u003d new UniqueScheduleList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ScheduleList() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Creates an ScheduleList using the Schedules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ScheduleList(ScheduleList toBeCopied) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Replaces the contents of the schedule list with {@code schedules}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * {@code schedules} must not contain duplicate schedules."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void setSchedules(List\u003cSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.schedules.setSchedules(schedules);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Resets the existing data of this {@code ScheduleList} with {@code newData}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void resetData(ScheduleList newData) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        setSchedules(newData.getScheduleList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //// schedule-level operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns true if a schedule with the same identity as {@code schedule} exists in the schedule list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return schedules.contains(schedule);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Adds a schedule to the schedule list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * The schedule must not already exist in the schedule list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void addSchedule(Schedule p) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        schedules.add(p);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * Replaces the given schedule {@code target} in the list with {@code editedSchedule}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * {@code target} must exist in the schedule list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * The schedule identity of {@code editedSchedule} must not be the same as another existing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * schedule in the schedule list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     requireNonNull(editedSchedule);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     schedules.setSchedule(target, editedSchedule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Removes {@code key} from this {@code ScheduleList}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * {@code key} must exist in the schedule list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void removeSchedule(Schedule key) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        schedules.remove(key);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return getScheduleList().size() + \" schedules\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public List\u003cSchedule\u003e getScheduleList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return schedules.asUnmodifiableList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                || (other instanceof ScheduleList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u0026\u0026 schedules.equals(((ScheduleList) other).schedules));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return schedules.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 115
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/ScheduledWorkout.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ScheduledWorkout {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final Schedule schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final Exercise workoutToSchedule; // TO_CHANGE_EXERCISE_TO_WORKOUT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ScheduledWorkout(Schedule schedule, Exercise workoutToSchedule, DateTime dateTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.workoutToSchedule \u003d workoutToSchedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Schedule getSchedule() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public String getScheduledWorkoutName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return workoutToSchedule.getExerciseName().fullName; // TO_CHANGE_EXERCISE_TO_WORKOUT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * STEPH_TODO: may not even need this"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean isSameScheduledWorkout(ScheduledWorkout otherScheduledWorkout) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // if (otherScheduledWorkout \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        //     return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // return otherScheduledWorkout !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        //         \u0026\u0026 otherScheduledWorkout.getScheduledWorkoutName().equals(getScheduledWorkoutName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return equals(otherScheduledWorkout);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns true if both scheduledWorkouts have the same identity and data fields."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * This defines a stronger notion of equality between two scheduledWorkouts."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!(other instanceof ScheduledWorkout)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ScheduledWorkout otherScheduledWorkout \u003d (ScheduledWorkout) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return otherScheduledWorkout.getScheduledWorkoutName().equals(getScheduledWorkoutName())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u0026\u0026 otherScheduledWorkout.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 64
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/ScheduledWorkoutList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Wraps all data at the scheduled workout list level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Duplicates are not allowed (by .isSameScheduledWorkout comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ScheduledWorkoutList implements ReadOnlyScheduledWorkoutList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final UniqueScheduledWorkoutList scheduledWorkouts;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduledWorkouts \u003d new UniqueScheduledWorkoutList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ScheduledWorkoutList() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ScheduledWorkoutList(ReadOnlyScheduledWorkoutList toBeCopied) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Replaces the contents of the scheduledWorkout list with {@code scheduledWorkouts}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * {@code scheduledWorkouts} must not contain duplicate scheduledWorkouts."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void setScheduledWorkouts(List\u003cScheduledWorkout\u003e scheduledWorkouts) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.scheduledWorkouts.setScheduledWorkouts(scheduledWorkouts);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Resets the existing data of this {@code ScheduledWorkoutList} with {@code newData}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void resetData(ReadOnlyScheduledWorkoutList newData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        setScheduledWorkouts(newData.getScheduledWorkoutList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //// scheduledWorkout-level operations"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * Returns true if a scheduledWorkout with the same identity as {@code scheduledWorkout} exists in the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * scheduledWorkout list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // public boolean hasScheduledWorkout(ScheduledWorkout scheduledWorkout) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     requireNonNull(scheduledWorkout);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     return scheduledWorkouts.contains(scheduledWorkout);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * Adds a scheduledWorkout to the scheduledWorkout list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * The scheduledWorkout must not already exist in the scheduledWorkout list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // public void addScheduledWorkout(ScheduledWorkout p) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     scheduledWorkouts.add(p);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * Replaces the given scheduledWorkout {@code target} in the list with {@code editedScheduledWorkout}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * {@code target} must exist in the scheduledWorkout list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * The scheduledWorkout identity of {@code editedScheduledWorkout} must not be the same as another existing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * scheduledWorkout in the scheduledWorkout list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // public void setScheduledWorkout(ScheduledWorkout target, ScheduledWorkout editedScheduledWorkout) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     requireNonNull(editedScheduledWorkout);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     scheduledWorkouts.setScheduledWorkout(target, editedScheduledWorkout);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * Removes {@code key} from this {@code ScheduledWorkoutList}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * {@code key} must exist in the scheduledWorkout list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // public void removeScheduledWorkout(ScheduledWorkout key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     scheduledWorkouts.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduledWorkouts.asUnmodifiableObservableList().size() + \" scheduled workouts\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ObservableList\u003cScheduledWorkout\u003e getScheduledWorkoutList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduledWorkouts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                || (other instanceof ScheduledWorkoutList // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u0026\u0026 scheduledWorkouts.equals(((ScheduledWorkoutList) other).scheduledWorkouts));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduledWorkouts.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 118
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/Scheduler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * STEPH_TODO_JAVADOC"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class Scheduler {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final ScheduleList scheduleList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private ScheduledWorkoutList scheduledWorkoutList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private SortedList\u003cScheduledWorkout\u003e sortedScheduledWorkoutList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Scheduler(ScheduleList scheduleList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.scheduleList \u003d new ScheduleList(scheduleList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.scheduledWorkoutList \u003d new ScheduledWorkoutList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.sortedScheduledWorkoutList \u003d new SortedList\u003c\u003e(this.scheduledWorkoutList.getScheduledWorkoutList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        populateSortedScheduledWorkoutList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ScheduleList getScheduleList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduleList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ObservableList\u003cScheduledWorkout\u003e getSortedScheduledWorkoutList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return sortedScheduledWorkoutList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @param schedule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduleList.hasSchedule(schedule);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @param schedule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduleList.addSchedule(schedule);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        populateSortedScheduledWorkoutList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @param scheduledWorkoutToDelete"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void deleteScheduledWorkout(ScheduledWorkout scheduledWorkoutToDelete) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(scheduledWorkoutToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Schedule scheduleToDelete \u003d scheduledWorkoutToDelete.getSchedule();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduleList.removeSchedule(scheduleToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        populateSortedScheduledWorkoutList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private void populateSortedScheduledWorkoutList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // List\u003cScheduledWorkout\u003e newScheduledWorkouts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // for (Schedule schedule : scheduleList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        //     Optional\u003cList\u003cScheduledWorkout\u003e\u003e scheduledWorkouts \u003d schedule.getScheduledWorkout();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        //     scheduledWorkouts.ifPresent(newScheduledWorkouts::addAll);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        List\u003cScheduledWorkout\u003e newScheduledWorkouts \u003d scheduleList.getScheduleList().stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                .map(Schedule::getScheduledWorkout)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                .filter(Optional::isPresent)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                .map(Optional::get)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                // .forEach(newScheduledWorkouts::addAll);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                .flatMap(Collection::stream)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        setScheduledWorkouts(newScheduledWorkouts);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void setScheduledWorkouts(List\u003cScheduledWorkout\u003e scheduledWorkouts) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.scheduledWorkoutList.setScheduledWorkouts(scheduledWorkouts);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 92
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/UniqueScheduleList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static seedu.zerotoone.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.exceptions.DuplicateScheduleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.exceptions.ScheduleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * A list of schedules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * A schedule is considered unique by comparing using {@code Schedule#isSameSchedule(Schedule)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * updating of schedules uses Schedule#isSameSchedule(Schedule) for equality so as to ensure that the schedule being"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueScheduleList. However, the removal of a schedule uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Schedule#equals(Object) so as to ensure that the schedule with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * @see Schedule#isSameSchedule(Schedule)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class UniqueScheduleList implements Iterable\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final List\u003cSchedule\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns true if the list contains an equivalent schedule as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean contains(Schedule toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameSchedule);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Adds a schedule to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * The schedule must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void add(Schedule toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new DuplicateScheduleException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * Replaces the schedule {@code target} in the list with {@code editedSchedule}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * The schedule identity of {@code editedSchedule} must not be the same as another existing schedule in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     requireAllNonNull(target, editedSchedule);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //         throw new ScheduleNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     if (!target.isSameSchedule(editedSchedule) \u0026\u0026 contains(editedSchedule)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //         throw new DuplicateScheduleException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     internalList.set(index, editedSchedule);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Removes the equivalent schedule from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * The schedule must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void remove(Schedule toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new ScheduleNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Replaces the contents of this list with {@code schedules}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * {@code schedules} must not contain duplicate schedules."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void setSchedules(List\u003cSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireAllNonNull(schedules);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!schedulesAreUnique(schedules)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new DuplicateScheduleException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        internalList.addAll(schedules);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code UnmodifiableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public List\u003cSchedule\u003e asUnmodifiableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Iterator\u003cSchedule\u003e iterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                || (other instanceof UniqueScheduleList // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueScheduleList) other).internalList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns true if {@code schedules} contains only unique schedules."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private boolean schedulesAreUnique(List\u003cSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        for (int i \u003d 0; i \u003c schedules.size() - 1; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            for (int j \u003d i + 1; j \u003c schedules.size(); j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                if (schedules.get(i).isSameSchedule(schedules.get(j))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 131
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/UniqueScheduledWorkoutList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static seedu.zerotoone.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.exceptions.DuplicateScheduledWorkoutException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * A list of scheduledWorkouts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * A scheduledWorkout is considered unique by comparing using"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * {@code ScheduledWorkout#isSameScheduledWorkout(ScheduledWorkout)}. As such, adding and updating of scheduledWorkouts"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * uses ScheduledWorkout#isSameScheduledWorkout(ScheduledWorkout) for equality so as to ensure that the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * scheduledWorkout being added or updated is unique in terms of identity in the UniqueScheduledWorkoutList. However,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * the removal of a scheduledWorkout uses ScheduledWorkout#equals(Object) so as to ensure that the scheduledWorkout"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * @see ScheduledWorkout#isSameScheduledWorkout(ScheduledWorkout)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class UniqueScheduledWorkoutList implements Iterable\u003cScheduledWorkout\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final ObservableList\u003cScheduledWorkout\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final ObservableList\u003cScheduledWorkout\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns true if the list contains an equivalent scheduledWorkout as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean contains(ScheduledWorkout toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameScheduledWorkout);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Adds a scheduledWorkout to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * The scheduledWorkout must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void add(ScheduledWorkout toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new DuplicateScheduledWorkoutException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * Replaces the scheduledWorkout {@code target} in the list with {@code editedScheduledWorkout}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * The scheduledWorkout identity of {@code editedScheduledWorkout} must not be the same as another existing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  scheduledWorkout in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // public void setScheduledWorkout(ScheduledWorkout target, ScheduledWorkout editedScheduledWorkout) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     requireAllNonNull(target, editedScheduledWorkout);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //         throw new ScheduledWorkoutNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     if (!target.isSameScheduledWorkout(editedScheduledWorkout) \u0026\u0026 contains(editedScheduledWorkout)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //         throw new DuplicateScheduledWorkoutException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     internalList.set(index, editedScheduledWorkout);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * Removes the equivalent scheduledWorkout from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  * The scheduledWorkout must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // public void remove(ScheduledWorkout toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //         throw new ScheduledWorkoutNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // public void setScheduledWorkouts(UniqueScheduledWorkoutList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    //     internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Replaces the contents of this list with {@code scheduledWorkouts}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * {@code scheduledWorkouts} must not contain duplicate scheduledWorkouts."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void setScheduledWorkouts(List\u003cScheduledWorkout\u003e scheduledWorkouts) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireAllNonNull(scheduledWorkouts);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!scheduledWorkoutsAreUnique(scheduledWorkouts)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new DuplicateScheduledWorkoutException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        internalList.setAll(scheduledWorkouts);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ObservableList\u003cScheduledWorkout\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Iterator\u003cScheduledWorkout\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                || (other instanceof UniqueScheduledWorkoutList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueScheduledWorkoutList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns true if {@code scheduledWorkouts} contains only unique scheduledWorkouts."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private boolean scheduledWorkoutsAreUnique(List\u003cScheduledWorkout\u003e scheduledWorkouts) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        for (int i \u003d 0; i \u003c scheduledWorkouts.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            for (int j \u003d i + 1; j \u003c scheduledWorkouts.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                if (scheduledWorkouts.get(i).isSameScheduledWorkout(scheduledWorkouts.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 139
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/exceptions/DuplicateScheduleException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Signals that the operation will result in duplicate Schedules (Schedules are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class DuplicateScheduleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public DuplicateScheduleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        super(\"Operation would result in duplicate schedules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 11
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/exceptions/DuplicateScheduledWorkoutException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Signals that the operation will result in duplicate ScheduledWorkouts (ScheduledWorkouts are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class DuplicateScheduledWorkoutException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public DuplicateScheduledWorkoutException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        super(\"Operation would result in duplicate scheduledWorkouts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 11
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/exceptions/ScheduleNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Signals that the operation is unable to find the specified schedule."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ScheduleNotFoundException extends RuntimeException { }"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 6
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/schedule/exceptions/ScheduledWorkoutNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Signals that the operation is unable to find the specified scheduledWorkout."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ScheduledWorkoutNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 6
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/session/Session.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gb3h"
        },
        "content": "package seedu.zerotoone.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import static seedu.zerotoone.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gb3h"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gb3h"
        },
        "content": " * Represents a single Session."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gb3h"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gb3h"
        },
        "content": "public class Session {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    private final LocalDateTime startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    private Optional\u003cLocalDateTime\u003e endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    private final ExerciseName exerciseName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    private final Queue\u003cExerciseSet\u003e exerciseQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    private final List\u003cExerciseSet\u003e doneExercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gb3h"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gb3h"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public Session(Exercise exercise, LocalDateTime startTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        requireAllNonNull(exercise);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        this.exerciseName \u003d exercise.getExerciseName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        this.exerciseQueue.addAll(exercise.getExerciseSets());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        this.endTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    public void finish(LocalDateTime endTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        this.endTime \u003d Optional.of(endTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gb3h"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gb3h"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gb3h": 43
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/userprefs/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Path getExerciseListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "jiachen247": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/userprefs/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Path exerciseListFilePath \u003d Paths.get(\"data\" , \"exerciselist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Path workoutListFilePath \u003d Paths.get(\"data\" , \"workoutlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Path scheduleListFilePath \u003d Paths.get(\"data\" , \"schedulelist.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Path logListFilePath \u003d Paths.get(\"data\" , \"loglist.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        setExerciseListFilePath(newUserPrefs.getExerciseListFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Path getExerciseListFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return exerciseListFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void setExerciseListFilePath(Path exerciseListFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        requireNonNull(exerciseListFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.exerciseListFilePath \u003d exerciseListFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Path getWorkoutListFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return workoutListFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setWorkoutListFilePath(Path workoutListFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(workoutListFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.workoutListFilePath \u003d workoutListFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Path getScheduleListFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return scheduleListFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setScheduleListFilePath(Path scheduleListFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(scheduleListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.scheduleListFilePath \u003d scheduleListFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Path getLogListFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return logListFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setLogListFilePath(Path logListFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        requireNonNull(logListFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.logListFilePath \u003d logListFilePath;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                \u0026\u0026 exerciseListFilePath.equals(o.exerciseListFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return Objects.hash(guiSettings, exerciseListFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        sb.append(\"\\nExercise List file location : \" + exerciseListFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        sb.append(\"\\nSession List file location : \" + workoutListFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        sb.append(\"\\nSchedule List file location : \" + scheduleListFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        sb.append(\"\\nLog List file location : \" + logListFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 35,
      "gb3h": 1,
      "jiachen247": 9,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/model/util/SampleExerciseDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.NumReps;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.Weight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Contains utility methods for populating {@code ExerciseList} with sample data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class SampleExerciseDataUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static Exercise[] getSampleExercises() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise[] exercises \u003d new Exercise[3];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Exercise 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseName exerciseOneName \u003d new ExerciseName(\"Bench Press\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExerciseSet\u003e exerciseOneSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseOneSets.add(new ExerciseSet(new Weight(\"60\"), new NumReps(\"5\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseOneSets.add(new ExerciseSet(new Weight(\"60\"), new NumReps(\"5\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseOneSets.add(new ExerciseSet(new Weight(\"60\"), new NumReps(\"5\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exercises[0] \u003d new Exercise(exerciseOneName, exerciseOneSets);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Exercise 2"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseName exerciseTwoName \u003d new ExerciseName(\"Overhead Press\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExerciseSet\u003e exerciseTwoSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseTwoSets.add(new ExerciseSet(new Weight(\"30\"), new NumReps(\"10\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseTwoSets.add(new ExerciseSet(new Weight(\"30\"), new NumReps(\"10\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseTwoSets.add(new ExerciseSet(new Weight(\"30\"), new NumReps(\"10\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exercises[1] \u003d new Exercise(exerciseTwoName, exerciseTwoSets);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Exercise 3"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseName exerciseThreeName \u003d new ExerciseName(\"Triceps Pushdown\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExerciseSet\u003e exerciseThreeSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseThreeSets.add(new ExerciseSet(new Weight(\"15\"), new NumReps(\"10\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseThreeSets.add(new ExerciseSet(new Weight(\"15\"), new NumReps(\"10\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseThreeSets.add(new ExerciseSet(new Weight(\"15\"), new NumReps(\"10\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseThreeSets.add(new ExerciseSet(new Weight(\"15\"), new NumReps(\"10\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseThreeSets.add(new ExerciseSet(new Weight(\"15\"), new NumReps(\"10\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exercises[2] \u003d new Exercise(exerciseThreeName, exerciseThreeSets);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return exercises;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public static ReadOnlyExerciseList getSampleExerciseList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseList sampleExerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        for (Exercise exercise : getSampleExercises()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            sampleExerciseList.addExercise(exercise);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return sampleExerciseList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 41,
      "Guofeng-Tang": 4,
      "jiachen247": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.exercise.ExerciseListStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.storage.schedule.ScheduleListStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public interface Storage extends UserPrefsStorage, ExerciseListStorage, ScheduleListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Common - User Preferences"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Exercise List"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Path getExerciseListFilePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Optional\u003cReadOnlyExerciseList\u003e readExerciseList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void saveExerciseList(ReadOnlyExerciseList exerciseList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // Schedule List"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    Path getScheduleListFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    Optional\u003cScheduleList\u003e readScheduleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    void saveScheduleList(ScheduleList scheduleList) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 11,
      "Guofeng-Tang": 14,
      "jiachen247": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.exercise.ExerciseListStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.storage.schedule.ScheduleListStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.userprefs.UserPrefsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Manages storage of ExerciseList data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private ExerciseListStorage exerciseListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private ScheduleListStorage scheduleListStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                          ExerciseListStorage exerciseListStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                          ScheduleListStorage scheduleListStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseListStorage \u003d exerciseListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.scheduleListStorage \u003d scheduleListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Common - User Preferences"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Exercise List"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Path getExerciseListFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return exerciseListStorage.getExerciseListFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Optional\u003cReadOnlyExerciseList\u003e readExerciseList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return readExerciseList(exerciseListStorage.getExerciseListFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Optional\u003cReadOnlyExerciseList\u003e readExerciseList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return exerciseListStorage.readExerciseList(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void saveExerciseList(ReadOnlyExerciseList exerciseList) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        saveExerciseList(exerciseList, exerciseListStorage.getExerciseListFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void saveExerciseList(ReadOnlyExerciseList exerciseList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        exerciseListStorage.saveExerciseList(exerciseList, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // Schedule List"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Path getScheduleListFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduleListStorage.getScheduleListFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Optional\u003cScheduleList\u003e readScheduleList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return readScheduleList(scheduleListStorage.getScheduleListFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Optional\u003cScheduleList\u003e readScheduleList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduleListStorage.readScheduleList(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void saveScheduleList(ScheduleList scheduleList) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        saveScheduleList(scheduleList, scheduleListStorage.getScheduleListFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void saveScheduleList(ScheduleList scheduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduleListStorage.saveScheduleList(scheduleList, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 14,
      "Guofeng-Tang": 36,
      "jiachen247": 11,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/exercise/ExerciseListStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Represents a storage for {@link ExerciseList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public interface ExerciseListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Path getExerciseListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Returns ExerciseList data as a {@link ReadOnlyExerciseList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Optional\u003cReadOnlyExerciseList\u003e readExerciseList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @see #getExerciseListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Optional\u003cReadOnlyExerciseList\u003e readExerciseList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Saves the given {@link ReadOnlyExerciseList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param exerciseList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void saveExerciseList(ReadOnlyExerciseList exerciseList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @see #saveExerciseList(ReadOnlyExerciseList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void saveExerciseList(ReadOnlyExerciseList exerciseList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 4,
      "jiachen247": 42
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/exercise/ExerciseListStorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.exercise.util.JacksonExerciseList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * A class to access ExerciseList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ExerciseListStorageManager implements ExerciseListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExerciseListStorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ExerciseListStorageManager(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Path getExerciseListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Optional\u003cReadOnlyExerciseList\u003e readExerciseList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return readExerciseList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Similar to {@link #readExerciseList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Optional\u003cReadOnlyExerciseList\u003e readExerciseList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Optional\u003cJacksonExerciseList\u003e jsonExerciseList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                filePath, JacksonExerciseList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (!jsonExerciseList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            return Optional.of(jsonExerciseList.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void saveExerciseList(ReadOnlyExerciseList exerciseList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        saveExerciseList(exerciseList, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Similar to {@link #saveExerciseList(ReadOnlyExerciseList)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void saveExerciseList(ReadOnlyExerciseList exerciseList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        requireNonNull(exerciseList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        JsonUtil.saveJsonFile(new JacksonExerciseList(exerciseList), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 14,
      "jiachen247": 13,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/exercise/util/JacksonExercise.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage.exercise.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "// import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Jackson-friendly version of {@link Exercise}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class JacksonExercise {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final String exerciseName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final List\u003cJacksonExerciseSet\u003e exerciseSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Constructs a {@code JsonAdaptedExercise} with the given exercise details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public JacksonExercise(@JsonProperty(\"exerciseName\") String exerciseName,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            @JsonProperty(\"exerciseSets\") List\u003cJacksonExerciseSet\u003e exerciseSets) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (exerciseSets !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            this.exerciseSets.addAll(exerciseSets);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Converts a given {@code Exercise} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public JacksonExercise(Exercise source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseName \u003d source.getExerciseName().fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        for (ExerciseSet exerciseSet : source.getExerciseSets()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            exerciseSets.add(new JacksonExerciseSet(exerciseSet));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Converts this Jackson-friendly adapted exercise object into the model\u0027s {@code Exercise} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exercise."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Exercise toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (exerciseName \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                    ExerciseName.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } else if (!ExerciseName.isValidExerciseName(exerciseName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new IllegalValueException(ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        final ExerciseName modelExerciseName \u003d new ExerciseName(exerciseName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        final List\u003cExerciseSet\u003e modelExerciseSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        for (JacksonExerciseSet exerciseSet : exerciseSets) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            modelExerciseSets.add(exerciseSet.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Exercise(modelExerciseName, modelExerciseSets);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 28,
      "Guofeng-Tang": 12,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/exercise/util/JacksonExerciseList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage.exercise.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * An Immutable ExerciseList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "@JsonRootName(value \u003d \"exerciselist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class JacksonExerciseList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"Exercises list contains duplicate exercise(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final List\u003cJacksonExercise\u003e exercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Constructs a {@code JsonSerializableExerciseList} with the given exercises."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public JacksonExerciseList(@JsonProperty(\"exercises\") List\u003cJacksonExercise\u003e exercises) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.exercises.addAll(exercises);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Converts a given {@code ReadOnlyExerciseList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableExerciseList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public JacksonExerciseList(ReadOnlyExerciseList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exercises.addAll(source.getExerciseList().stream().map(JacksonExercise::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Converts this exercise list into the model\u0027s {@code ExerciseList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public ExerciseList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ExerciseList exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        for (JacksonExercise jsonAdaptedExercise : exercises) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            Exercise exercise \u003d jsonAdaptedExercise.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            if (exerciseList.hasExercise(exercise)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            exerciseList.addExercise(exercise);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 19,
      "jiachen247": 7,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/exercise/util/JacksonExerciseSet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage.exercise.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.NumReps;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.Weight;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Jackson-friendly version of {@link ExerciseSet}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "class JacksonExerciseSet {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"ExerciseSet\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final String weight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final String numReps;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Constructs a {@code JacksonExerciseSet} with the given {@code exerciseSet}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public JacksonExerciseSet(@JsonProperty(\"weight\") String weight,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            @JsonProperty(\"numReps\") String numReps) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.numReps \u003d numReps;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Converts a given {@code ExerciseSet} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public JacksonExerciseSet(ExerciseSet source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        weight \u003d source.getWeight().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        numReps \u003d source.getNumReps().value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Converts this Jackson-friendly adapted exerciseSet object into the model\u0027s {@code ExerciseSet} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exerciseSet."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ExerciseSet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (weight \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Weight.class.getSimpleName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } else if (!Weight.isValidWeight(weight)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new IllegalValueException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        final Weight modelWeight \u003d new Weight(weight);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (numReps \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, NumReps.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } else if (!NumReps.isValidNumReps(numReps)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new IllegalValueException(NumReps.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        final NumReps modelNumReps \u003d new NumReps(numReps);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new ExerciseSet(modelWeight, modelNumReps);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 61,
      "Guofeng-Tang": 1
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/schedule/ScheduleListStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.storage.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Represents a storage for {@link ScheduleList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public interface ScheduleListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    Path getScheduleListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns ScheduleList data as a {@link ScheduleList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    Optional\u003cScheduleList\u003e readScheduleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @see #getScheduleListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    Optional\u003cScheduleList\u003e readScheduleList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Saves the given {@link ScheduleList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @param scheduleList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    void saveScheduleList(ScheduleList scheduleList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @see #saveScheduleList(ScheduleList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    void saveScheduleList(ScheduleList scheduleList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 45
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/schedule/ScheduleListStorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.storage.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.storage.schedule.util.JacksonScheduleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * A class to access ScheduleList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ScheduleListStorageManager implements ScheduleListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ScheduleListStorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ScheduleListStorageManager(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Path getScheduleListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Optional\u003cScheduleList\u003e readScheduleList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return readScheduleList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Similar to {@link #readScheduleList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Optional\u003cScheduleList\u003e readScheduleList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Optional\u003cJacksonScheduleList\u003e jacksonScheduleList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                filePath, JacksonScheduleList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!jacksonScheduleList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return Optional.of(jacksonScheduleList.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void saveScheduleList(ScheduleList scheduleList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        saveScheduleList(scheduleList, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Similar to {@link #saveScheduleList(ScheduleList)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void saveScheduleList(ScheduleList scheduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(scheduleList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        JsonUtil.saveJsonFile(new JacksonScheduleList(scheduleList), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 81
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/schedule/util/JacksonDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.storage.schedule.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class JacksonDateTime {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"DateTime\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public JacksonDateTime(@JsonProperty(\"dateTime\") String dateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public JacksonDateTime(DateTime source) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        dateTime \u003d source.toString(); // MAY_NOT_WORK"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public DateTime toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        } else if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return new DateTime(dateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 42
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/schedule/util/JacksonSchedule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.storage.schedule.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.OneTimeSchedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.Schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.storage.exercise.util.JacksonExercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class JacksonSchedule {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Schedule\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final JacksonExercise workoutToSchedule; // TO_CHANGE_EXERCISE_TO_WORKOUT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final JacksonDateTime dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Constructs a {@code JsonAdaptedSchedule} with the given schedule details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public JacksonSchedule(@JsonProperty(\"workoutToSchedule\") JacksonExercise workoutToSchedule,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                           @JsonProperty(\"dateTime\") JacksonDateTime dateTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.workoutToSchedule \u003d workoutToSchedule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Converts a given {@code Schedule} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public JacksonSchedule(Schedule source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        OneTimeSchedule oneTimeSchedule \u003d (OneTimeSchedule) source;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        workoutToSchedule \u003d new JacksonExercise(oneTimeSchedule.getWorkoutToSchedule());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        dateTime \u003d new JacksonDateTime(oneTimeSchedule.getDateTime());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // STEPH_TODO: add support for recurring schedule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Converts this Jackson-friendly adapted schedule object into the model\u0027s {@code Schedule} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted schedule."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Schedule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Exercise exercise \u003d workoutToSchedule.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        DateTime dateTime \u003d this.dateTime.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return new OneTimeSchedule(exercise, dateTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 55
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/schedule/util/JacksonScheduleList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.storage.schedule.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.Schedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * An Immutable ScheduleList that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "@JsonRootName(value \u003d \"schedulelist\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class JacksonScheduleList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"Schedules list contains duplicate schedule(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private final List\u003cJacksonSchedule\u003e schedules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Constructs a {@code JsonSerializableScheduleList} with the given schedules."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public JacksonScheduleList(@JsonProperty(\"schedules\") List\u003cJacksonSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.schedules.addAll(schedules);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Converts a given {@code ScheduleList} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableScheduleList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public JacksonScheduleList(ScheduleList source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        schedules.addAll(source.getScheduleList().stream().map(JacksonSchedule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Converts this schedule list into the model\u0027s {@code ScheduleList} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ScheduleList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ScheduleList scheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        for (JacksonSchedule jacksonSchedule : schedules) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            Schedule schedule \u003d jacksonSchedule.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            if (scheduleList.hasSchedule(schedule)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SCHEDULE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            scheduleList.addSchedule(schedule);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduleList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 58
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/userprefs/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Represents a storage for {@link seedu.zerotoone.model.userprefs.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Saves the given {@link seedu.zerotoone.model.userprefs.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/storage/userprefs/UserPrefsStorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class UserPrefsStorageManager implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public UserPrefsStorageManager(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 7,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         * @see seedu.zerotoone.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-w16-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 4,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import seedu.zerotoone.ui.views.exercise.ExerciseListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import seedu.zerotoone.ui.views.home.HomePanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import seedu.zerotoone.ui.views.log.LogListPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.ui.views.schedule.ScheduledWorkoutListPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import seedu.zerotoone.ui.views.workout.WorkoutListPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private HomePanel homePanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private ExerciseListPanel exerciseListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private WorkoutListPanel workoutListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private ScheduledWorkoutListPanel scheduledWorkoutListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private LogListPanel logListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private VBox tabsVBox;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private TabPane tabPanePlaceHolder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private StackPane homeContentPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private StackPane exerciseContentPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private StackPane workoutContentPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private StackPane scheduleContentPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private StackPane logContentPlaceholder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tabPanePlaceHolder.widthProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            tabPanePlaceHolder.setTabMinWidth(newValue.doubleValue() / 5 - 24);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            tabPanePlaceHolder.setTabMinWidth(newValue.doubleValue() / 5 - 24);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        homePanel \u003d new HomePanel();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        homeContentPlaceholder.getChildren().add(homePanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        exerciseListPanel \u003d new ExerciseListPanel(logic.getFilteredExerciseList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        exerciseContentPlaceholder.getChildren().add(exerciseListPanel.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        workoutListPanel \u003d new WorkoutListPanel();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        workoutContentPlaceholder.getChildren().add(workoutListPanel.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduledWorkoutListPanel \u003d new ScheduledWorkoutListPanel(logic.getSortedScheduledWorkoutList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduleContentPlaceholder.getChildren().add(scheduledWorkoutListPanel.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        logListPanel \u003d new LogListPanel();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        logContentPlaceholder.getChildren().add(logListPanel.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tabPanePlaceHolder.setMinWidth(530);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tabPanePlaceHolder.setMinHeight(200);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        VBox.setVgrow(tabPanePlaceHolder, Priority.ALWAYS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @see seedu.zerotoone.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 9,
      "Guofeng-Tang": 6,
      "jiachen247": 51,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/css/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 5,
      "jiachen247": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/util/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/views/exercise/ExerciseCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package seedu.zerotoone.ui.views.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * An UI component that displays information of a {@code Exercise}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ExerciseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final String FXML \u003d \"exercise/ExerciseCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ExerciseList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Label exerciseId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Label exerciseName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private VBox exerciseSets;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ExerciseCard(Exercise exercise, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseId.setText(String.format(\"%d. \", displayedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseName.setText(exercise.getExerciseName().fullName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExerciseSet\u003e exerciseSetsList \u003d exercise.getExerciseSets();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        for (int i \u003d 0; i \u003c exerciseSetsList.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            ExerciseSet exerciseSet \u003d exerciseSetsList.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            ExerciseSetCard exerciseSetCard \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                    new ExerciseSetCard(i, exerciseSet.getNumReps().value, exerciseSet.getWeight().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            this.exerciseSets.getChildren().add(exerciseSetCard.getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!(other instanceof ExerciseCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ExerciseCard card \u003d (ExerciseCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return exerciseId.getText().equals(card.exerciseId.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 exerciseName.getText().equals(card.exerciseName.getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 22,
      "Guofeng-Tang": 5,
      "jiachen247": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/views/exercise/ExerciseListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package seedu.zerotoone.ui.views.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * Panel containing the list of exercises."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ExerciseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final String FXML \u003d \"exercise/ExerciseListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private ListView\u003cExercise\u003e exerciseListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ExerciseListPanel(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        exerciseListView.setItems(exerciseList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        exerciseListView.setCellFactory(listView -\u003e new ExerciseListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Exercise} using a {@code ExerciseCard}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    class ExerciseListViewCell extends ListCell\u003cExercise\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        protected void updateItem(Exercise exercise, boolean empty) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            super.updateItem(exercise, empty);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            if (empty || exercise \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                setGraphic(new ExerciseCard(exercise, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 3,
      "Guofeng-Tang": 12,
      "jiachen247": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/views/exercise/ExerciseSetCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package seedu.zerotoone.ui.views.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * An UI component that displays information of a {@code Exercise}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ExerciseSetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final String FXML \u003d \"exercise/ExerciseSetCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ExerciseList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Label setId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Label numReps;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Label weight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ExerciseSetCard(int setId, String numReps, String weight) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.setId.setText(String.format(\"Set %d. \", setId + 1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.numReps.setText(numReps);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.weight.setText(String.format(\"%skg\", weight));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (!(other instanceof ExerciseSetCard)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseSetCard card \u003d (ExerciseSetCard) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return setId.getText().equals(card.setId.getText())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 numReps.getText().equals(card.numReps.getText())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u0026\u0026 weight.getText().equals(card.weight.getText());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 54,
      "jiachen247": 1
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/views/home/HomePanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package seedu.zerotoone.ui.views.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Panel containing the home page."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class HomePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private static final String FXML \u003d \"home/HomePanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Text homeView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public HomePanel() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 20
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/views/log/LogListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package seedu.zerotoone.ui.views.log;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Panel containing the log page."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class LogListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private static final String FXML \u003d \"log/LogListPanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Text logView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public LogListPanel() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 20
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/views/schedule/ScheduledWorkoutCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.ui.views.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduledWorkout;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ScheduledWorkoutCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private static final String FXML \u003d \"schedule/ScheduledWorkoutCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private Label scheduledWorkoutId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private Label scheduledWorkoutName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ScheduledWorkoutCard(ScheduledWorkout scheduledWorkout, int displayedIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduledWorkoutId.setText(String.format(\"%d. \", displayedIndex));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduledWorkoutName.setText(scheduledWorkout.getScheduledWorkoutName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        if (!(other instanceof ScheduledWorkoutCard)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ScheduledWorkoutCard card \u003d (ScheduledWorkoutCard) other;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return scheduledWorkoutId.getText().equals(card.scheduledWorkoutId.getText())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u0026\u0026 scheduledWorkoutName.getText().equals(card.scheduledWorkoutName.getText());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 46
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/views/schedule/ScheduledWorkoutListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.ui.views.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduledWorkout;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ScheduledWorkoutListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private static final String FXML \u003d \"schedule/ScheduledWorkoutListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private ListView\u003cScheduledWorkout\u003e scheduledWorkoutListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ScheduledWorkoutListPanel(ObservableList\u003cScheduledWorkout\u003e scheduledWorkouts) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduledWorkoutListView.setItems(scheduledWorkouts);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        scheduledWorkoutListView.setCellFactory(listView -\u003e new ScheduledWorkoutListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    class ScheduledWorkoutListViewCell extends ListCell\u003cScheduledWorkout\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        protected void updateItem(ScheduledWorkout scheduledWorkout, boolean empty) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            super.updateItem(scheduledWorkout, empty);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            if (empty || scheduledWorkout \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                setGraphic(new ScheduledWorkoutCard(scheduledWorkout, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 41
    }
  },
  {
    "path": "src/main/java/seedu/zerotoone/ui/views/workout/WorkoutListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package seedu.zerotoone.ui.views.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Panel containing the workout page."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class WorkoutListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private static final String FXML \u003d \"workout/WorkoutListPanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Text workoutView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public WorkoutListPanel() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 20
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        \u003cLabel fx:id\u003d\"exerciseId\" styleClass\u003d\"cell_big_label\" text\u003d\"1. \"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        \u003cLabel fx:id\u003d\"exerciseName\" styleClass\u003d\"cell_big_label\" text\u003d\"Bench Press\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003cVBox fx:id\u003d\"exerciseSets\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alloystory": 10,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "         title\u003d\"ZeroToOne App\" minWidth\u003d\"540\" minHeight\u003d\"720\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003cURL value\u003d\"@css/DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003cURL value\u003d\"@css/Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      \u003cHBox VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      \u003cVBox id\u003d\"tabsVBox\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003cTabPane fx:id\u003d\"tabPanePlaceHolder\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                 VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                 tabClosingPolicy\u003d\"UNAVAILABLE\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                 stylesheets\u003d\"@css/Tab.css\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          \u003cTab text\u003d\"Home\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            \u003cStackPane fx:id\u003d\"homeContentPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          \u003cTab text\u003d\"Exercise\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            \u003cStackPane fx:id\u003d\"exerciseContentPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          \u003cTab text\u003d\"Workout\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            \u003cStackPane fx:id\u003d\"workoutContentPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          \u003cTab text\u003d\"Schedule\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            \u003cStackPane fx:id\u003d\"scheduleContentPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          \u003cTab text\u003d\"Log\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            \u003cStackPane fx:id\u003d\"logContentPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 36,
      "-": 46
    }
  },
  {
    "path": "src/main/resources/view/exercise/ExerciseCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        \u003cLabel fx:id\u003d\"exerciseId\" styleClass\u003d\"cell_big_label\" text\u003d\"1. \"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        \u003cLabel fx:id\u003d\"exerciseName\" styleClass\u003d\"cell_big_label\" text\u003d\"Bench Press\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003cVBox fx:id\u003d\"exerciseSets\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alloystory": 10,
      "-": 28
    }
  },
  {
    "path": "src/main/resources/view/exercise/ExerciseListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "  \u003cListView fx:id\u003d\"exerciseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/exercise/ExerciseSetCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003cLabel fx:id\u003d\"setId\" text\u003d\"Set 1: \" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003cLabel fx:id\u003d\"numReps\" text\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003cLabel text\u003d\" x \" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003cLabel fx:id\u003d\"weight\" text\u003d\"40kg\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alloystory": 13
    }
  },
  {
    "path": "src/main/resources/view/home/HomePanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    \u003cText fx:id\u003d\"homeView\" VBox.vgrow\u003d\"ALWAYS\" text\u003d\"HOME PAGE\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 8
    }
  },
  {
    "path": "src/main/resources/view/log/LogListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    \u003cText fx:id\u003d\"logView\" VBox.vgrow\u003d\"ALWAYS\" text\u003d\"LOG VIEW\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 8
    }
  },
  {
    "path": "src/main/resources/view/schedule/ScheduledWorkoutCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u003cLabel fx:id\u003d\"scheduledWorkoutId\" styleClass\u003d\"cell_big_label\" text\u003d\"1. \"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                \u003cLabel fx:id\u003d\"scheduledWorkoutName\" styleClass\u003d\"cell_big_label\" text\u003d\"Bench Press\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 34
    }
  },
  {
    "path": "src/main/resources/view/schedule/ScheduledWorkoutListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    \u003cListView fx:id\u003d\"scheduledWorkoutListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 2,
      "jiachen247": 6
    }
  },
  {
    "path": "src/main/resources/view/workout/WorkoutListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    \u003cText fx:id\u003d\"workoutView\" VBox.vgrow\u003d\"ALWAYS\" text\u003d\"WORKOUT VIEW\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 8
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        final Index fifthExerciseIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertTrue(fifthExerciseIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertTrue(fifthExerciseIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertTrue(fifthExerciseIndex.equals(fifthExerciseIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(fifthExerciseIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(fifthExerciseIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(fifthExerciseIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "Guofeng-Tang": 7,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"common\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 5,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.EXERCISE_NAME_DESC_BENCH_PRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.CreateCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.ExerciseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.exercise.ExerciseListStorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.storage.schedule.ScheduleListStorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.userprefs.UserPrefsStorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.LogicManagerTestUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseListStorageManager exerciseListStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                new ExerciseListStorageManager(temporaryFolder.resolve(\"exerciseList.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UserPrefsStorageManager userPrefsStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                new UserPrefsStorageManager(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ScheduleListStorageManager scheduleListStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                new ScheduleListStorageManager(temporaryFolder.resolve(\"scheduleList.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                exerciseListStorage,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                scheduleListStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        LogicManagerTestUtil.assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND, logic, model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String helpCommand \u003d HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        LogicManagerTestUtil.assertCommandSuccess(helpCommand, HelpCommand.SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                model, logic, new ModelManager());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Setup LogicManager with JsonExerciseListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseListStorageManager exerciseListStorage \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                new JsonExerciseListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionExerciseList.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UserPrefsStorageManager userPrefsStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                new UserPrefsStorageManager(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ScheduleListStorageManager scheduleListStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                new ScheduleListStorageManager(temporaryFolder.resolve(\"ioExceptionScheduleList.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                exerciseListStorage,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                scheduleListStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String exerciseCreateCommand \u003d ExerciseCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                + CreateCommand.COMMAND_WORD + EXERCISE_NAME_DESC_BENCH_PRESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        expectedModel.addExercise(expectedExercise);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        LogicManagerTestUtil.assertCommandFailure(exerciseCreateCommand, CommandException.class, expectedMessage,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                expectedModel, logic, model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void getFilteredExerciseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExerciseList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static class JsonExerciseListIoExceptionThrowingStub extends ExerciseListStorageManager {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        private JsonExerciseListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        public void saveExerciseList(ReadOnlyExerciseList exerciseList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 95,
      "Guofeng-Tang": 11,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/commands/exercise/CreateCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_OVERHEAD_PRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.getTypicalExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code CreateCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class CreateCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        model \u003d new ModelManager(new UserPrefs(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                getTypicalExerciseList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                new ScheduleList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void execute_newExercise_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise validExercise \u003d new ExerciseBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .withExerciseName(VALID_EXERCISE_NAME_OVERHEAD_PRESS).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new UserPrefs(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                model.getExerciseList(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                model.getScheduleList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        expectedModel.addExercise(validExercise);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        CreateCommand command \u003d new CreateCommand(new ExerciseName(VALID_EXERCISE_NAME_OVERHEAD_PRESS));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertCommandSuccess(command, model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                String.format(CreateCommand.MESSAGE_SUCCESS, validExercise.getExerciseName()), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void execute_duplicateExercise_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        Exercise exerciseInList \u003d model.getExerciseList().getExerciseList().get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertCommandFailure(new CreateCommand(exerciseInList.getExerciseName()), model,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                CreateCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 36,
      "Guofeng-Tang": 7,
      "chishanw": 12
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/commands/exercise/CreateCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_BENCH_PRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.DEADLIFT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gb3h"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.Schedule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduledWorkout;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class CreateCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void constructor_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CreateCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void execute_exerciseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        ModelStubAcceptingExerciseAdded modelStub \u003d new ModelStubAcceptingExerciseAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        CommandResult commandResult \u003d new CreateCommand(new ExerciseName(VALID_EXERCISE_NAME_BENCH_PRESS))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise exerciseBenchPress \u003d new ExerciseBuilder().withExerciseName(VALID_EXERCISE_NAME_BENCH_PRESS).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(String.format(CreateCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                VALID_EXERCISE_NAME_BENCH_PRESS), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(Arrays.asList(exerciseBenchPress), modelStub.exercisesAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void execute_duplicateExercise_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        Exercise validExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        CreateCommand createCommand \u003d new CreateCommand(BENCH_PRESS.getExerciseName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithExercise(validExercise);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                CommandException.class, CreateCommand.MESSAGE_DUPLICATE_EXERCISE, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                createCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        CreateCommand addBenchPressCommand \u003d new CreateCommand(BENCH_PRESS.getExerciseName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        CreateCommand addDeadliftCommand \u003d new CreateCommand(DEADLIFT.getExerciseName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertTrue(addBenchPressCommand.equals(addBenchPressCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        CreateCommand addBenchPressCommandCopy \u003d new CreateCommand(BENCH_PRESS.getExerciseName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertTrue(addBenchPressCommand.equals(addBenchPressCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertFalse(addBenchPressCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertFalse(addBenchPressCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(addBenchPressCommand.equals(addDeadliftCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public Path getExerciseListFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public void setExerciseListFilePath(Path exerciseListFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public void setExerciseList(ReadOnlyExerciseList newData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public ReadOnlyExerciseList getExerciseList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        public boolean isInSession() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gb3h"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        public void startSession(Exercise exerciseToStart, LocalDateTime currentDateTime) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gb3h"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gb3h"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        public void stopSession(LocalDateTime currentDateTime) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gb3h"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gb3h"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // Schedule"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        public void deleteScheduledWorkout(ScheduledWorkout scheduledWorkoutToDelete) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        public ObservableList\u003cScheduledWorkout\u003e getSortedScheduledWorkoutList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        public ScheduleList getScheduleList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * A Model stub that contains a single exercise."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private class ModelStubWithExercise extends ModelStub {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        private final Exercise exercise;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        ModelStubWithExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return this.exercise.isSameExercise(exercise);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * A Model stub that always accept the exercise being added."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private class ModelStubAcceptingExerciseAdded extends ModelStub {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        final ArrayList\u003cExercise\u003e exercisesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return exercisesAdded.stream().anyMatch(exercise::isSameExercise);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            requireNonNull(exercise);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            exercisesAdded.add(exercise);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        public ReadOnlyExerciseList getExerciseList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return new ExerciseList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 47,
      "gb3h": 16,
      "Guofeng-Tang": 30,
      "chishanw": 153
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/commands/exercise/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.getTypicalExerciseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private Model model \u003d new ModelManager(new UserPrefs(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            getTypicalExerciseList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            new ScheduleList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXERCISE_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                exerciseToDelete.getExerciseName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new UserPrefs(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                model.getExerciseList(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                model.getScheduleList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExerciseList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXERCISE_SUCCESS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                exerciseToDelete.getExerciseName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new UserPrefs(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                model.getExerciseList(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                model.getScheduleList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        showNoExercise(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of exercise list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExerciseList().getExerciseList().size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EXERCISE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private void showNoExercise(Model model) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        model.updateFilteredExerciseList(p -\u003e false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertTrue(model.getFilteredExerciseList().isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 57,
      "Guofeng-Tang": 10,
      "chishanw": 51
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/parser/ParserManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.ExerciseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ParserManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final ParserManager parser \u003d new ParserManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_exit() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(parser.parse(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(parser.parse(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_help() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(parser.parse(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(parser.parse(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_exercise() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                parser.parse(ExerciseCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                parser.parse(\"\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                parser.parse(\"unknownCommand\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 50
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/parser/exercise/CreateCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.EXERCISE_NAME_DESC_BENCH_PRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.INVALID_EXERCISE_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_BENCH_PRESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.CreateCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class CreateCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private CreateCommandParser parser \u003d new CreateCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseName expectedExerciseName \u003d new ExerciseName(VALID_EXERCISE_NAME_BENCH_PRESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EXERCISE_NAME_DESC_BENCH_PRESS,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                new CreateCommand(expectedExerciseName));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // missing exercise name prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE, expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, INVALID_EXERCISE_NAME_DESC, ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EXERCISE_NAME_DESC_BENCH_PRESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 46
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/parser/exercise/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.util.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EXERCISE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 8,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/parser/exercise/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.util.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.EXERCISE_NAME_DESC_BENCH_PRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.INVALID_EXERCISE_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_BENCH_PRESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exercise.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_NAME_BENCH_PRESS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, \"-5\" + EXERCISE_NAME_DESC_BENCH_PRESS, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, \"0\" + EXERCISE_NAME_DESC_BENCH_PRESS, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXERCISE_NAME_DESC,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                ExerciseName.MESSAGE_CONSTRAINTS); // invalid exercise name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EXERCISE_NAME_DESC_BENCH_PRESS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                new ExerciseName(VALID_EXERCISE_NAME_BENCH_PRESS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 62,
      "chishanw": 2
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/parser/util/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/logic/parser/util/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.util.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(INDEX_FIRST_EXERCISE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(INDEX_FIRST_EXERCISE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 33
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.DEADLIFT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.PredicateFilterExerciseName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.exercise.ExerciseListBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(new ExerciseList(), new ExerciseList(modelManager.getExerciseList()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        userPrefs.setExerciseListFilePath(Paths.get(\"exercise/list/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        userPrefs.setExerciseListFilePath(Paths.get(\"new/exercise/list/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExerciseListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setExerciseListFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExerciseListFilePath_validPath_setsExerciseListFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Path path \u003d Paths.get(\"exercise/list/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        modelManager.setExerciseListFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(path, modelManager.getExerciseListFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void hasExercise_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExercise(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void hasExercise_exerciseNotInExerciseList_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(modelManager.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void hasExercise_exerciseInExerciseList_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        modelManager.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(modelManager.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void getFilteredExerciseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExerciseList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseList exerciseList \u003d new ExerciseListBuilder().withExercise(BENCH_PRESS).withExercise(DEADLIFT).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ScheduleList scheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseList differentExerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        modelManager \u003d new ModelManager(userPrefs,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                exerciseList,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                scheduleList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(userPrefs,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                exerciseList,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                scheduleList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // different exerciseList -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(userPrefs,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                differentExerciseList,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                scheduleList)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String keyword \u003d BENCH_PRESS.getExerciseName().fullName;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        modelManager.updateFilteredExerciseList(new PredicateFilterExerciseName(keyword));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(userPrefs,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                exerciseList,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                scheduleList)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        modelManager.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        differentUserPrefs.setExerciseListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentUserPrefs,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                exerciseList,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                scheduleList)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 114,
      "Guofeng-Tang": 17,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/model/exercise/ExerciseListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_NUM_REPS_BENCH_PRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_WEIGHT_BENCH_PRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.getTypicalExerciseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ExerciseListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final ExerciseList exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(Collections.emptyList(), exerciseList.getExerciseList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e exerciseList.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void resetData_withValidReadOnlyExerciseList_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseList newData \u003d getTypicalExerciseList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseList.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(newData, exerciseList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void resetData_withDuplicateExercises_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Two exercises with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .withExerciseSet(VALID_WEIGHT_BENCH_PRESS, VALID_NUM_REPS_BENCH_PRESS).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExercise\u003e newExercises \u003d Arrays.asList(BENCH_PRESS, editedBenchPress);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseListStub newData \u003d new ExerciseListStub(newExercises);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e exerciseList.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void hasExercise_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e exerciseList.hasExercise(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void hasExercise_exerciseNotInExerciseList_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(exerciseList.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void hasExercise_exerciseInExerciseList_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseList.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(exerciseList.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void hasExercise_exerciseWithSameIdentityFieldsInExerciseList_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseList.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .withExerciseSet(VALID_WEIGHT_BENCH_PRESS, VALID_NUM_REPS_BENCH_PRESS).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(exerciseList.hasExercise(editedBenchPress));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void getExerciseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e exerciseList.getExerciseList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * A stub ReadOnlyExerciseList whose exercises list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static class ExerciseListStub implements ReadOnlyExerciseList {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        private final ObservableList\u003cExercise\u003e exercises \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseListStub(Collection\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            this.exercises.setAll(exercises);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return exercises;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 101
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/model/exercise/ExerciseNameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ExerciseNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void constructor_invalidExerciseName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseName(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void isValidExerciseName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // null Exercise Name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseName.isValidExerciseName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // invalid Exercise Name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\"deadlift*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // valid Exercise Name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"jumping jacks\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"2 directional elbow circles\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"Bench Press\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"Chest supported and seated cable row\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 38
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/model/exercise/ExerciseTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_DEADLIFT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_NUM_REPS_DEADLIFT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_WEIGHT_DEADLIFT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.DEADLIFT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class ExerciseTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Exercise exercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e exercise.getExerciseSets().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void isSameExercise() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertTrue(BENCH_PRESS.isSameExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(BENCH_PRESS.isSameExercise(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // same name, same attributes -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Exercise editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertTrue(BENCH_PRESS.isSameExercise(editedBenchPress));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .withExerciseName(VALID_EXERCISE_NAME_DEADLIFT)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(BENCH_PRESS.isSameExercise(editedBenchPress));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // different exerciseSet -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .withExerciseSet(VALID_WEIGHT_DEADLIFT, VALID_NUM_REPS_DEADLIFT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertTrue(BENCH_PRESS.isSameExercise(editedBenchPress));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // different name, different exerciseSet -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .withExerciseName(VALID_EXERCISE_NAME_DEADLIFT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .withExerciseSet(VALID_WEIGHT_DEADLIFT, VALID_NUM_REPS_DEADLIFT)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(BENCH_PRESS.isSameExercise(editedBenchPress));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Exercise benchPressCopy \u003d new ExerciseBuilder(BENCH_PRESS).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertTrue(BENCH_PRESS.equals(benchPressCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertTrue(BENCH_PRESS.equals(BENCH_PRESS));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(BENCH_PRESS.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(BENCH_PRESS.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(BENCH_PRESS.equals(DEADLIFT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .withExerciseName(VALID_EXERCISE_NAME_DEADLIFT).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(BENCH_PRESS.equals(editedBenchPress));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        // different exerciseSet -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .withExerciseSet(VALID_WEIGHT_DEADLIFT, VALID_NUM_REPS_DEADLIFT).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(BENCH_PRESS.equals(editedBenchPress));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 23,
      "Guofeng-Tang": 52,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/model/exercise/NumRepsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class NumRepsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new NumReps(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void constructor_invalidNumReps_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String invalidNumReps \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NumReps(invalidNumReps));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void isValidNumReps() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e NumReps.isValidNumReps(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(NumReps.isValidNumReps(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(NumReps.isValidNumReps(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(NumReps.isValidNumReps(\"asdf\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(NumReps.isValidNumReps(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(NumReps.isValidNumReps(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(NumReps.isValidNumReps(\"911\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(NumReps.isValidNumReps(\"93121534\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(NumReps.isValidNumReps(\"124293842033123\")); // long numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 28,
      "chishanw": 11
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/model/exercise/PredicateFilterExerciseNameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class PredicateFilterExerciseNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String firstPredicateKeyword \u003d \"firstPredicate\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String secondPredicateKeyword \u003d \"secondPredicate\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        PredicateFilterExerciseName firstPredicate \u003d new PredicateFilterExerciseName(firstPredicateKeyword);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        PredicateFilterExerciseName secondPredicate \u003d new PredicateFilterExerciseName(secondPredicateKeyword);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        PredicateFilterExerciseName firstPredicateCopy \u003d new PredicateFilterExerciseName(firstPredicateKeyword);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        PredicateFilterExerciseName predicate \u003d new PredicateFilterExerciseName(\"Bench\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withExerciseName(\"Bench Press\").build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Full Keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        predicate \u003d new PredicateFilterExerciseName(\"Bench Press\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withExerciseName(\"Bench Press\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        predicate \u003d new PredicateFilterExerciseName(\"bEnCh\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withExerciseName(\"Bench Press\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        PredicateFilterExerciseName predicate \u003d new PredicateFilterExerciseName(\"Bench\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(predicate.test(new ExerciseBuilder().withExerciseName(\"Deadlift\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 58
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/model/exercise/UniqueExerciseListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_NUM_REPS_BENCH_PRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_WEIGHT_BENCH_PRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.DEADLIFT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.exercise.ExerciseBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class UniqueExerciseListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private final UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void contains_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void contains_exerciseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(uniqueExerciseList.contains(BENCH_PRESS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void contains_exerciseInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(BENCH_PRESS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void contains_exerciseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .withExerciseSet(VALID_WEIGHT_BENCH_PRESS, VALID_NUM_REPS_BENCH_PRESS).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(editedBenchPress));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void add_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void add_duplicateExercise_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.add(BENCH_PRESS));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercise_nullTargetExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercise(null, BENCH_PRESS));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercise_nullEditedExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercise(BENCH_PRESS, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercise_targetExerciseNotInList_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.setExercise(BENCH_PRESS, BENCH_PRESS));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercise_editedExerciseIsSameExercise_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.setExercise(BENCH_PRESS, BENCH_PRESS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        expectedUniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercise_editedExerciseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .withExerciseSet(VALID_WEIGHT_BENCH_PRESS, VALID_NUM_REPS_BENCH_PRESS).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.setExercise(BENCH_PRESS, editedBenchPress);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        expectedUniqueExerciseList.add(editedBenchPress);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercise_editedExerciseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.setExercise(BENCH_PRESS, DEADLIFT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        expectedUniqueExerciseList.add(DEADLIFT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercise_editedExerciseHasNonUniqueIdentity_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.add(DEADLIFT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.setExercise(BENCH_PRESS, DEADLIFT));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void remove_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void remove_exerciseDoesNotExist_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.remove(BENCH_PRESS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void remove_existingExercise_removesExercise() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.remove(BENCH_PRESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercises_nullUniqueExerciseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((UniqueExerciseList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercises_uniqueExerciseList_replacesOwnListWithProvidedUniqueExerciseList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        expectedUniqueExerciseList.add(DEADLIFT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.setExercises(expectedUniqueExerciseList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercises_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((List\u003cExercise\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercises_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExercise\u003e exerciseList \u003d Collections.singletonList(DEADLIFT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        uniqueExerciseList.setExercises(exerciseList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        expectedUniqueExerciseList.add(DEADLIFT);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExercises_listWithDuplicateExercises_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExercise\u003e listWithDuplicateExercises \u003d Arrays.asList(BENCH_PRESS, BENCH_PRESS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                DuplicateExerciseException.class, () -\u003e uniqueExerciseList.setExercises(listWithDuplicateExercises));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            -\u003e uniqueExerciseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 156,
      "Guofeng-Tang": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/model/exercise/WeightTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package seedu.zerotoone.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class WeightTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Weight(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void constructor_invalidWeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String invalidWeight \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Weight(invalidWeight));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void isValidWeight() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Weight.isValidWeight(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(Weight.isValidWeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"abcd\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"1231\")); // more than three digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"911\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"9\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 28,
      "chishanw": 11
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/model/schedule/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "package seedu.zerotoone.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    void isValidDateTime() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"2015-08-12 12:24\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020-02-02 2200\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Guofeng-Tang": 16
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/model/userprefs/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.model.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setExerciseListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setExerciseListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.getTypicalExerciseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.exercise.ExerciseListStorageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.storage.schedule.ScheduleListStorageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.storage.userprefs.UserPrefsStorageManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseListStorageManager exerciseListStorage \u003d new ExerciseListStorageManager("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                getTempFilePath(\"exerciselist\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ScheduleListStorageManager scheduleListStorage \u003d new ScheduleListStorageManager("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                getTempFilePath(\"schedulelist\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UserPrefsStorageManager userPrefsStorage \u003d new UserPrefsStorageManager(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        storageManager \u003d new StorageManager(userPrefsStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                exerciseListStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                scheduleListStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void exerciseListReadSave() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         * {@link JsonExerciseListStorage} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonExerciseListStorageTest} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseList original \u003d getTypicalExerciseList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        storageManager.saveExerciseList(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ReadOnlyExerciseList retrieved \u003d storageManager.readExerciseList().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(original, new ExerciseList(retrieved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void getExerciseListFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertNotNull(storageManager.getExerciseListFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 49,
      "Guofeng-Tang": 6,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/storage/exercise/ExerciseListStorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.OVERHEAD_PRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.getTypicalExerciseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ReadOnlyExerciseList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ExerciseListStorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"exercise\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \"ExerciseListStorageManagerTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void readExerciseList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readExerciseList(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private java.util.Optional\u003cReadOnlyExerciseList\u003e readExerciseList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new ExerciseListStorageManager(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .readExerciseList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertFalse(readExerciseList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseList(\"notJsonFormatExerciseList.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void readExerciseList_invalidExerciseExerciseList_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseList(\"invalidExerciseExerciseList.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void readExerciseList_invalidAndValidExerciseExerciseList_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExerciseList(\"invalidAndValidExerciseExerciseList.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void readAndSaveExerciseList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempExerciseList.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseList original \u003d getTypicalExerciseList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseListStorageManager jsonExerciseListStorage \u003d new ExerciseListStorageManager(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        jsonExerciseListStorage.saveExerciseList(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ReadOnlyExerciseList readBack \u003d jsonExerciseListStorage.readExerciseList(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(original, new ExerciseList(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        original.addExercise(OVERHEAD_PRESS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        original.removeExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        jsonExerciseListStorage.saveExerciseList(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        readBack \u003d jsonExerciseListStorage.readExerciseList(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(original, new ExerciseList(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        original.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        jsonExerciseListStorage.saveExerciseList(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        readBack \u003d jsonExerciseListStorage.readExerciseList().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(original, new ExerciseList(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void saveExerciseList_nullExerciseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExerciseList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Saves {@code exerciseList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private void saveExerciseList(ReadOnlyExerciseList exerciseList, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            new ExerciseListStorageManager(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                    .saveExerciseList(exerciseList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void saveExerciseList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExerciseList(new ExerciseList(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 111
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/storage/exercise/util/JacksonExerciseListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage.exercise.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.exercise.TypicalExercises;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class JacksonExerciseListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"exercise\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \"JacksonExerciseListTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final Path TYPICAL_EXERCISES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExercisesExerciseList.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final Path INVALID_EXERCISE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExerciseExerciseList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final Path DUPLICATE_EXERCISE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateExerciseExerciseList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void toModelType_typicalExercisesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        JacksonExerciseList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXERCISES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                JacksonExerciseList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseList exerciseListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseList typicalExercisesExerciseList \u003d TypicalExercises.getTypicalExerciseList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(exerciseListFromFile, typicalExercisesExerciseList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void toModelType_invalidExerciseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        JacksonExerciseList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXERCISE_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                JacksonExerciseList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void toModelType_duplicateExercises_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        JacksonExerciseList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EXERCISE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                JacksonExerciseList.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(IllegalValueException.class, JacksonExerciseList.MESSAGE_DUPLICATE_EXERCISE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 47
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/storage/exercise/util/JacksonExerciseTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage.exercise.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.storage.exercise.util.JacksonExercise.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class JacksonExerciseTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final String INVALID_EXERCISE_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final List\u003cJacksonExerciseSet\u003e VALID_EXERCISE_SETS \u003d BENCH_PRESS.getExerciseSets().stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .map(JacksonExerciseSet::new)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void toModelType_validExerciseDetails_returnsExercise() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        JacksonExercise exercise \u003d new JacksonExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(BENCH_PRESS, exercise.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void toModelType_invalidExerciseName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        JacksonExercise exercise \u003d new JacksonExercise(INVALID_EXERCISE_NAME, VALID_EXERCISE_SETS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String expectedMessage \u003d ExerciseName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void toModelType_nullExerciseName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        JacksonExercise exercise \u003d new JacksonExercise(null, VALID_EXERCISE_SETS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseName.class.getSimpleName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 42
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/storage/userprefs/UserPrefsStorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.storage.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class UserPrefsStorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"common\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \"UserPrefsStorageManagerTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new UserPrefsStorageManager(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        userPrefs.setExerciseListFilePath(Paths.get(\"exerciselist.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            new UserPrefsStorageManager(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        UserPrefsStorageManager jsonUserPrefsStorage \u003d new UserPrefsStorageManager(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 11,
      "jiachen247": 1,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/testutil/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/testutil/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 15,
      "chishanw": 27
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/testutil/LogicManagerTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Contains helper methods to test LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class LogicManagerTestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            Model expectedModel, Logic logic, Model model) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static void assertParseException(String inputCommand, String expectedMessage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage, logic, model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static void assertCommandException(String inputCommand, String expectedMessage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage, logic, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            String expectedMessage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new UserPrefs(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                model.getExerciseList(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "                model.getScheduleList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel, logic, model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            String expectedMessage, Model expectedModel, Logic logic, Model model) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 69,
      "Guofeng-Tang": 3
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns the middle index of the exercise in the {@code model}\u0027s exercise list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExerciseList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns the last index of the exercise in the {@code model}\u0027s exercise list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns the exercise in the {@code model}\u0027s exercise list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static Exercise getExercise(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return model.getFilteredExerciseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 4,
      "Guofeng-Tang": 7,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Index INDEX_FIRST_EXERCISE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Index INDEX_SECOND_EXERCISE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Index INDEX_THIRD_EXERCISE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/testutil/exercise/ExerciseBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.testutil.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import seedu.zerotoone.model.exercise.NumReps;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import seedu.zerotoone.model.exercise.Weight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * A utility class to help with building Exercise objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class ExerciseBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String DEFAULT_EXERCISE_NAME \u003d \"Bench Press\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private ExerciseName exerciseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private List\u003cExerciseSet\u003e exerciseSets;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ExerciseBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        exerciseName \u003d new ExerciseName(DEFAULT_EXERCISE_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        exerciseSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Initializes the ExerciseBuilder with the data of {@code exerciseToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ExerciseBuilder(Exercise exerciseToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        exerciseName \u003d exerciseToCopy.getExerciseName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        exerciseSets \u003d exerciseToCopy.getExerciseSets();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Sets the {@code ExerciseName} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ExerciseBuilder withExerciseName(String exerciseName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        this.exerciseName \u003d new ExerciseName(exerciseName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Sets the {@code exerciseSet} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public ExerciseBuilder withExerciseSet(String weight, String numReps) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        List\u003cExerciseSet\u003e exerciseSetsCopy \u003d new ArrayList\u003c\u003e(exerciseSets);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        exerciseSetsCopy.add(new ExerciseSet(new Weight(weight), new NumReps(numReps)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        exerciseSets \u003d exerciseSetsCopy;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public Exercise build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return new Exercise(exerciseName, exerciseSets);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 2,
      "Guofeng-Tang": 42,
      "chishanw": 13
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/testutil/exercise/ExerciseCommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.testutil.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.CliSyntax.PREFIX_EXERCISE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.CliSyntax.PREFIX_NUM_OF_REPS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.PredicateFilterExerciseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.testutil.CommandTestUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ExerciseCommandTestUtil extends CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String VALID_EXERCISE_NAME_BENCH_PRESS \u003d \"Bench Press\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String VALID_EXERCISE_NAME_DEADLIFT \u003d \"Deadlift\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String VALID_EXERCISE_NAME_OVERHEAD_PRESS \u003d \"Overhead Press\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String VALID_NUM_REPS_BENCH_PRESS \u003d \"10\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String VALID_NUM_REPS_DEADLIFT \u003d \"5\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String VALID_NUM_REPS_OVERHEAD_PRESS \u003d \"10\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String VALID_WEIGHT_BENCH_PRESS \u003d \"60\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String VALID_WEIGHT_DEADLIFT \u003d \"65\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String VALID_WEIGHT_OVERHEAD_PRESS \u003d \"30\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String EXERCISE_NAME_DESC_BENCH_PRESS \u003d \" \" + PREFIX_EXERCISE_NAME"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + VALID_EXERCISE_NAME_BENCH_PRESS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String EXERCISE_NAME_DESC_DEADLIFT \u003d \" \" + PREFIX_EXERCISE_NAME"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + VALID_EXERCISE_NAME_DEADLIFT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String EXERCISE_NAME_DESC_OVERHEAD_PRESS \u003d \" \" + PREFIX_EXERCISE_NAME"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + VALID_EXERCISE_NAME_OVERHEAD_PRESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String NUM_REPS_DESC_BENCH_PRESS \u003d \" \" + PREFIX_NUM_OF_REPS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + VALID_NUM_REPS_BENCH_PRESS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String NUM_REPS_DESC_DEADLIFT \u003d \" \" + PREFIX_NUM_OF_REPS"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + VALID_NUM_REPS_DEADLIFT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String NUM_REPS_DESC_OVERHEAD_PRESS \u003d \" \" + PREFIX_NUM_OF_REPS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + VALID_NUM_REPS_OVERHEAD_PRESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String WEIGHT_DESC_BENCH_PRESS \u003d \" \" + PREFIX_WEIGHT"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + VALID_WEIGHT_BENCH_PRESS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String WEIGHT_DESC_DEADLIFT \u003d \" \" + PREFIX_WEIGHT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + VALID_WEIGHT_DEADLIFT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String WEIGHT_DESC_OVERHEAD_PRESS \u003d \" \" + PREFIX_WEIGHT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + VALID_WEIGHT_OVERHEAD_PRESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String INVALID_EXERCISE_NAME_DESC \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \" \" + PREFIX_EXERCISE_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String INVALID_NUM_REPS_DESC \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \" \" + PREFIX_NUM_OF_REPS + \"911a\"; // \u0027a\u0027 not allowed in repetitions"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String INVALID_WEIGHT_DESC \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \" \" + PREFIX_WEIGHT + \"911a\"; // \u0027a\u0027 not allowed in weight"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * - the exercise list, filtered exercise list and selected exercise in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ExerciseList expectedExerciseList \u003d new ExerciseList(actualModel.getExerciseList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cExercise\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExerciseList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(expectedExerciseList, actualModel.getExerciseList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExerciseList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the exercise at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * {@code model}\u0027s exercise list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static void showExerciseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Exercise exercise \u003d model.getFilteredExerciseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        final String exerciseName \u003d exercise.getExerciseName().fullName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        model.updateFilteredExerciseList(new PredicateFilterExerciseName(exerciseName));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(1, model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 92
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/testutil/exercise/ExerciseListBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.testutil.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * A utility class to help with building ExerciseList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": " *     {@code ExerciseList exerciseList \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": " *          new ExerciseListBuilder().withExercise(new Exercise(...)).build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class ExerciseListBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private ExerciseList exerciseList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public ExerciseListBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public ExerciseListBuilder(ExerciseList exerciseList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.exerciseList \u003d exerciseList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Adds a new {@code Exercise} to the {@code ExerciseList} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ExerciseListBuilder withExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        exerciseList.addExercise(exercise);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public ExerciseList build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 8,
      "jiachen247": 27
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/testutil/exercise/TypicalExercises.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.testutil.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_BENCH_PRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_DEADLIFT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_OVERHEAD_PRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_NUM_REPS_BENCH_PRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_NUM_REPS_DEADLIFT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_NUM_REPS_OVERHEAD_PRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_WEIGHT_BENCH_PRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_WEIGHT_DEADLIFT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.exercise.ExerciseCommandTestUtil.VALID_WEIGHT_OVERHEAD_PRESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.Exercise;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.model.exercise.ExerciseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": " * A utility class containing a list of {@code Exercise} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "public class TypicalExercises {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    // Manually added - Exercise\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Exercise BENCH_PRESS \u003d new ExerciseBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .withExerciseName(VALID_EXERCISE_NAME_BENCH_PRESS)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .withExerciseSet(VALID_WEIGHT_BENCH_PRESS, VALID_NUM_REPS_BENCH_PRESS)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Exercise DEADLIFT \u003d new ExerciseBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .withExerciseName(VALID_EXERCISE_NAME_DEADLIFT)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .withExerciseSet(VALID_WEIGHT_DEADLIFT, VALID_NUM_REPS_DEADLIFT)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final Exercise OVERHEAD_PRESS \u003d new ExerciseBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .withExerciseName(VALID_EXERCISE_NAME_OVERHEAD_PRESS)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .withExerciseSet(VALID_WEIGHT_OVERHEAD_PRESS, VALID_NUM_REPS_OVERHEAD_PRESS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    private TypicalExercises() {} // prevents instantiation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     * Returns an {@code ExerciseList} with all the typical exercises."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static ExerciseList getTypicalExerciseList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        ExerciseList el \u003d new ExerciseList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        for (Exercise exercise : getTypicalExercises()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "            el.addExercise(exercise);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "        return el;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    public static List\u003cExercise\u003e getTypicalExercises() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BENCH_PRESS, DEADLIFT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Guofeng-Tang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 25,
      "Guofeng-Tang": 22,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/zerotoone/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package seedu.zerotoone.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static seedu.zerotoone.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import seedu.zerotoone.ui.util.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 4,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import seedu.zerotoone.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003cfx:root type\u003d\"seedu.zerotoone.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 5
    }
  }
]
