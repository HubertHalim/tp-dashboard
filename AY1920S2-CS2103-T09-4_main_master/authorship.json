[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    mainClassName \u003d \u0027fithelper.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    compile group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-agenda\u0027, version: \u00279.0-r1\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    compile group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-icalendaragenda\u0027, version: \u00278.0-r6\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    compile group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-icalendarfx\u0027, version: \u002710.0-r1\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    compile \"com.joestelmach:natty:0.12\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    archiveName \u003d \u0027fitHelper v1.2.1.jar\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 7,
      "lm5lm5": 1,
      "-": 155
    }
  },
  {
    "path": "src/main/java/fithelper/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/fithelper/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.model.util.SampleDataUtil.getSampleFitHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.model.util.SampleDataUtil.getSampleUserProfile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyFitHelper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.storage.FitHelperStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.storage.JsonFitHelperStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.storage.JsonUserProfileStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.storage.UserProfileStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.Ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.UiManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    protected FitHelperStorage fitHelperStorage \u003d new JsonFitHelperStorage(Config.FITHELPER_DATA_PATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    protected UserProfileStorage userProfileStorage \u003d new JsonUserProfileStorage(Config.USERPROFILE_DATA_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FitHelper ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        model \u003d initModelManager(fitHelperStorage, userProfileStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        logic \u003d new LogicManager(model, fitHelperStorage, userProfileStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s fithelper and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * The data from the sample fithelper will be used instead if {@code storage}\u0027s fithelper is not found,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * or an empty fithelper will be used instead if errors occur when reading {@code storage}\u0027s fithelper."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Model initModelManager(FitHelperStorage fitHelperStorage, UserProfileStorage userProfileStorage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        // fithelper initialization."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Optional\u003cReadOnlyFitHelper\u003e fitHelperOptional;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        ReadOnlyFitHelper initialData;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            fitHelperOptional \u003d fitHelperStorage.readFitHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (!fitHelperOptional.isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                logger.info(\"FitHelper data file not found. Will be starting with a sample FitHelper\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            initialData \u003d fitHelperOptional.orElseGet(SampleDataUtil::getSampleFitHelper);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            logger.warning(\"FitHelper data file not in the correct format. Will be starting with an empty FitHelper\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            initialData \u003d getSampleFitHelper();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            logger.warning(\"Problem while reading from the fithelper file. Will be starting with an empty FitHelper\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            initialData \u003d getSampleFitHelper();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        // user profile initialization."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Optional\u003cReadOnlyUserProfile\u003e userProfileOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        ReadOnlyUserProfile initialUserProfileData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            userProfileOptional \u003d userProfileStorage.readUserProfile();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            if (!userProfileOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                logger.info(\"User Profile data file not found. Will be starting with a sample User Profile\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            initialUserProfileData \u003d userProfileOptional.orElseGet(SampleDataUtil::getSampleUserProfile);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            logger.warning(\"User Profile data file not in the correct format. \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    + \"Will be starting with an empty User Profile\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            initialUserProfileData \u003d getSampleUserProfile();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            logger.warning(\"Problem while reading from the user profile file. \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    + \"Will be starting with an empty User Profile\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            initialUserProfileData \u003d getSampleUserProfile();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new ModelManager(initialData, initialUserProfileData);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        logger.info(\"Starting FitHelper \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 55,
      "WANG-Yuchen-Alice": 12,
      "-": 39
    }
  },
  {
    "path": "src/main/java/fithelper/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Path of FitHelper data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final Path FITHELPER_DATA_PATH \u003d Paths.get(\"data\", \"fithelper.json\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Path of User Profile data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final Path USERPROFILE_DATA_PATH \u003d Paths.get(\"data\", \"userprofile.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 5,
      "WANG-Yuchen-Alice": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/fithelper/commons/core/FeedbackUtils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Container for user visible feedback messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class FeedbackUtils {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    //Calorie Summary"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String FEEDBACK_CALORIE_NEGATIVE \u003d \"Wow, your sports consumption outweighs your food intake!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String FEEDBACK_CALORIE_TOO_MUCH \u003d \"Knock-knock, too much calories! Let\u0027s keep moving!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String FEEDBACK_CALORIE_DEFAULT \u003d \"Choose healthy food and control your calorie intake~\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    //Task Summary"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String FEEDBACK_TASK_ALL_COMPLETE \u003d \"Well done! You have completed all your sports tasks!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String FEEDBACK_TASL_NONE_COMPLETE \u003d \"Hey, your sports tasks are waiting for you.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String FEEDBACK_TASK_SOME_COMPLETE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \"Exercise more to clear the sports list. You are almost there!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String FEEDBACK_TASK_DEFAULT \u003d \"Remember to do sports to balance your calorie intake~\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 21
    }
  },
  {
    "path": "src/main/java/fithelper/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/fithelper/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final String LOG_FILE \u003d \"fithelper.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "WANG-Yuchen-Alice": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/fithelper/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX \u003d \"The entry index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_FOOD_LISTED_OVERVIEW \u003d \"%1$d food listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_SPORTS_LISTED_OVERVIEW \u003d \"%1$d sports listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 3,
      "WANG-Yuchen-Alice": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/fithelper/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/fithelper/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/fithelper/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/fithelper/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/fithelper/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/fithelper/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/fithelper/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/fithelper/commons/util/EventUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.icalendarfx.properties.component.descriptive.Categories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * A class for accessing and modifying VEvent."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class EventUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static final String PINK \u003d \"group21\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static final String GREY \u003d \"group18\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static final String BLUE \u003d \"group13\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Maps event to VEvent"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static VEvent entryToVEvent(Entry entry) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        VEvent vEvent \u003d new VEvent();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        vEvent.setDateTimeStart(entry.getDateTime());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        vEvent.setDateTimeEnd(entry.getDateTime().plusHours(entry.getHours()).plusMinutes(entry.getMinutes()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        StringBuilder summary \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        summary.append(entry.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        summary.append(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        summary.append(entry.getLocation());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        summary.append(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        summary.append(entry.getCalorie());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        vEvent.setSummary(summary.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        vEvent.setUniqueIdentifier(getUniqueIdentifier(entry));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (entry.isDone()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            Categories categories \u003d new Categories();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            // pink color in iCalendarAgenda"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            categories.setValue(List.of(GREY));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            vEvent.setCategories(List.of(categories));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            Categories categories \u003d new Categories();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            // pink color in iCalendarAgenda"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (entry.isFood()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                categories.setValue(List.of(PINK));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                categories.setValue(List.of(BLUE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            vEvent.setCategories(List.of(categories));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return vEvent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static String getUniqueIdentifier(Entry entry) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        StringBuilder tmp \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        tmp.append(entry.getName().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        tmp.append(entry.getDateTime());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        tmp.append(\"-\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        tmp.append(entry.getDateTime().plusMinutes(30));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return tmp.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 58
    }
  },
  {
    "path": "src/main/java/fithelper/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/fithelper/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/fithelper/commons/util/ModeUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * Sets up the mode for calendar view"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class ModeUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Check whether the mode is timetable view or list view"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param mode string equals to \u0027tb\u0027 or \u0027ls\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static void checkMode(String mode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String trimmedMode \u003d mode.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        checkArgument(!trimmedMode.isEmpty(), \"Mode cannot be empty\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        checkArgument(\"tb\".equals(trimmedMode) || \"ls\".equals(trimmedMode), \"Mode can only be tb or ls\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 20
    }
  },
  {
    "path": "src/main/java/fithelper/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/fithelper/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyFitHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns the FitHelper."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @see fithelper.model.Model#getFitHelper()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    ReadOnlyFitHelper getFitHelper();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns the User Profile."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @see fithelper.model.Model#getUserProfile()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    ReadOnlyUserProfile getUserProfile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    ObservableList\u003cVEvent\u003e getVEvents();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of food entries*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    ObservableList\u003cDiary\u003e getFilteredDiaryList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of food entries*/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredFoodEntryList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of sports entries*/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredSportsEntryList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of sports entries*/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredReminderEntryList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of food entries*/"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredTodayFoodEntryList(String dateStr);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of sports entries*/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredTodaySportsEntryList(String dateStr);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    LocalDateTime getCalendarDate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    String getCalendarMode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 11,
      "IYVVVVV": 22,
      "WANG-Yuchen-Alice": 14,
      "-": 20
    }
  },
  {
    "path": "src/main/java/fithelper/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.FitHelperParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyFitHelper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.storage.FitHelperStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.storage.UserProfileStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String FITHELPER_FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to fithelper file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String USERPROFILE_FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to user profile file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final FitHelperStorage fitHelperStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final UserProfileStorage userProfileStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final FitHelperParser fitHelperParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public LogicManager(Model model, FitHelperStorage fitHelperStorage, UserProfileStorage userProfileStorage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.fitHelperStorage \u003d fitHelperStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.userProfileStorage \u003d userProfileStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.fitHelperParser \u003d new FitHelperParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Command command \u003d fitHelperParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        // save entry data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            fitHelperStorage.saveFitHelper(model.getFitHelper());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            logger.severe(ioe.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new CommandException(FITHELPER_FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        // save user profile data"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            userProfileStorage.saveUserProfile(model.getUserProfile());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            logger.severe(ioe.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new CommandException(USERPROFILE_FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ReadOnlyFitHelper getFitHelper() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return model.getFitHelper();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ReadOnlyUserProfile getUserProfile() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return model.getUserProfile();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cDiary\u003e getFilteredDiaryList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return model.getFilteredDiaryList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredFoodEntryList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return model.getFilteredFoodEntryList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredSportsEntryList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return model.getFilteredSportsEntryList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredReminderEntryList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return model.getFilteredReminderEntryList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredTodayFoodEntryList(String dateStr) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return model.getFilteredTodayFoodEntryList(dateStr);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredTodaySportsEntryList(String dateStr) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return model.getFilteredTodaySportsEntryList(dateStr);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public ObservableList\u003cVEvent\u003e getVEvents() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return model.getVEvents();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public LocalDateTime getCalendarDate() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return model.getCalendarDate();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public String getCalendarMode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return model.getCalendarMode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 20,
      "IYVVVVV": 44,
      "WANG-Yuchen-Alice": 26,
      "-": 37
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Adds a entry to FitHelper."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an entry to FitHelper. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_CALORIE + \"CALORIE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_TYPE + \"food\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_NAME + \"noodles\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + PREFIX_TIME + \"2020-03-01 15:30\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_LOCATION + \"Utown canteen\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_CALORIE + \"100.5\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + PREFIX_REMARK + \"too expensive\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + PREFIX_DURATION + \"1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Entry added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in FitHelper\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static final String MESSAGE_TIME_CLASHES \u003d \"Maximum two entries can have time clashes\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Entry toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Entry}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public AddCommand(Entry entry) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        toAdd \u003d entry;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (model.hasEntry(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (model.hasTimeClashes(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            throw new CommandException(MESSAGE_TIME_CLASHES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        model.addEntry(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        model.addVEvent(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 19,
      "IYVVVVV": 26,
      "-": 34
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/CalendarCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.commands.CommandResult.DisplayedPage.CALENDAR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Adds a entry to FitHelper."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the calendar view. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + \"Parameters (Optional): \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + PREFIX_MODE + \"MODE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + PREFIX_DATE + \"tmr\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + PREFIX_MODE + \"list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Now you are at Calendar Page ~\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private String dateToSet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private String mode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (dateToSet !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            model.setCalendarDate(dateToSet);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (mode !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            model.setCalendarMode(mode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String mode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (model.getCalendarMode().equals(\"ls\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            mode \u003d \"list\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            mode \u003d \"timetable\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS + \"Reference Date: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                + model.getCalendarDate().toLocalDate())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                + \"\\nMode: \" + mode, CALENDAR, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.dateToSet \u003d date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setMode(String mode) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof CalendarCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 37,
      "WANG-Yuchen-Alice": 27
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/CheckCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_KEYWORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.model.calorietable.CalorieEntry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.model.entry.Type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * Search the pre-defined data for calorie intake/consumption of a food/sports."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class CheckCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"check\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": search for calorie intake/consumption \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"of a food/sports from pre-defined dataset.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Parameters: \" + PREFIX_TYPE + \"TYPE\" + PREFIX_KEYWORD + \"KEYWORD\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Matching reference data:\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static final String MESSAGE_FAILURE_PART1 \u003d \"Sorry, no matching reference data in the \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static final String MESSAGE_FAILURE_PART2 \u003d \" category for the given keyword: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static final String MESSAGE_HINT \u003d \"Note: at most 3 records are shown.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Type checkType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String keywords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public CheckCommand(Type checkType, String keywords) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.checkType \u003d checkType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Type getCheckType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return checkType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String getKeywords() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else if (obj instanceof CheckCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            CheckCommand other \u003d (CheckCommand) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return keywords.equals(other.getKeywords()) \u0026\u0026 checkType.equals(other.getCheckType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String typeValue \u003d checkType.getValue();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        List\u003c? extends CalorieEntry\u003e result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (\"food\".equals(typeValue)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            result \u003d model.searchFoodCalorieTable(keywords);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            result \u003d model.searchSportsCalorieTable(keywords);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (result.size() \u003e 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String userFeedback \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            for (CalorieEntry entry : result) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                userFeedback +\u003d entry;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            userFeedback +\u003d MESSAGE_HINT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return new CommandResult(userFeedback);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE_PART1 + checkType"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    + MESSAGE_FAILURE_PART2 + keywords + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 80
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.FitHelper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Fit Helper log book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        model.setFitHelper(new FitHelper());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 4,
      "WANG-Yuchen-Alice": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 2,
      "IYVVVVV": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.commands.CommandResult.DisplayedPage.HOME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static javafx.application.Platform.exit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private DisplayedPage displayedPage \u003d HOME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult(String feedbackToUser, DisplayedPage displayedPage, boolean exit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.displayedPage \u003d requireNonNull(displayedPage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (this.exit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult(String feedbackToUser, DisplayedPage displayedPage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this(feedbackToUser, displayedPage, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean exit) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (this.exit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this(feedbackToUser, HOME, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DisplayedPage getDisplayedPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return displayedPage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.exit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Objects.hash(feedbackToUser, displayedPage, exit);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return \"FeedbackUtils: \" + feedbackToUser + \"; \" + \"Display Page: \" + displayedPage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The page shown to the user."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public enum DisplayedPage {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        HOME,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        TODAY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        DIARY,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        CALENDAR,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        REPORT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        PROFILE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        WEIGHT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        HELP"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 2,
      "WANG-Yuchen-Alice": 51,
      "-": 58
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Deletes a entry identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \": Deletes the entry identified by the index number used in the displayed entry list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_TYPE + \"food \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Entry: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Type deleteType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public DeleteCommand(Type deleteType, Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.deleteType \u003d deleteType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        List\u003cEntry\u003e lastShownList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (deleteType.equals(new Type(\"food\"))) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            lastShownList \u003d model.getFilteredFoodEntryList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            lastShownList \u003d model.getFilteredSportsEntryList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Entry entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        model.deleteEntry(entryToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        model.deleteVevent(entryToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 1,
      "IYVVVVV": 26,
      "WANG-Yuchen-Alice": 5,
      "-": 36
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Calorie;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Status;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Edits the details of an existing entry in the location book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the entry identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"by the index number used in the displayed entry list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"[\" + PREFIX_CALORIE + \"CALORIE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"[\" + PREFIX_STATUS + \"STATUS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK]\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_TYPE + \"sports \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_NAME + \"running \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + PREFIX_STATUS + \"Done\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + PREFIX_DURATION + \"1.5\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Edited Entry: %1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the location book.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static final String MESSAGE_TIME_CLASHES \u003d \"Maximum two entries can have time clashes\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final EditEntryDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param index of the entry in the filtered entry list to edit"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param editEntryDescriptor details to edit the entry with"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public EditCommand(Index index, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(editEntryDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.editEntryDescriptor \u003d new EditEntryDescriptor(editEntryDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        List\u003cEntry\u003e lastShownList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (editEntryDescriptor.getType().equals(new Type(\"food\"))) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            lastShownList \u003d model.getFilteredFoodEntryList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            lastShownList \u003d model.getFilteredSportsEntryList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Entry entryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Entry editedEntry \u003d createEditedEntry(entryToEdit, editEntryDescriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!entryToEdit.isSameEntry(editedEntry) \u0026\u0026 model.hasEntry(editedEntry)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (model.hasTimeClashes(entryToEdit)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            throw new CommandException(MESSAGE_TIME_CLASHES);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        model.setEntry(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        model.setVevent(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        //model.updateFil"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Creates and returns a {@code Entry} with the details of {@code entryToEdit}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * edited with {@code editEntryDescriptor}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private static Entry createEditedEntry(Entry entryToEdit, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        assert entryToEdit !\u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Type updatedType \u003d editEntryDescriptor.getType();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Name updatedName \u003d editEntryDescriptor.getName().orElse(entryToEdit.getName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Time updatedTime \u003d editEntryDescriptor.getTime().orElse(entryToEdit.getTime());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Location updatedLocation \u003d editEntryDescriptor.getLocation().orElse(entryToEdit.getLocation());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Calorie updatedCalorie \u003d editEntryDescriptor.getCalorie().orElse(entryToEdit.getCalorie());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Status updatedStatus \u003d editEntryDescriptor.getStatus().orElse(entryToEdit.getStatus());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Remark updatedRemark \u003d editEntryDescriptor.getRemark().orElse(entryToEdit.getRemark());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        Duration updatedDuration \u003d editEntryDescriptor.getDuration().orElse(entryToEdit.getDuration());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Entry(updatedType, updatedName, updatedTime, updatedLocation, updatedCalorie, updatedStatus,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                updatedRemark, updatedDuration);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 editEntryDescriptor.equals(e.editEntryDescriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Stores the details to edit the entry with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * corresponding field value of the entry."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static class EditEntryDescriptor {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private Calorie calorie;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private Status status;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        private Duration duration;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public EditEntryDescriptor() {}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "         * A defensive copy of {@code status} is used internally."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public EditEntryDescriptor(EditEntryDescriptor toCopy) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setCalorie(toCopy.calorie);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            setDuration(toCopy.duration);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, time, location, calorie, status, remark, duration);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setType(Type type) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Type getType() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return this.type;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setCalorie(Calorie calorie) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Optional\u003cCalorie\u003e getCalorie() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.ofNullable(calorie);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setStatus(Status status) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        public void setDuration(Duration duration) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        public Optional\u003cDuration\u003e getDuration() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            return Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            if (!(other instanceof EditEntryDescriptor)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            EditEntryDescriptor e \u003d (EditEntryDescriptor) other;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getType().equals(e.getType())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getStatus().equals(e.getStatus())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getCalorie().equals(e.getCalorie())"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 26,
      "IYVVVVV": 120,
      "WANG-Yuchen-Alice": 16,
      "-": 114
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String COMMAND_WORD_1 \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"quit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String COMMAND_WORD_3 \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 3,
      "IYVVVVV": 2,
      "WANG-Yuchen-Alice": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.commands.CommandResult.DisplayedPage.HOME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Finds and lists all entries in fitHelper whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all entries whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_TYPE + \"TYPE (optional)\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_KEYWORD + \"[keyword list]\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_TYPE + \"sports \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_KEYWORD + \"noodles \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final NameContainsKeywordsPredicate vaguePredicate \u003d NameContainsKeywordsPredicate.getVaguePredicate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final Type findType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.findType \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public FindCommand(Type findType, NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.findType \u003d findType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (this.findType \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            model.updateFilteredEntryList(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            feedback \u003d String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW, model.getFilteredFoodEntryList().size())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    + String.format(Messages.MESSAGE_SPORTS_LISTED_OVERVIEW, model.getFilteredSportsEntryList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (this.findType.value.equalsIgnoreCase(\"food\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                model.updateFilteredFoodEntryList(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                model.updateFilteredSportEntryList(vaguePredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                feedback \u003d String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        model.getFilteredFoodEntryList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                model.updateFilteredSportEntryList(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                model.updateFilteredFoodEntryList(vaguePredicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                feedback \u003d String.format(Messages.MESSAGE_SPORTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        model.getFilteredSportsEntryList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new CommandResult(feedback, HOME, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 9,
      "WANG-Yuchen-Alice": 35,
      "-": 31
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.commands.CommandResult.DisplayedPage.HELP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Adds a entry to FitHelper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the help page. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Now you are at Help Page ~\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), HELP, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof HelpCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 2,
      "WANG-Yuchen-Alice": 14,
      "-": 14
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/HomeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.commands.CommandResult.DisplayedPage.HOME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Switches to the Home Page."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the Home Page. \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Now you are at Home Page ~\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), HOME, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof HomeCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 32
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all entries\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all entries specified by the date keyword.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"If not specified, all entries in chronological order are displayed.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_DATE + \"Date (optional)\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_DATE + \"2020-03-25 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final String dateStr;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ListCommand(String dateStr) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (this.dateStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            model.updateFilteredEntryList(model.someDatePredicate(this.dateStr));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 5,
      "WANG-Yuchen-Alice": 21,
      "-": 17
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/ProfileCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.commands.CommandResult.DisplayedPage.PROFILE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Adds a entry to FitHelper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class ProfileCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"profile\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the user profile page. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Now you are at User Profile Page ~\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), PROFILE, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof ProfileCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 30
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/ReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.commands.CommandResult.DisplayedPage.HOME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Displays the reminders stored by FitHelper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the pending plans. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Now you can view all undone tasks ~\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), HOME, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof ReminderCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 30
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/ReportCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.commands.CommandResult.DisplayedPage.REPORT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Adds a entry to FitHelper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class ReportCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays weekly report page. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Now you are at Weekly Report Page ~\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), REPORT, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof ReportCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 30
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/TodayCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.commands.CommandResult.DisplayedPage.TODAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Adds a entry to FitHelper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class TodayCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"today\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays today page. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Now you are at Today Page ~\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), TODAY, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof TodayCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 30
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.FLAG_FORCE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_ATTRIBUTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_VALUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Age;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Height;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Profile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.TargetWeight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.weight.Bmi;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.weight.WeightValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Edits the details of an existing value in the age book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Update the value of the profile attribute identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"by given the profile attribute name. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"Existing values will be overwritten by the input values only with flag -f.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"[\" + FLAG_FORCE + \"(if force to update)] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"[\" + PREFIX_ATTRIBUTE + \"ATTRIBUTE_NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"[\" + PREFIX_VALUE + \"NEW_VALUE]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + FLAG_FORCE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_ATTRIBUTE + \"Target weight\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + PREFIX_VALUE + \"49.0\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_UPDATE_VALUE_SUCCESS \u003d \"Your profile has been successfully updated!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_NOT_UPDATED \u003d \"You are not updating any attribute in your profile.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VALUE \u003d \"Are you sure to overwrite your original value? \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            + \"If so, use flag \" + FLAG_FORCE + \" to force updating.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final UpdateValueDescriptor updateProfileDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param updateProfileDescriptor details to update the value with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public UpdateCommand(UpdateValueDescriptor updateProfileDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(updateProfileDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.updateProfileDescriptor \u003d new UpdateValueDescriptor(updateProfileDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        boolean isForced \u003d updateProfileDescriptor.getBoolean();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Profile originalProfile \u003d model.getUserProfile().getUserProfile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Profile updatedProfile \u003d createUpdatedProfile(originalProfile, updateProfileDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (originalProfile.equals(updatedProfile)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        // case where updates required but exists original value."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!isForced) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VALUE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        model.setUserProfile(updatedProfile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_VALUE_SUCCESS, updatedProfile),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                CommandResult.DisplayedPage.PROFILE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Creates and returns a {@code Profile} with the details of {@code originalProfile}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * updated with {@code updateProfileDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private static Profile createUpdatedProfile(Profile originalProfile,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                                UpdateValueDescriptor updateProfileDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        assert originalProfile !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Name updatedName \u003d updateProfileDescriptor.getName().orElse(originalProfile.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Gender updatedGender \u003d updateProfileDescriptor.getGender().orElse(originalProfile.getGender());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Age updatedAge \u003d updateProfileDescriptor.getAge().orElse(originalProfile.getAge());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Address updatedAddress \u003d updateProfileDescriptor.getAddress().orElse(originalProfile.getAddress());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Height updatedHeight \u003d updateProfileDescriptor.getHeight().orElse(originalProfile.getHeight());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        TargetWeight updatedTargetWeight \u003d updateProfileDescriptor.getTargetWeight()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .orElse(originalProfile.getTargetWeight());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        WeightValue updatedWeightValue \u003d originalProfile.getCurrentWeight();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Bmi updatedBmi \u003d originalProfile.getCurrentBmi();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Profile(updatedName, updatedGender, updatedAge, updatedAddress, updatedHeight,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                updatedTargetWeight, updatedWeightValue, updatedBmi);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return updateProfileDescriptor.equals(e.updateProfileDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Stores the details to update the value with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * corresponding field value of the value only if it is a forced updating."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static class UpdateValueDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private boolean isForced;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private Age age;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private Height height;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        private TargetWeight targetWeight;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public UpdateValueDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public UpdateValueDescriptor(UpdateValueDescriptor toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setBoolean(toCopy.isForced);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setAge(toCopy.age);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setHeight(toCopy.height);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            setTargetWeight(toCopy.targetWeight);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "         * Returns true if at least one field is updated."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public boolean isAnyFieldUpdated() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, gender, age, address, height, targetWeight);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setBoolean(boolean isForced) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.isForced \u003d isForced;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public boolean getBoolean() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return this.isForced;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setAge(Age age) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.age \u003d age;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Optional\u003cAge\u003e getAge() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.ofNullable(age);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setHeight(Height height) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.height \u003d height;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Optional\u003cHeight\u003e getHeight() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.ofNullable(height);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public void setTargetWeight(TargetWeight targetWeight) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public Optional\u003cTargetWeight\u003e getTargetWeight() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.ofNullable(targetWeight);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            if (!(other instanceof UpdateValueDescriptor)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            UpdateValueDescriptor e \u003d (UpdateValueDescriptor) other;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getBoolean() \u003d\u003d (e.getBoolean())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getAge().equals(e.getAge())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getHeight().equals(e.getHeight())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 getTargetWeight().equals(e.getTargetWeight());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 236
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/WeightCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.commands.CommandResult.DisplayedPage.WEIGHT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Adds a entry to FitHelper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class WeightCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"weight\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the user\u0027s weight records. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Now you are at Weight Records Page ~\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), WEIGHT, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof WeightCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 30
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/diary/AddDiaryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.commands.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DIARYCONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Adds a diary to FitHelper."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class AddDiaryCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addDiary\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a diary to FitHelper. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_DIARYCONTENT + \"DIARY CONTENT \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_DATE + \"2020-03-31\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_DIARYCONTENT + \"Today is my birthday. I ate a huge birthday cake, but I also went to the gym with\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \" my friends. Everything was just perfect. In my twenty, I\u0027m gonna turn heat up.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Diary added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DIARY \u003d \"This diary already exists in FitHelper\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final Diary toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates an AddDiaryCommand to add the specified {@code Diary}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public AddDiaryCommand(Diary diary) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(diary);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        toAdd \u003d diary;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (model.hasDiary(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DIARY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        model.addDiary(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandResult.DisplayedPage.DIARY, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof AddDiaryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddDiaryCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 62
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/diary/DiaryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.commands.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.commands.CommandResult.DisplayedPage.DIARY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Adds a entry to FitHelper."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class DiaryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"diary\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays diary page. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Now you are at Diary Page ~\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), DIARY, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof DiaryCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 32
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/diary/EditDiaryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.commands.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DIARYCONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.model.Model.PREDICATE_SHOW_ALL_DIARIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.DiaryDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Edits the details of an existing diary in the location book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class EditDiaryCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editDiary\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the diary identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"by the index number used in the displayed diary list. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_DIARYCONTENT + \"DIARY CONTENT \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_DATE + \"2020-03-31\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + PREFIX_DIARYCONTENT + \"Today is my birthday. I ate a huge birthday cake, but I also went to the gym with\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            + \" my friends. Everything was just perfect. In my twenty, I\u0027m gonna turn heat up.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_EDIT_DIARY_SUCCESS \u003d \"Edited Diary: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DIARY \u003d \"This diary already exists in fitHelper.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final String diaryId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final EditDiaryDescriptor editDiaryDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param diaryId of the diary in the filtered diary list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param editDiaryDescriptor details to edit the diary with"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public EditDiaryCommand(String diaryId, EditDiaryDescriptor editDiaryDescriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(diaryId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(editDiaryDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diaryId \u003d diaryId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.editDiaryDescriptor \u003d new EditDiaryDescriptor(editDiaryDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String getDiaryId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return diaryId;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public EditDiaryDescriptor getEditDiaryDescriptor() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return editDiaryDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Diary editedDiary \u003d createEditedDiary(diaryId, editDiaryDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        model.setDiary(diaryId, editedDiary);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        model.updateFilteredDiaryList(PREDICATE_SHOW_ALL_DIARIES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        //model.updateFil"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DIARY_SUCCESS, editedDiary),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                CommandResult.DisplayedPage.DIARY, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates and returns a {@code Diary} with the details of {@code diaryToEdit}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * edited with {@code editDiaryDescriptor}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static Diary createEditedDiary(String diaryId, EditDiaryDescriptor editDiaryDescriptor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        assert diaryId !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        DiaryDate updatedDiaryDate \u003d editDiaryDescriptor.getDiaryDate();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Content updatedContent \u003d editDiaryDescriptor.getContent();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new Diary(updatedDiaryDate, updatedContent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!(other instanceof EditDiaryCommand)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        EditDiaryCommand e \u003d (EditDiaryCommand) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return diaryId.equals(e.diaryId)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 editDiaryDescriptor.equals(e.editDiaryDescriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Stores the details to edit the diary with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * corresponding field value of the diary."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static class EditDiaryDescriptor {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        private DiaryDate diaryDate;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        private Content content;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        public EditDiaryDescriptor() {}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         * A defensive copy of {@code status} is used internally."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        public EditDiaryDescriptor(EditDiaryDescriptor toCopy) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            setDiaryDate(toCopy.diaryDate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            setContent(toCopy.content);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        public DiaryDate getDiaryDate() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return diaryDate;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        public Content getContent() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return content;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return CollectionUtil.isAnyNonNull(diaryDate, content);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        public void setDiaryDate(DiaryDate diaryDate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            this.diaryDate \u003d diaryDate;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        public DiaryDate getType() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return this.diaryDate;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        public void setContent(Content content) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            this.content \u003d content;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (!(other instanceof EditDiaryDescriptor)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            EditDiaryCommand.EditDiaryDescriptor e \u003d (EditDiaryCommand.EditDiaryDescriptor) other;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return diaryDate.getDiaryDate().equals(e.getDiaryDate())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u0026\u0026 getContent().equals(e.getContent());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 169
    }
  },
  {
    "path": "src/main/java/fithelper/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Calorie;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NAME, PREFIX_TIME, PREFIX_LOCATION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        PREFIX_CALORIE, PREFIX_REMARK, PREFIX_DURATION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE, PREFIX_NAME, PREFIX_TIME, PREFIX_LOCATION, PREFIX_CALORIE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Calorie calorie \u003d ParserUtil.parseCalorie(argMultimap.getValue(PREFIX_CALORIE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).orElse(\"1\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        Entry entry \u003d new Entry(type, name, time, location, calorie, remark, duration);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new AddCommand(entry);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 5,
      "IYVVVVV": 26,
      "-": 34
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/CalendarParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_MODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * Parse the command for calendar"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class CalendarParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     *  Returns calendarCommand after setting the date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private CalendarCommand calendarCommand(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        CalendarCommand calendarCommand \u003d new CalendarCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            calendarCommand.setDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODE).isPresent()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            calendarCommand.setMode(argMultimap.getValue(PREFIX_MODE).get());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return calendarCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Parse the args by prefix_date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param args string containing user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @return ArgumentMultimap with mapped parameters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public CalendarCommand parse(String args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                .tokenize(args, PREFIX_DATE, PREFIX_MODE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_MODE).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            return calendarCommand(argMultimap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            argMultimap.put(PREFIX_MODE, \"tb\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            return calendarCommand(argMultimap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_MODE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            argMultimap.put(PREFIX_DATE, LocalDateTime.now().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            return calendarCommand(argMultimap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            argMultimap.put(PREFIX_DATE, LocalDateTime.now().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            argMultimap.put(PREFIX_MODE, \"tb\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            return calendarCommand(argMultimap);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 53
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/CheckCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import static fithelper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.logic.commands.CheckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.model.entry.Type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * Parses input arguments and creates a new CheckCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class CheckCommandParser implements Parser\u003cCheckCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public CheckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_KEYWORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_KEYWORD)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Type checkType \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String keyword \u003d argMultimap.getValue(PREFIX_KEYWORD).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return new CheckCommand(checkType, keyword);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 39
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/CliSyntaxUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class CliSyntaxUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final Prefix PREFIX_CALORIE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final Prefix PREFIX_KEYWORD \u003d new Prefix(\"k/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static final Prefix PREFIX_MODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final Prefix PREFIX_DIARYCONTENT \u003d new Prefix(\"dc/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"dr/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final Prefix PREFIX_ATTRIBUTE \u003d new Prefix(\"attr/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final Prefix PREFIX_VALUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /* Flag definitions */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final Flag FLAG_FORCE \u003d new Flag(\"-f\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 1,
      "IYVVVVV": 14,
      "WANG-Yuchen-Alice": 5,
      "-": 9
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE, PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Type deleteType \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return new DeleteCommand(deleteType, index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Tests the function of DeleteCommandParser. Should be removed after the degugging."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param args user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void parsePrint(String args) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE, PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        System.out.println(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Type deleteType \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        System.out.println(\"delete type: \" + deleteType.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        System.out.println(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            System.out.println(\"index: \" + index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 28,
      "WANG-Yuchen-Alice": 31,
      "-": 21
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/DiaryCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.diary.DiaryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Parses input arguments and creates a new TpdayCommand object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class DiaryCommandParser implements Parser\u003cDiaryCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TpdayCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * and returns an TpdayCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DiaryCommand parse(String args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new DiaryCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 18
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_REMARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private EditEntryDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NAME, PREFIX_TIME, PREFIX_LOCATION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        PREFIX_CALORIE, PREFIX_STATUS, PREFIX_REMARK, PREFIX_INDEX, PREFIX_DURATION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        editEntryDescriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        editEntryDescriptor.setType(ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setLocation();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setCalorie();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setStatus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setRemark();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        setDuration();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!editEntryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new EditCommand(index, editEntryDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * For debugging purpose, should remove after fully configured."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param args user input string"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void parsePrint(String args) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NAME, PREFIX_TIME, PREFIX_LOCATION,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                PREFIX_CALORIE, PREFIX_STATUS, PREFIX_REMARK, PREFIX_INDEX, PREFIX_DURATION);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        editEntryDescriptor \u003d new EditEntryDescriptor();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        editEntryDescriptor.setType(ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setName();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setTime();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setLocation();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setCalorie();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setStatus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setRemark();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        setDuration();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!editEntryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        //return new EditCommand(index, editEntryDescriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setName() throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            editEntryDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setTime() throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            editEntryDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setLocation() throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            editEntryDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setCalorie() throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIE).isPresent()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            editEntryDescriptor.setCalorie(ParserUtil.parseCalorie(argMultimap.getValue(PREFIX_CALORIE).get()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setStatus() throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            editEntryDescriptor.setStatus(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setRemark() throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            editEntryDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setDuration() throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            editEntryDescriptor.setDuration(ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 19,
      "IYVVVVV": 63,
      "WANG-Yuchen-Alice": 41,
      "-": 35
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_KEYWORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_KEYWORD)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String trimmedArgs \u003d argMultimap.getValue(PREFIX_KEYWORD).get().trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            Type findType \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new FindCommand(findType, new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 5,
      "WANG-Yuchen-Alice": 24,
      "-": 25
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/FitHelperParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.logic.commands.CheckCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.ProfileCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.TodayCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.WeightCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.diary.AddDiaryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.diary.DiaryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.diary.EditDiaryCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.diary.AddDiaryCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.diary.EditDiaryCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class FitHelperParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case AddDiaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new AddDiaryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case EditDiaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new EditDiaryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case CheckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return new CheckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case ExitCommand.COMMAND_WORD_1:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            // fall through"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case ExitCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            // fall through"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case ExitCommand.COMMAND_WORD_3:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case TodayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new TodayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case DiaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new DiaryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            return new CalendarParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new ReportCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case ProfileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new ProfileCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        case WeightCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return new WeightCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case ReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new ReminderCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 2,
      "lm5lm5": 9,
      "IYVVVVV": 13,
      "WANG-Yuchen-Alice": 48,
      "-": 59
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/Flag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * A flag that serves as an special argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * E.g. \u0027-f\u0027 in \u0027update -f attr/name v/Bob\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Flag {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Flag(String flag) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return getFlag();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return flag \u003d\u003d null ? 0 : flag.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!(obj instanceof Flag)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Flag otherFlag \u003d (Flag) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return otherFlag.getFlag().equals(getFlag());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 39
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/ListCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ListCommandParser.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        //if no date is specified, list out all entries"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return new ListCommand(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String dateStr \u003d argMultimap.getValue(PREFIX_DATE).get().trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (dateStr.isEmpty() || !isValidDate(dateStr)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new ListCommand(dateStr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Checks whether a date string is valid for LocalDate conversion."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param dateStr"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static boolean isValidDate(String dateStr) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateStr, formatter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            logger.info(String.valueOf(date));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 67
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Content;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.DiaryDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Calorie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Age;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.TargetWeight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses a {@code String type} into a {@code Type}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Type(trimmedType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses a {@code String location} into an {@code Location}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Parses a {@code String location} into an {@code Location}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static DiaryDate parseDate(String dateStr) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(dateStr);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String trimmedDate \u003d dateStr.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!DiaryDate.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException(DiaryDate.MESSAGE_ERROR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new DiaryDate(trimmedDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses a {@code String location} into an {@code Location}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses a {@code String calorie} into an {@code Calorie}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the given {@code calorie} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Calorie parseCalorie(String calorie) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(calorie);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String trimmedCalorie \u003d calorie.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Calorie.isValidCalorie(trimmedCalorie)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Calorie(trimmedCalorie);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses a {@code String status} into an {@code Status}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the given {@code status} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Status parseStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String trimmedStatus \u003d status.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Status.isValidStatus(trimmedStatus)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Status(trimmedStatus);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Parses a {@code String remark} into an {@code Remark}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Remark parseRemark(String remark) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Parses a {@code String remark} into an {@code Content}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static Content parseContent(String content) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new Content(trimmedContent);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Parses a {@code String duration} into an {@code Duration}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static Duration parseDuration(String duration) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return new Duration(trimmedDuration);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    // methods related to profile"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses a {@code String name} into a {@code Name} in user Profile."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static fithelper.model.profile.Name parseProfileName(String name) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!fithelper.model.profile.Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(fithelper.model.profile.Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new fithelper.model.profile.Name(trimmedName);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender} in user Profile."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Gender parseProfileGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull (gender);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses a {@code String age} into a {@code Age} in user Profile."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Age parseProfileAge(String age) throws ParseException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull (age);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses a {@code String address} into a {@code Address} in user Profile."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Address parseProfileAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull (address);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses a {@code String height} into a {@code Height} in user Profile."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the given {@code height} is invalid."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Height parseProfileHeight(String height) throws ParseException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull (height);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String trimmedHeight \u003d height.trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Height.isValidHeight(trimmedHeight)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Height(trimmedHeight);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses a {@code String targetWeight} into a {@code TargetWeight} in user Profile."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the given {@code targetWeight} is invalid."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static TargetWeight parseProfileTargetWeight(String targetWeight) throws ParseException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull (targetWeight);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String trimmedTargetWeight \u003d targetWeight.trim();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!TargetWeight.isValidTargetWeight(trimmedTargetWeight)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(TargetWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new TargetWeight(trimmedTargetWeight);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 11,
      "IYVVVVV": 155,
      "WANG-Yuchen-Alice": 39,
      "-": 59
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/TodayCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.TodayCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Parses input arguments and creates a new TpdayCommand object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class TodayCommandParser implements Parser\u003cTodayCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TpdayCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * and returns an TpdayCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public TodayCommand parse(String args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new TodayCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 18
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/UpdateCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.FLAG_FORCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_ATTRIBUTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_VALUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.UpdateCommand.UpdateValueDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private UpdateValueDescriptor updateValueDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ATTRIBUTE, PREFIX_VALUE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ATTRIBUTE, PREFIX_VALUE)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        updateValueDescriptor \u003d new UpdateValueDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        updateValueDescriptor.setBoolean(args.contains(FLAG_FORCE.getFlag()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String attributeName \u003d argMultimap.getValue(PREFIX_ATTRIBUTE).orElse(\"\").toLowerCase().trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String[] words \u003d attributeName.split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        for (int i \u003d 0; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            sb.append(words[i]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String attributeNameWithoutSpace \u003d sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setName(attributeNameWithoutSpace);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setGender(attributeNameWithoutSpace);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setAge(attributeNameWithoutSpace);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setAddress(attributeNameWithoutSpace);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setHeight(attributeNameWithoutSpace);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setTargetWeight(attributeNameWithoutSpace);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!updateValueDescriptor.isAnyFieldUpdated()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new UpdateCommand(updateValueDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setName(String attributeName) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (\"name\".equals(attributeName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            updateValueDescriptor.setName(ParserUtil.parseProfileName(argMultimap.getValue(PREFIX_VALUE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setGender(String attributeName) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (\"gender\".equals(attributeName)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            updateValueDescriptor.setGender(ParserUtil.parseProfileGender(argMultimap.getValue(PREFIX_VALUE).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setAge(String attributeName) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (\"age\".equals(attributeName)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            updateValueDescriptor.setAge(ParserUtil.parseProfileAge(argMultimap.getValue(PREFIX_VALUE).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setAddress(String attributeName) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (\"address\".equals(attributeName)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            updateValueDescriptor.setAddress(ParserUtil.parseProfileAddress(argMultimap.getValue(PREFIX_VALUE).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setHeight(String attributeName) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (\"height\".equals(attributeName)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            updateValueDescriptor.setHeight(ParserUtil.parseProfileHeight(argMultimap.getValue(PREFIX_VALUE).get()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setTargetWeight(String attributeName) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (\"targetweight\".equals(attributeName)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            updateValueDescriptor"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    .setTargetWeight(ParserUtil.parseProfileTargetWeight(argMultimap.getValue(PREFIX_VALUE).get()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 106
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/diary/AddDiaryCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.parser.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DIARYCONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.diary.AddDiaryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Content;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.DiaryDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Parses input arguments and creates a new AddDiaryCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class AddDiaryCommandParser implements Parser\u003cAddDiaryCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDiaryCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * and returns an AddDiaryCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public AddDiaryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_DIARYCONTENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_DIARYCONTENT)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDiaryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        DiaryDate diaryDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Content content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_DIARYCONTENT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Diary diary \u003d new Diary(diaryDate, content);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new AddDiaryCommand(diary);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 53
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/diary/EditDiaryCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.logic.parser.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.parser.CliSyntaxUtil.PREFIX_DIARYCONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.commands.diary.EditDiaryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Content;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.DiaryDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Parses input arguments and creates a new EditDiaryCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class EditDiaryCommandParser implements Parser\u003cEditDiaryCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditDiaryCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * and returns an EditDiaryCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public EditDiaryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_DIARYCONTENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_DIARYCONTENT)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditDiaryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        DiaryDate diaryDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Content content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_DIARYCONTENT).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        EditDiaryCommand.EditDiaryDescriptor editDiaryDescriptor \u003d new EditDiaryCommand.EditDiaryDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        editDiaryDescriptor.setDiaryDate(diaryDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        editDiaryDescriptor.setContent(content);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!editDiaryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new EditDiaryCommand(diaryDate.toString(), editDiaryDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 59
    }
  },
  {
    "path": "src/main/java/fithelper/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/fithelper/model/FitHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.model.calorietable.CalorieEntry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.model.calorietable.FoodCalorieTable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.model.calorietable.SportsCalorieTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.UniqueDiaryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.today.Today;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Wraps all entry-related data at the FitHelper level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Duplicates are not allowed (by .isSameEntry comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class FitHelper implements ReadOnlyFitHelper {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final UniqueDiaryList diaries \u003d new UniqueDiaryList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final UniqueEntryList foodEntries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final UniqueEntryList sportsEntries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final UniqueEntryList reminderEntries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final UniqueEntryList todayFoodEntries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final UniqueEntryList todaySportsEntries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private final FoodCalorieTable foodCalorieTable \u003d new FoodCalorieTable();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private final SportsCalorieTable sportsCalorieTable \u003d new SportsCalorieTable();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public FitHelper() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Creates an FitHelper using the Entries in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public FitHelper(ReadOnlyFitHelper toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Replaces the contents of the diary list with {@code diaries}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code diaries} must not contain duplicate diaries."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setDiaries(List\u003cDiary\u003e diaries) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        List\u003cDiary\u003e diaryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (Diary diary : diaries) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            diaryList.add(diary);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diaries.setDiaries(diaryList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Replaces the contents of the entry list with {@code entries}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * {@code entries} must not contain duplicate entries."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String todayStr \u003d new Today().getTodayDateStr();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        List\u003cEntry\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        List\u003cEntry\u003e sportsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        List\u003cEntry\u003e reminderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        List\u003cEntry\u003e todayFoodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        List\u003cEntry\u003e todaySportsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        for (Entry entry : entries) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            if (entry.isFood()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                foodList.add(entry);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                if (entry.getTime().getDateStr().equalsIgnoreCase(todayStr)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    todayFoodList.add(entry);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                sportsList.add(entry);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                if (entry.getTime().getDateStr().equalsIgnoreCase(todayStr)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    todaySportsList.add(entry);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (entry.getStatus().value.equalsIgnoreCase(\"Undone\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                reminderList.add(entry);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.foodEntries.setEntries(foodList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.sportsEntries.setEntries(sportsList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.reminderEntries.setEntries(reminderList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.todayFoodEntries.setEntries(todayFoodList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.todaySportsEntries.setEntries(todaySportsList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e foods, List\u003cEntry\u003e sports, List\u003cEntry\u003e reminders) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String todayStr \u003d new Today().getTodayDateStr();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        List\u003cEntry\u003e todayFoodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        List\u003cEntry\u003e todaySportsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (Entry entry : foods) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (entry.getTime().getDateStr().equalsIgnoreCase(todayStr)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                todayFoodList.add(entry);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (Entry entry : sports) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (entry.getTime().getDateStr().equalsIgnoreCase(todayStr)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                todaySportsList.add(entry);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.foodEntries.setEntries(foods);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.sportsEntries.setEntries(sports);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.reminderEntries.setEntries(reminders);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.todayFoodEntries.setEntries(todayFoodList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.todaySportsEntries.setEntries(todaySportsList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Replaces the given diary {@code target} in the list with {@code editedDiary}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code target} must exist in the log book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The diary identity of {@code editedDiary} must not be the same as another existing diary in the log book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setDiary(String target, Diary editedDiary) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(editedDiary);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        diaries.setDiary(target, editedDiary);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Replaces the given entry {@code target} in the list with {@code editedEntry}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * {@code target} must exist in the log book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the log book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String todayStr \u003d new Today().getTodayDateStr();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (target.isFood()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            foodEntries.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (target.isToday(todayStr)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                todayFoodEntries.remove(target);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (editedEntry.isToday(todayStr)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                todayFoodEntries.add(editedEntry);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            sportsEntries.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (target.isToday(todayStr)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                todaySportsEntries.remove(target);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (editedEntry.isToday(todayStr)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                todaySportsEntries.add(editedEntry);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (!target.isDone()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            reminderEntries.remove(target);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!editedEntry.isDone()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            reminderEntries.add(editedEntry);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Resets the existing data of this {@code FitHelper} with {@code newData}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void resetData(ReadOnlyFitHelper newData) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setDiaries(newData.getDiaryList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setEntries(newData.getFoodList(), newData.getSportsList(), newData.getReminderList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    //// diary-level operations"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if a entry with the same identity as {@code entry} exists in FitHelper."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean hasDiary(Diary diary) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(diary);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return diaries.contains(diary);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Adds a diary to FitHelper."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The diary must not already exist in FitHelper."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void addDiary(Diary diary) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        diaries.add(diary);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Removes {@code key} from this {@code FitHelper}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code key} must exist in FitHelper."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void removeDiary(Diary key) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        diaries.remove(key);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    //// entry-level operations"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a entry with the same identity as {@code entry} exists in FitHelper."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (entry.isFood()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return foodEntries.contains(entry);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return sportsEntries.contains(entry);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Returns true if a entry has time clashes with at least two other entries{@code entry}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public boolean hasTimeClashes(Entry entry) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        boolean hasTimeClashes;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        long hasTimeClashesWithFood \u003d foodEntries.countClashes(entry);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        long hasTimeClashesWithSports \u003d sportsEntries.countClashes(entry);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        long count \u003d hasTimeClashesWithFood + hasTimeClashesWithSports;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (hasEntry(entry)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            count--;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (count \u003e\u003d 2) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            hasTimeClashes \u003d true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            hasTimeClashes \u003d false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return hasTimeClashes;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Adds an entry to FitHelper."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * The entry must not already exist in FitHelper."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String todayStr \u003d new Today().getTodayDateStr();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (entry.isFood()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            foodEntries.add(entry);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (entry.isToday(todayStr)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                todayFoodEntries.add(entry);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            sportsEntries.add(entry);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (entry.isToday(todayStr)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                todaySportsEntries.add(entry);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!entry.isDone()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            reminderEntries.add(entry);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Removes {@code key} from this {@code FitHelper}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * {@code key} must exist in FitHelper."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void removeEntry(Entry key) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String todayStr \u003d new Today().getTodayDateStr();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (key.isFood()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            foodEntries.remove(key);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (key.isToday(todayStr)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                todayFoodEntries.remove(key);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            sportsEntries.remove(key);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (key.isToday(todayStr)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                todaySportsEntries.remove(key);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!key.isDone()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            reminderEntries.remove(key);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        builder.append(\"Food: \")"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(foodEntries.asUnmodifiableObservableList().size())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\"Sports \")"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(sportsEntries.asUnmodifiableObservableList().size())"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"Reminders \")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(reminderEntries.asUnmodifiableObservableList().size())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"Today Food: \")"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(todayFoodEntries.asUnmodifiableObservableList().size())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"Today Sports \")"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(todaySportsEntries.asUnmodifiableObservableList().size())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"User Diaries \")"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(diaries.asUnmodifiableObservableList().size())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns an unmodifiable view of the food entry list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cDiary\u003e getDiaryList() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return diaries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns an unmodifiable view of the food entry list."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFoodList() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return foodEntries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns an unmodifiable view of the sports entry list."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ObservableList\u003cEntry\u003e getSportsList() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return sportsEntries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns an unmodifiable view of the sports entry list."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cEntry\u003e getReminderList() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return reminderEntries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns an unmodifiable view of the food entry list."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cEntry\u003e getTodayFoodList(String dateStr) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return todayFoodEntries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns an unmodifiable view of the sports entry list."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cEntry\u003e getTodaySportsList(String dateStr) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return todaySportsEntries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof FitHelper // instanceof handles nulls"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 diaries.equals(((FitHelper) other).diaries)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 foodEntries.equals(((FitHelper) other).foodEntries)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 sportsEntries.equals(((FitHelper) other).sportsEntries)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 reminderEntries.equals(((FitHelper) other).reminderEntries)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 todayFoodEntries.equals(((FitHelper) other).todayFoodEntries)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 todaySportsEntries.equals(((FitHelper) other).todaySportsEntries));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        List\u003cUniqueEntryList\u003e allList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        allList.add(foodEntries);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        allList.add(sportsEntries);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        allList.add(reminderEntries);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        allList.add(todayFoodEntries);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        allList.add(todaySportsEntries);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return allList.hashCode();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Searches one of the tables and add all entries whose name contains the keywords into a list"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * add returns the list."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * @param keywords"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * @return a list of {@code CalorieEntry} with matching keywords."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public List\u003cCalorieEntry\u003e addCalorieEntries(String type, String keywords) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        List\u003cCalorieEntry\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        List\u003c? extends CalorieEntry\u003e entries;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        //String[] keywordsByWord \u003d keywords.split(\" \");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (\"f\".equals(type)) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            entries \u003d foodCalorieTable.getEntries();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            entries \u003d sportsCalorieTable.getEntries();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (CalorieEntry entry : entries) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String name \u003d entry.getName();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (count \u003d\u003d 3) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (name.toLowerCase().contains(keywords.toLowerCase())) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                result.add(entry);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 19,
      "lm5lm5": 46,
      "IYVVVVV": 154,
      "WANG-Yuchen-Alice": 182
    }
  },
  {
    "path": "src/main/java/fithelper/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.model.calorietable.CalorieEntry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Profile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.today.Today;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    Predicate\u003cDiary\u003e PREDICATE_SHOW_ALL_DIARIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Predicate\u003cEntry\u003e PREDICATE_SHOW_ALL_ENTRIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    Predicate\u003cEntry\u003e PREDICATE_SHOW_UNDONE_ENTRIES \u003d entry -\u003e entry.getStatus().value.equals(\"Undone\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    Predicate\u003cEntry\u003e PREDICATE_SHOW_TODAY_ENTRIES \u003d entry -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            entry.getTime().getDateStr().equals(new Today().getTodayDateStr());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    Predicate\u003cEntry\u003e someDatePredicate(String dateStr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Replaces FitHelper data with the data in {@code fitHelper}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    void setFitHelper(ReadOnlyFitHelper fitHelper);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /** Returns the FitHelper */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    ReadOnlyFitHelper getFitHelper();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if diary log with the same identity as {@code diary} exists in the FitHelper."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    boolean hasDiary(Diary diary);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if an Entry with the same identity as {@code entry} exists in the FitHelper."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    boolean hasEntry(Entry entry);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Returns true if at least two Entries have time clashes as {@code entry} exists in the FitHelper."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    boolean hasTimeClashes(Entry entry);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Deletes the given diary."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The diary must exist in the log book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    void deleteDiary(Diary target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Deletes the given entry."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The entry must exist in the log book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    void deleteEntry(Entry target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Adds the given diary."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code diary} must not already exist in the log book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    void addDiary(Diary diary);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Adds the given Entry."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code entry} must not already exist in the log book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    void addEntry(Entry entry);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    void addVEvent(Entry entry) throws IllegalValueException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    void setVevent(Entry entry, Entry newEntry);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    void deleteVevent(Entry entry);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Replaces the given diary {@code target} with {@code editedDiary}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code target} must exist in the log book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The diary identity of {@code editedDiary} must not be the same as another existing diary in the log book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    void setDiary(String target, Diary editedDiary);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Replaces the given entry {@code target} with {@code editedEntry}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code target} must exist in the log book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the log book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    void setEntry(Entry target, Entry editedEntry);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /** Returns an unmodifiable view of the filtered diary list */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    ObservableList\u003cDiary\u003e getFilteredDiaryList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /** Returns an unmodifiable view of the filtered food entry list */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredFoodEntryList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /** Returns an unmodifiable view of the filtered sports entry list */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredSportsEntryList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /** Returns an unmodifiable view of the filtered sports entry list */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredReminderEntryList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /** Returns an unmodifiable view of the filtered food entry list */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredTodayFoodEntryList(String dateStr);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /** Returns an unmodifiable view of the filtered sports entry list */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredTodaySportsEntryList(String dateStr);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the filter of the filtered diary list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    void updateFilteredDiaryList(Predicate\u003cDiary\u003e predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    void updateFilteredFoodEntryList(Predicate\u003cEntry\u003e predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    void updateFilteredSportEntryList(Predicate\u003cEntry\u003e predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Search the pre-defined FoodCalorie dataset for entries that match the given keyword."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * @param keyword keyword for searching"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    List\u003cCalorieEntry\u003e searchFoodCalorieTable(String keyword);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Search the pre-defined SportsCalorie dataset for entries that match the given keyword."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * @param keyword keyword for searching"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    List\u003cCalorieEntry\u003e searchSportsCalorieTable(String keyword);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    ObservableList\u003cVEvent\u003e getVEvents();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    void setCalendarDate(String date);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    LocalDateTime getCalendarDate();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    void setCalendarMode(String mode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    String getCalendarMode();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    // Methods about user profile."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Replaces user profile data with the data in {@code newUserProfile}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    void setUserProfile(ReadOnlyUserProfile newUserProfile);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    void setUserProfile(Profile newUserProfile);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /** Returns the User Profile */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    ReadOnlyUserProfile getUserProfile();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if new profile is the same as original one, without comparing weight data."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    boolean isSameProfile(Profile newProfile);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 21,
      "lm5lm5": 18,
      "IYVVVVV": 33,
      "WANG-Yuchen-Alice": 92,
      "-": 13
    }
  },
  {
    "path": "src/main/java/fithelper/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.commons.util.ModeUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.calendar.CalendarSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import fithelper.model.calorietable.CalorieEntry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.VeventList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Profile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents the in-memory model of the FitHelper data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final FitHelper fitHelper;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final FilteredList\u003cDiary\u003e filteredDiaries;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final FilteredList\u003cEntry\u003e filteredFoodEntries;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final FilteredList\u003cEntry\u003e filteredSportsEntries;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final FilteredList\u003cEntry\u003e filteredReminderEntries;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final FilteredList\u003cEntry\u003e filteredTodayFoodEntries;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final FilteredList\u003cEntry\u003e filteredTodaySportsEntries;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private final VeventList vEventList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private CalendarSettings calendarSettings \u003d new CalendarSettings(LocalDateTime.now(), \"tb\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final UserProfile userProfile;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Initializes a ModelManager with the given fitHelper and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ModelManager(ReadOnlyFitHelper fitHelper, ReadOnlyUserProfile userProfile) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(fitHelper);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        logger.fine(\"Initializing with FitHelper: \" + fitHelper);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.fitHelper \u003d new FitHelper(fitHelper);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        filteredDiaries \u003d new FilteredList\u003cDiary\u003e(this.fitHelper.getDiaryList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        filteredFoodEntries \u003d new FilteredList\u003c\u003e(this.fitHelper.getFoodList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        filteredSportsEntries \u003d new FilteredList\u003c\u003e(this.fitHelper.getSportsList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        filteredReminderEntries \u003d new FilteredList\u003c\u003e(this.fitHelper.getReminderList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        filteredTodayFoodEntries \u003d new FilteredList\u003c\u003e(this.fitHelper.getFoodList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        filteredTodaySportsEntries \u003d new FilteredList\u003c\u003e(this.fitHelper.getSportsList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        vEventList \u003d new VeventList(filteredFoodEntries, filteredSportsEntries);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.userProfile \u003d new UserProfile(userProfile);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this(new FitHelper(), new UserProfile());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FitHelper \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setFitHelper(ReadOnlyFitHelper fitHelper) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.fitHelper.resetData(fitHelper);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ReadOnlyFitHelper getFitHelper() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.fitHelper;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Basic Functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates a predicate in showing entries of a specific date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param dateStr"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Predicate\u003cEntry\u003e someDatePredicate(String dateStr) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Predicate\u003cEntry\u003e showSomedayEntriesPredicate \u003d entry -\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                entry.getTime().getDateStr().equalsIgnoreCase(dateStr);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return showSomedayEntriesPredicate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean hasDiary(Diary diary) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(diary);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return fitHelper.hasDiary(diary);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return fitHelper.hasEntry(entry);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public boolean hasTimeClashes(Entry entry) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return fitHelper.hasTimeClashes(entry);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Deletes the given diary."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The diary must exist in the log book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void deleteDiary(Diary target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        fitHelper.removeDiary(target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Deletes the given entry."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The entry must exist in the log book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void deleteEntry(Entry target) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        fitHelper.removeEntry(target);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void addDiary(Diary diary) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        fitHelper.addDiary(diary);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        updateFilteredDiaryList(PREDICATE_SHOW_ALL_DIARIES);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        fitHelper.addEntry(entry);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Replaces the given diary {@code target} with {@code editedDiary}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code target} must exist in the log book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The diary identity of {@code editedDiary} must not be the same as another existing diary in the log book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param editedDiary"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setDiary(String target, Diary editedDiary) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(target, editedDiary);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        fitHelper.setDiary(target, editedDiary);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Replaces the given entry {@code target} with {@code editedEntry}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code target} must exist in the log book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the log book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param editedEntry"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        fitHelper.setEntry(target, editedEntry);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Entry List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns an unmodifiable view of the diary list of {@code Diary} backed by the internal list of"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code versionedFitHelper}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cDiary\u003e getFilteredDiaryList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return filteredDiaries;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns an unmodifiable view of the food list of {@code Entry} backed by the internal list of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * {@code versionedFitHelper}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredFoodEntryList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return filteredFoodEntries;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns an unmodifiable view of the food list of {@code Entry} backed by the internal list of"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * {@code versionedFitHelper}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredSportsEntryList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return filteredSportsEntries;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns an unmodifiable view of the reminder list of {@code Entry} backed by the internal list of"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code versionedFitHelper}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredReminderEntryList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return filteredReminderEntries;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns an unmodifiable view of the food list of {@code Entry} backed by the internal list of"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code versionedFitHelper}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredTodayFoodEntryList(String dateStr) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.fitHelper.getTodayFoodList(dateStr);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns an unmodifiable view of the food list of {@code Entry} backed by the internal list of"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code versionedFitHelper}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredTodaySportsEntryList(String dateStr) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.fitHelper.getTodaySportsList(dateStr);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cEntry\u003e getTodayEntries(String todayDate, FilteredList\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        UniqueEntryList todayEntries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (Entry entry : entries) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (entry.getTime().getDateStr().equalsIgnoreCase(todayDate)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                todayEntries.add(entry);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return todayEntries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the filter of the filtered diary list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void updateFilteredDiaryList(Predicate\u003cDiary\u003e predicate) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        filteredDiaries.setPredicate(predicate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        filteredFoodEntries.setPredicate(predicate);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        filteredSportsEntries.setPredicate(predicate);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void updateFilteredFoodEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        filteredFoodEntries.setPredicate(predicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void updateFilteredSportEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        filteredSportsEntries.setPredicate(predicate);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Searches the {@code FoodCalorieTable} and add all entries whose name contains the keyword into a list"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * add returns the list."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * @param keywords keyword for searching"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * @return a list of {@code CalorieEntry} with matching keyword"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public List\u003cCalorieEntry\u003e searchFoodCalorieTable(String keywords) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return fitHelper.addCalorieEntries(\"f\", keywords);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Searches the {@code SportsCalorieTable} and add all entries whose name contains the keywords into a list"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * add returns the list."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * @param keywords keywords for searching"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * @return a list of {@code CalorieEntry} with matching keywords"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public List\u003cCalorieEntry\u003e searchSportsCalorieTable(String keywords) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return fitHelper.addCalorieEntries(\"s\", keywords);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return fitHelper.equals(other.fitHelper)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 filteredDiaries.equals(other.filteredDiaries)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 filteredFoodEntries.equals(other.filteredFoodEntries)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 filteredSportsEntries.equals(other.filteredSportsEntries);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    // Methods about calendar."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public ObservableList\u003cVEvent\u003e getVEvents() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return vEventList.getVEvents();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void addVEvent(Entry entry) throws IllegalValueException {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        vEventList.addVEvent(entry);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setVevent(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        vEventList.setVEvent(target, editedEntry);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void deleteVevent(Entry entry) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        vEventList.deleteVEvent(entry);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setCalendarDate(String date) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        Time time \u003d new Time(date);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        LocalDateTime formattedDate \u003d time.dateTime;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendarSettings.setDate(formattedDate);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public LocalDateTime getCalendarDate() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return calendarSettings.getDate();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setCalendarMode(String mode) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        ModeUtil.checkMode(mode);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendarSettings.setMode(mode);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public String getCalendarMode() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return calendarSettings.getMode();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    // Methods about user profile."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setUserProfile(ReadOnlyUserProfile newUserProfile) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.userProfile.resetData(newUserProfile);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setUserProfile(Profile newUserProfile) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.userProfile.setUserProfile(newUserProfile);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ReadOnlyUserProfile getUserProfile() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.userProfile;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean isSameProfile(Profile newProfile) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.userProfile.getUserProfile().equals(newProfile);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 57,
      "lm5lm5": 31,
      "IYVVVVV": 66,
      "WANG-Yuchen-Alice": 184,
      "-": 57
    }
  },
  {
    "path": "src/main/java/fithelper/model/ReadOnlyFitHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Unmodifiable view of a log book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public interface ReadOnlyFitHelper {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns an unmodifiable view of the diary list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    ObservableList\u003cDiary\u003e getDiaryList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns an unmodifiable view of the food entry list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    ObservableList\u003cEntry\u003e getFoodList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns an unmodifiable view of the sports entry list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    ObservableList\u003cEntry\u003e getSportsList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns an unmodifiable view of the sports entry list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    ObservableList\u003cEntry\u003e getReminderList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 23,
      "WANG-Yuchen-Alice": 13
    }
  },
  {
    "path": "src/main/java/fithelper/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Path getFitHelperFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Path getUserProfilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/fithelper/model/ReadOnlyUserProfile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Unmodifiable view of a user profile."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public interface ReadOnlyUserProfile {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns an unmodifiable view of the user profile."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Profile getUserProfile();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 15
    }
  },
  {
    "path": "src/main/java/fithelper/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Path fitHelperFilePath \u003d Paths.get(\"data\" , \"fithelper.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Path userProfilePath \u003d Paths.get(\"data\", \"userprofile.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setFitHelperFilePath(newUserPrefs.getFitHelperFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Path getFitHelperFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return fitHelperFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setFitHelperFilePath(Path fitHelperFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(fitHelperFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.fitHelperFilePath \u003d fitHelperFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Path getUserProfilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return userProfilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setUserProfilePath(Path userProfilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(userProfilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.userProfilePath \u003d userProfilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 fitHelperFilePath.equals(o.fitHelperFilePath)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 userProfilePath.equals(o.userProfilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return Objects.hash(guiSettings, fitHelperFilePath, userProfilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        sb.append(\"\\nEntry data file location : \" + fitHelperFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        sb.append(\"\\nUser Profile data file location : \" + userProfilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 22,
      "-": 77
    }
  },
  {
    "path": "src/main/java/fithelper/model/UserProfile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Wraps all profile-related data at the UserProfile level"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class UserProfile implements ReadOnlyUserProfile {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Profile profile \u003d new Profile();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public UserProfile() {}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Creates a {@code UserProfile} using the value in the {@code toBeCopied}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public UserProfile(ReadOnlyUserProfile toBeCopied) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Resets the existing data of this {@code UserProfile} with {@code newUserProfile}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void resetData(ReadOnlyUserProfile newUserProfile) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(newUserProfile);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setUserProfile(newUserProfile.getUserProfile());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Profile getUserProfile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setUserProfile(Profile profile) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(profile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.profile \u003d profile;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        builder.append(\"Profile: \")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(this.profile.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof UserProfile // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 profile.equals(((UserProfile) other).profile));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.profile.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 63
    }
  },
  {
    "path": "src/main/java/fithelper/model/calculator/CalorieCalculator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.calculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * This class calculates the calorie intake and consumption."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class CalorieCalculator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private List\u003cEntry\u003e entries;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private double foodCalorie;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private double sportsCalorie;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private double totalCalorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CalorieCalculator(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.entries \u003d entries;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.foodCalorie \u003d compFoodCalorie(entries);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.sportsCalorie \u003d compSportsCalorie(entries);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.totalCalorie \u003d foodCalorie - sportsCalorie;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public List\u003cEntry\u003e getEntries() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public double getFoodCalorie() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return foodCalorie;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public double getSportsCalorie() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return sportsCalorie;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public double getTotalCalorie() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.totalCalorie;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.entries \u003d entries;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.foodCalorie \u003d compFoodCalorie(entries);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.sportsCalorie \u003d compSportsCalorie(entries);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.totalCalorie \u003d foodCalorie - sportsCalorie;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Computes the total food calories in a list of entries."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param entries stores entries"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return total food calories"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public double compFoodCalorie(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        double temp \u003d 0.0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (Entry entry : entries) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (entry.isFood() \u0026\u0026 entry.isDone()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                temp +\u003d entry.getCalorie().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Computes the total sports calories in a list of entries."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param entries stores entries"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return total sports calories"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public double compSportsCalorie(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        double temp \u003d 0.0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (Entry entry : entries) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (entry.isSports() \u0026\u0026 entry.isDone()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                temp +\u003d entry.getCalorie().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if both calculators have the same entries."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * This defines a stronger notion of equality between two calculators."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!(other instanceof CalorieCalculator)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        CalorieCalculator otherCalorieCalculator \u003d (CalorieCalculator) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return otherCalorieCalculator.getEntries().equals(getEntries());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Objects.hash(entries);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 105
    }
  },
  {
    "path": "src/main/java/fithelper/model/calculator/CalorieCalculatorByDateRange.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.calculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * GenerateS relevant stats based on foodList and sportsList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class CalorieCalculatorByDateRange {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ObservableList\u003cEntry\u003e foodList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ObservableList\u003cEntry\u003e sportsList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public CalorieCalculatorByDateRange(ObservableList\u003c Entry \u003e foodList, ObservableList\u003cEntry\u003e sportsList,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                        LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireAllNonNull(foodList, sportsList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.foodList \u003d foodList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.sportsList \u003d sportsList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public HashMap\u003cLocalDate, Double\u003e getDailyCalorie() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        ArrayList\u003cEntry\u003e filteredList \u003d getFilteredList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        HashMap\u003cLocalDate, Double\u003e calories \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        for (Entry entry: filteredList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (calories.containsKey(entry.getDate())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                if (entry.isFood()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    calories.put(entry.getDate(), calories.get(entry.getDate()) + entry.getCalorieValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    calories.put(entry.getDate(), calories.get(entry.getDate()) - entry.getCalorieValue());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                if (entry.isFood()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    calories.put(entry.getDate(), entry.getCalorieValue());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    calories.put(entry.getDate(), -entry.getCalorieValue());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Get all entries between the start date and the end date."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ArrayList\u003cEntry\u003e getFilteredList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        ArrayList\u003cEntry\u003e filteredList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        for (Entry entry: sportsList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            LocalDate date \u003d entry.getDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (!date.isBefore(startDate) \u0026\u0026 !date.isAfter(endDate) \u0026\u0026 entry.isDone()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                filteredList.add(entry);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        for (Entry entry: foodList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            LocalDate date \u003d entry.getDate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (!date.isBefore(startDate) \u0026\u0026 !date.isAfter(endDate) \u0026\u0026 entry.isDone()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                filteredList.add(entry);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 71
    }
  },
  {
    "path": "src/main/java/fithelper/model/calculator/FeedbackGenerator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.calculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.core.FeedbackUtils.FEEDBACK_CALORIE_DEFAULT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.core.FeedbackUtils.FEEDBACK_CALORIE_NEGATIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.core.FeedbackUtils.FEEDBACK_CALORIE_TOO_MUCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.core.FeedbackUtils.FEEDBACK_TASK_ALL_COMPLETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.core.FeedbackUtils.FEEDBACK_TASK_DEFAULT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.core.FeedbackUtils.FEEDBACK_TASK_SOME_COMPLETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.core.FeedbackUtils.FEEDBACK_TASL_NONE_COMPLETE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * This class generates feedbacks based on the task completion and calorie results."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class FeedbackGenerator {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private double performance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private double totalCalorie;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public FeedbackGenerator(double performance, double totalCalorie) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.performance \u003d performance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.totalCalorie \u003d totalCalorie;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Generates overall feedback."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String generateFeedback() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String calorieSummary \u003d generateCalorieSummary();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String performanceSummary \u003d generatePerformanceSummary();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return calorieSummary + \"\\n\" + performanceSummary;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Generates calorie summary."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String generateCalorieSummary() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (totalCalorie \u003c 0.0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return FEEDBACK_CALORIE_NEGATIVE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } else if (totalCalorie \u003e 1000) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return FEEDBACK_CALORIE_TOO_MUCH;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return FEEDBACK_CALORIE_DEFAULT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Generates task summary."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String generatePerformanceSummary() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (performance \u003d\u003d 0.0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return FEEDBACK_TASL_NONE_COMPLETE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } else if (performance \u003e\u003d 100.0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return FEEDBACK_TASK_ALL_COMPLETE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } else if (performance \u003e\u003d 66.0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return FEEDBACK_TASK_SOME_COMPLETE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return FEEDBACK_TASK_DEFAULT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 63
    }
  },
  {
    "path": "src/main/java/fithelper/model/calculator/PerformanceCalculator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.calculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Represents a performance calculator."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class PerformanceCalculator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private List\u003cEntry\u003e entries;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private int doneCounter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private int undoneCounter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private double performance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public PerformanceCalculator(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.entries \u003d entries;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.doneCounter \u003d countDoneEntries(entries);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.undoneCounter \u003d countUndoneEntries(entries);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (doneCounter + undoneCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            this.performance \u003d 0.0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            this.performance \u003d doneCounter / (doneCounter + undoneCounter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        assert doneCounter + undoneCounter \u003d\u003d entries.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.entries \u003d entries;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.doneCounter \u003d countDoneEntries(entries);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.undoneCounter \u003d countUndoneEntries(entries);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.performance \u003d doneCounter / (doneCounter + undoneCounter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        assert doneCounter + undoneCounter \u003d\u003d entries.size();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public List\u003cEntry\u003e getEntries() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int getDoneCounter() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return doneCounter;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int getUndoneCounter() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return undoneCounter;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public double getPerformance() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return performance;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Counter the done entries in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param entries a list of entries"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return the number of done entries"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int countDoneEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        int temp \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (Entry entry : entries) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (entry.isDone()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                temp++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Counter the undone entries in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param entries a list of entries"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return the number of undone entries"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int countUndoneEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        int temp \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (Entry entry : entries) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (!entry.isDone()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                temp++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if both calculators have the same entries."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * This defines a stronger notion of equality between two calculators."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!(other instanceof CalorieCalculator)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        PerformanceCalculator otherPerformanceCalculator \u003d (PerformanceCalculator) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return otherPerformanceCalculator.getEntries().equals(getEntries());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Objects.hash(entries);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 112
    }
  },
  {
    "path": "src/main/java/fithelper/model/calendar/CalendarSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * Stores information about user preferences"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class CalendarSettings {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private String mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public CalendarSettings(LocalDateTime date, String mode) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public String getMode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return this.mode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setDate(LocalDateTime dateToSet) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.date \u003d dateToSet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setMode(String modeToSet) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.mode \u003d modeToSet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 27
    }
  },
  {
    "path": "src/main/java/fithelper/model/calorietable/CalorieEntry.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package fithelper.model.calorietable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * An entry about calorie intake/consumption of a food/sports."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public abstract class CalorieEntry {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String calorie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public CalorieEntry(String name, String calorie) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String getCalorie() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 22
    }
  },
  {
    "path": "src/main/java/fithelper/model/calorietable/CalorieTable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package fithelper.model.calorietable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * An interface representing the table storing pre-defined data about calorie intake/consumption of a food/sports"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public interface CalorieTable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 7
    }
  },
  {
    "path": "src/main/java/fithelper/model/calorietable/FoodCalorieDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package fithelper.model.calorietable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * Data about calorie intake of a food in primitive form."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class FoodCalorieDataUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String DATA \u003d \"Apple/95/182//\" + \"Avocado/320/200//\" + \"Blueberries/84/138\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 8
    }
  },
  {
    "path": "src/main/java/fithelper/model/calorietable/FoodCalorieEntry.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package fithelper.model.calorietable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * An entry storing the name of a food, its calorie intake per serving, and the weight of one serving."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class FoodCalorieEntry extends CalorieEntry {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String weightPerServingInGram;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public FoodCalorieEntry(String name, String calorie, String weight) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(name, calorie);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        weightPerServingInGram \u003d weight;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"Name: \" + getName() + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"Calorie: \" + getCalorie() + \" cal per serving (\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + weightPerServingInGram + \"g)\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 20
    }
  },
  {
    "path": "src/main/java/fithelper/model/calorietable/FoodCalorieTable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package fithelper.model.calorietable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * The table storing pre-defined data about calorie intake of a food"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class FoodCalorieTable implements CalorieTable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private List\u003cFoodCalorieEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public FoodCalorieTable() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String data \u003d FoodCalorieDataUtil.DATA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String[] listOfEntries \u003d data.split(\"//\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (String entry : listOfEntries) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String[] attributes \u003d entry.split(\"/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (attributes.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                entries.add(new FoodCalorieEntry(attributes[0], attributes[1], attributes[2]));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public List\u003cFoodCalorieEntry\u003e getEntries() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 26
    }
  },
  {
    "path": "src/main/java/fithelper/model/calorietable/SportsCalorieDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package fithelper.model.calorietable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * Data about calorie consumption of a sports in primitive form."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class SportsCalorieDataUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String DATA \u003d \"Cycling (\u003c22.5 kmh)/563//\" + \"Cycling (22.5-26 kmh)/704//\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Weightlifting (light)/211//\" + \"Weightlifting (vigorous)/387//\" + \"Cycling (\u003e26 kmh)/844//\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Rowing machine (light)/246//\" + \"Rowing machine (moderate)/493//\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Rowing machine (vigorous)/600//\" + \"Aerobics (low impact)/352//\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Aerobics (high impact)/493//\" + \"Aerobics (step aerobics)/598//\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Stretching (mild)/176//\" + \"Stretching (intense)/281//\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Running (8-11 kmh)/563 - 800//\" + \"Running (12-14 kmh)/880 - 985//\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Running (14.5-17.5 kmh)/1056 - 1267//\" + \"Cross country/633//\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Stairclimbing/1056//\" + \"Track and field (shot, discus)/281//\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Track and field (high jump, pole vault)/422//\" + \"Track and field (hurdles)/704//\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Archery/246//\" + \"Badminton/317//\" + \"Basketball (competitive)/563//\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Basketball (shooting baskets)/317//\" + \"Bowling/211//\" + \"Boxing (in ring)/844//\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Boxing (punching bag)/422//\" + \"Boxing (sparring)/633//\" + \"Croquet/176//\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Curling/281//\" + \"Fencing/422//\" + \"Football (competitive)/633//\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Frisbee (competitive)/563//\" + \"Frisbbee (playing)/211//\" + \"Gymnastics/281//\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Handball/844//\" + \"Hockey (field hockey)/563//\" + \"Hockey (ice hockey)/563//\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Martial arts/704//\" + \"Juggling/281//\" + \"Kickball/493//\" + \"Lacrosse/563//\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Paddleball (competitive)/704//\" + \"Paddleball (playing)/422//\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Racquetbal (competitive)/704//\" + \"Racquetbal (playing)/493//\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Rock climbing (ascending)/774//\" + \"Rock climbing (rappelling)/563//\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Jumping rope (fast)/844//\" + \"Jumping rope (moderate)/704//\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Jumping rope (slow)/563//\" + \"Rugby/704//\" + \"Shuffleboard, lawn bowling)/211//\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Skateboarding/352//\" + \"Roller skating/493//\" + \"Sky diving/211//\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Soccer (competitive)/704//\" + \"Soccer (playing)/493//\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Softball or baseball/352//\" + \"Squash/844//\" + \"Table tennis, ping pong)/281//\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Tai chi/281//\" + \"Tennis/493//\" + \"Volleyball (competitive)/563//\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Volleyball (playing)/211//\" + \"Wrestling/422//\" + \"Wallyball/493//\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Backpacking, Hiking with pack/493//\" + \"Canoeing (light)/211//\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Canoeing (moderate)/493//\" + \"Canoeing (vigorous)/844//\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Swimming backstroke/493//\" + \"Swimming breaststroke/704//\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Swimming butterfly/744//\" + \"Swimming sidestroke/563//\" + \"Swimming leisurely, not laps/422//\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"Water polo/704//\" + \"Water volleyball/211//\" + \"Water jogging/563//\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 39
    }
  },
  {
    "path": "src/main/java/fithelper/model/calorietable/SportsCalorieEntry.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package fithelper.model.calorietable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * An entry storing the name of a sports and its calorie consumption (range) per hour."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class SportsCalorieEntry extends CalorieEntry {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public SportsCalorieEntry(String name, String calorie) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(name, calorie);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"Name: \" + getName() + \"\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"Calorie (70kg): \" + getCalorie() + \" cal / hour\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 16
    }
  },
  {
    "path": "src/main/java/fithelper/model/calorietable/SportsCalorieTable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package fithelper.model.calorietable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * The table storing pre-defined data about calorie consumption of a food"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class SportsCalorieTable implements CalorieTable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private List\u003cSportsCalorieEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public SportsCalorieTable() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String data \u003d SportsCalorieDataUtil.DATA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String[] listOfEntries \u003d data.split(\"//\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (String entry : listOfEntries) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String[] attributes \u003d entry.split(\"/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (attributes.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                entries.add(new SportsCalorieEntry(attributes[0], attributes[1]));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public List\u003cSportsCalorieEntry\u003e getEntries() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 26
    }
  },
  {
    "path": "src/main/java/fithelper/model/diary/Content.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Represents a Diary\u0027s content."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Content should be no more than 200 characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates a {@code Content}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param value a valid content."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Content(String value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        checkArgument(isValidContent(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates a {@code Content}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Content() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.value \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Checks whether the content is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return a boolean value"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean isContentEmpty() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.value \u003d\u003d null || this.value.equals(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Sets the value of the content."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param value the content to be set"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setValue(String value) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        checkArgument(isValidContent(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Adds new content to a diary."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param appendingStr the new string being being added"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void add(String appendingStr) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(this.value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        checkArgument(isValidContent(new StringBuilder(this.value).append(appendingStr).toString()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!isContentEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.value \u003d sb.append(appendingStr).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static boolean isValidContent(String value) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return value.length() \u003c\u003d 200;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Content content \u003d (Content) o;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.value.equals(content.value);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 94
    }
  },
  {
    "path": "src/main/java/fithelper/model/diary/Diary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Represents a diary in diary list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class Diary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    //Identity field"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final DiaryId diaryId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    //FoodCalorieEntry fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private DiaryDate diaryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Content content;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Diary (DiaryDate diaryDate, Content content) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(diaryDate, content);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diaryDate \u003d diaryDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diaryId \u003d new DiaryId(diaryDate.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DiaryId getDiaryId() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return diaryId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DiaryDate getDiaryDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return diaryDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Content getContent() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Pends new content to the diary."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param str newly added content"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void addContent(String str) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.content.add(str);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Clears the content of the diary."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void clearContent() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.content \u003d new Content(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if both Diary of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * This defines a weaker notion of equality between two entries."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean isSameDiary(Diary anotherDiary) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (anotherDiary \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return anotherDiary !\u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 anotherDiary.getDiaryDate().equals(getDiaryDate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return String.format(\"ID: %s Date: [%s] Content: %s\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                diaryId, diaryDate, content);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Diary diary \u003d (Diary) o;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return diaryId.equals(diary.getDiaryId().value);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Objects.hash(this.diaryId);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 1,
      "WANG-Yuchen-Alice": 88
    }
  },
  {
    "path": "src/main/java/fithelper/model/diary/DiaryDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Represents ID of a diary."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class DiaryDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Date conversion from strings has failed.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DiaryDate.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private LocalDate diaryDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs a {@code DiaryDate}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DiaryDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diaryDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.value \u003d this.diaryDate.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs a {@code DiaryDate}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param diaryDate diary Date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DiaryDate(LocalDate diaryDate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diaryDate \u003d diaryDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.value \u003d diaryDate.format(formatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs a {@code DiaryDate}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param dateStr a string representation of date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DiaryDate(String dateStr) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateStr, formatter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            this.diaryDate \u003d date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            this.value \u003d diaryDate.format(formatter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new ParseException(MESSAGE_ERROR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Checks whether a date string is valid for LocalDate conversion."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param dateStr"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static boolean isValidDate(String dateStr) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateStr, formatter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            logger.info(String.valueOf(date));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public LocalDate getDiaryDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return diaryDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.diaryDate.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        DiaryDate diaryDate \u003d (DiaryDate) o;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return diaryDate.equals(diaryDate.diaryDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Objects.hash(diaryDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 102
    }
  },
  {
    "path": "src/main/java/fithelper/model/diary/DiaryId.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Represents ID of a diary."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class DiaryId {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs a {@code DiaryId}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param value diary id."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DiaryId(String value) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        DiaryId diaryId \u003d (DiaryId) o;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return value \u003d\u003d diaryId.value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 42
    }
  },
  {
    "path": "src/main/java/fithelper/model/diary/DiaryMain.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * This class is for testing and debugging."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class DiaryMain {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Main testing method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param args user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static void main(String[] args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Diary myDiary \u003d new Diary(new DiaryDate(\"2015-03-16\"), new Content(\"I am enjoying my life.\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        System.out.println(myDiary.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        myDiary.addContent(\"And I love myself.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        System.out.println(myDiary.getContent());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 20
    }
  },
  {
    "path": "src/main/java/fithelper/model/diary/UniqueDiaryList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.exceptions.DiaryNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.exceptions.DuplicateDiaryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * A list of diaries that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * An diary is considered unique by comparing using {@code Entry#isSameEntry(diary)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * diaries uses Entry#isSameEntry(diary) for equality so as to ensure that the diary being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * unique in terms of identity in the UniqueEntryList. However, the removal of an diary uses Entry#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * as to ensure that the diary with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * @see Diary#isSameDiary(Diary)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class UniqueDiaryList implements Iterable\u003cDiary\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final ObservableList\u003cDiary\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final ObservableList\u003cDiary\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if the list contains an equivalent diary as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean contains(Diary toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDiary);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if the list contains an equivalent diary as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean containsDate(ObservableList\u003cDiary\u003e list, String toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (Diary diary: internalList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (diary.getDiaryDate().toString().equalsIgnoreCase(toCheck)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Adds an diary to the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The diary must not already exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void add(Diary toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (containsDate(this.internalList, toAdd.getDiaryDate().toString())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            int oldIndex \u003d getIndex(internalList, toAdd.getDiaryDate().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            internalList.set(oldIndex, toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int getIndex(ObservableList\u003cDiary\u003e internalList, String dateStr) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(dateStr);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        List\u003cDiary\u003e tempList \u003d internalList.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (int i \u003d 0; i \u003c tempList.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            Diary thisDiary \u003d tempList.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (thisDiary.getDiaryDate().toString().equalsIgnoreCase(dateStr)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Replaces the diary {@code target} in the list with {@code editedDiary}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The diary identity of {@code editedDiary} must not be the same as another existing diary in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setDiary(String target, Diary editedDiary) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(target, editedDiary);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!containsDate(internalList, target)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            add(editedDiary);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        internalList.remove(target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        internalList.add(editedDiary);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Replaces the contents of this list with {@code diaries}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code diaries} must not contain duplicate diaries."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setDiaries(List\u003cDiary\u003e diaries) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(diaries);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!diariesAreUnique(diaries)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new DuplicateDiaryException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        internalList.setAll(diaries);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setDiaries(UniqueDiaryList replacement) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Removes the equivalent diary from the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The diary must exist in the list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void remove(Diary toRemove) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new DiaryNotFoundException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Removes a diary whose date is in string representation of dateStr"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param dateStr string representation of diary date"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void remove(String dateStr) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(dateStr);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        int oldIndex \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        List\u003cDiary\u003e tempList \u003d internalList.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (int i \u003d 0; i \u003c tempList.size(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (tempList.get(i).getDiaryDate().toString().equalsIgnoreCase(dateStr)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                oldIndex \u003d i;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Diary toRemove \u003d internalList.get(oldIndex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        internalList.remove(toRemove);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cDiary\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Iterator\u003cDiary\u003e iterator() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof UniqueDiaryList // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDiaryList) other).internalList));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if {@code diaries} contains only unique diaries."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private boolean diariesAreUnique(List\u003cDiary\u003e diaries) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (int i \u003d 0; i \u003c diaries.size() - 1; i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            for (int j \u003d i + 1; j \u003c diaries.size(); j++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                if (diaries.get(i).isSameDiary(diaries.get(j))) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 176
    }
  },
  {
    "path": "src/main/java/fithelper/model/diary/exceptions/DiaryNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.diary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Signals that the operation is unable to find the specified diary."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class DiaryNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 7
    }
  },
  {
    "path": "src/main/java/fithelper/model/diary/exceptions/DuplicateDiaryException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.diary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Signals that the operation will result in duplicate Diaries (Diaries are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class DuplicateDiaryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DuplicateDiaryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(\"Operation would result in duplicate diaries\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 11
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/Calorie.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a Entry\u0027s calorie in FitHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCalorie(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Calorie {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Calorie should a positive number.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final double T \u003d 0.0001; // tolerance for double comparision."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code Calorie}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param calorie A valid calorie of entry."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Calorie(String calorie) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(calorie);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidCalorie(calorie), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d Double.parseDouble(calorie);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid calorie."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidCalorie(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        double testValue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            testValue \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return testValue \u003e 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public Double getValue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return String.format(\"%.0f\", value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Calorie // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 Math.abs(value - ((Calorie) other).value) \u003c T); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 4,
      "lm5lm5": 1,
      "IYVVVVV": 56
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/Duration.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * Represents a Entry\u0027s duration in FitHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDuration(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Duration can only be greater than or equals to 0 (hrs)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * The first character of the entry name must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param duration A valid duration."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public Duration(String duration) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        checkArgument(isValidDuration(duration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        value \u003d duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Returns true if a given string is a valid duration."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static boolean isValidDuration(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        boolean isValid;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            double temp \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (temp \u003e\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    isValid \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    isValid \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                isValid \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public long getHours() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        long hours \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        hours \u003d (long) Double.parseDouble(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return hours;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public long getMinutes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        int indexOfDecimal \u003d value.indexOf(\".\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (indexOfDecimal \u003c 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        Double minutes \u003d Double.parseDouble(value.substring((indexOfDecimal)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return (long) (60 * minutes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u0026\u0026 value.equals(((Name) other).value)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 91
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/Entry.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a Entry in the FitHelper."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class Entry {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Calorie calorie;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Entry(Type type, Name name, Time time, Location location, Calorie calorie) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireAllNonNull(type, name, location, time, calorie);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.status \u003d new Status(\"Undone\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.remark \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.duration \u003d new Duration(\"1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public Entry(Type type, Name name, Time time, Location location, Calorie calorie, Remark remark,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                 Duration duration) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireAllNonNull(type, name, location, time, calorie);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.status \u003d new Status(\"Undone\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public Entry(Type type, Name name, Time time, Location location, Calorie calorie, Remark remark) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireAllNonNull(type, name, location, time, calorie);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.status \u003d new Status(\"Undone\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.duration \u003d new Duration(\"1\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Entry(Type type, Name name, Time time, Location location, Calorie calorie, Status status, Remark remark) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireAllNonNull(type, name, location, time, calorie);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.duration \u003d new Duration(\"1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public Entry(Type type, Name name, Time time, Location location, Calorie calorie, Status status) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireAllNonNull(type, name, location, time, calorie);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.remark \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.duration \u003d new Duration(\"1\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public Entry(Type type, Name name, Time time, Location location, Calorie calorie,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                 Duration duration) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireAllNonNull(type, name, location, time, calorie);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.status \u003d new Status(\"Undone\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.remark \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public Entry(Type type, Name name, Time time, Location location, Calorie calorie, Status status,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                 Remark remark, Duration duration) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireAllNonNull(type, name, location, time, calorie);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public Entry(Type type, Name name, Time time, Location location, Calorie calorie, Status status,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                 Duration duration) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireAllNonNull(type, name, location, time, calorie);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.remark \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return time.getDate();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return time.getDateTime();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Calorie getCalorie() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public Double getCalorieValue() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return calorie.getValue();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public long getMinutes() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return duration.getMinutes();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public long getHours() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return duration.getHours();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void addRemark(Remark remark) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean isFood() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.type.getValue().equals(\"food\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean isSports() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.type.getValue().equals(\"sports\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.getStatus().value.equalsIgnoreCase(\"Done\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean isUndone() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return !this.isDone();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean isToday(String dateStr) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return getTime().getDateStr().equalsIgnoreCase(dateStr);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if both Entry of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * This defines a weaker notion of equality between two entries."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean isSameEntry(Entry anotherEntry) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (anotherEntry \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return anotherEntry !\u003d null"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 anotherEntry.getName().equals(getName())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 (anotherEntry.getLocation().equals(getLocation()))"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 (anotherEntry.getTime().equals(getTime()));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Returns true if both Entry has time clashes."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * This defines a weaker notion of equality between two entries."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public boolean hasTimeClashes(Entry anotherEntry) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (anotherEntry \u003d\u003d this) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        java.time.Duration.between(anotherEntry.getTime().dateTime, getTime().dateTime).toMinutes();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        boolean hasClash;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (anotherEntry.getTime().dateTime.isBefore(getTime().dateTime)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            hasClash \u003d anotherEntry !\u003d null \u0026\u0026 hasTimeClashes(anotherEntry, this);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            hasClash \u003d anotherEntry !\u003d null \u0026\u0026 hasTimeClashes(this, anotherEntry);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return hasClash;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Checks whether two entries have any time clashes, returns true if have"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public boolean hasTimeClashes(Entry entry, Entry toBeCompared) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        long duration \u003d entry.getDuration().getHours() * 60 + entry.getDuration().getMinutes();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        long difference \u003d java.time.Duration.between(entry.getTime().dateTime,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                toBeCompared.getTime().dateTime).toMinutes();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return (difference \u003c duration \u0026\u0026 difference \u003e\u003d 0);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if both entries have the same identity and data fields."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * This defines a stronger notion of equality between two entries."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!(other instanceof Entry)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Entry otherEntry \u003d (Entry) other;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return otherEntry.getName().equals(getName())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 otherEntry.getType().equals(getType())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 otherEntry.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 otherEntry.getTime().equals(getTime())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 otherEntry.getCalorie().equals(getCalorie());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return Objects.hash(type, name, time, location, calorie);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        builder.append(getName() + \"\\n\")"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"Time: \")"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                .append(getTime() + \"\\n\")"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"Location: \")"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                .append(getLocation() + \"\\n\")"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"Calorie: \")"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                .append(getCalorie() + \"\\n\")"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\"Status: \")"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                .append(getStatus() + \"\\n\")"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(\"Remark: \")"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                .append(getRemark().toString() + \"\\n\")"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                .append(\"Duration: \")"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                .append(getDuration());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 147,
      "lm5lm5": 5,
      "IYVVVVV": 55,
      "WANG-Yuchen-Alice": 112
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/Location.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a Entry\u0027s location in FitHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Location can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * The first character of the location must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 57
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a Entry\u0027s name in FitHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Names can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * The first character of the entry name must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 value.equals(((Name) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 11,
      "-": 47
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Tests that a {@code Entry}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cEntry\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static List\u003cString\u003e nullWords \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        nullWords.add(\"wugc2iuegv98yquy\u003e%$wvjugf398ywiugd\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static NameContainsKeywordsPredicate getVaguePredicate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new NameContainsKeywordsPredicate(nullWords);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean test(Entry entry) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(entry.getName().value, keyword));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 6,
      "WANG-Yuchen-Alice": 8,
      "-": 25
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/Remark.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a Entry\u0027s remark in FitHelper."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * check if a remark is valid or not"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static boolean isValidRemark(String remark) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        boolean isValid;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            isValid \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 12,
      "IYVVVVV": 33
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/Status.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a Entry\u0027s status in FitHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStatus(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Status {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Status can only be Done or Undone.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code Status}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param status A valid status of entry."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Status(String status) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidStatus(status), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid status."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidStatus(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return \"Done\".equals(test) || \"Undone\".equals(test);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Status // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 value.equals(((Status) other).value)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 50
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a Entry\u0027s time in FitHelper."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time should be in format: time string hh:mm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public final LocalTime time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code Time}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param timeStr A valid time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Time(String timeStr) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(timeStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        com.joestelmach.natty.Parser parser \u003d new com.joestelmach.natty.Parser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        List groups \u003d parser.parse(timeStr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        checkArgument(groups.size() \u003e 0, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        DateGroup dateGroup \u003d (DateGroup) groups.get(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        checkArgument(dateGroup.getDates().size() \u003e 0, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        Date localDate \u003d dateGroup.getDates().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        dateTime \u003d LocalDateTime.ofInstant(localDate.toInstant(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        time \u003d dateTime.toLocalTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        date \u003d dateTime.toLocalDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String truncatedTime \u003d time.format(DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        value \u003d concat(truncatedTime, date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        boolean isValid \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String delims \u003d \" \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String[] tokens \u003d test.split(delims);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (tokens.length \u003c 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            delims \u003d \":\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            String[] time \u003d tokens[tokens.length - 1].split(delims);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (time.length !\u003d 2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                isValid \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                com.joestelmach.natty.Parser parser \u003d new com.joestelmach.natty.Parser();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                List groups \u003d parser.parse(test);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                if (groups.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    isValid \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    DateGroup dateGroup \u003d (DateGroup) groups.get(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    if (dateGroup.getDates().size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        isValid \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public String concat(String time, LocalDate date) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return date + \" \" + time;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 50,
      "IYVVVVV": 44,
      "WANG-Yuchen-Alice": 18
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/TimeMain.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * This main class is for testing and debugging only."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class TimeMain {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * For debugging."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param args user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String timeStr \u003d \"2020-03-31 06:15\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        Time tryTime \u003d new Time(timeStr);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        System.out.println(tryTime.getDateStr());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 1,
      "WANG-Yuchen-Alice": 17
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/Type.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a Entry\u0027s type in FitHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Type can only be food/f or sports/s.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code Type}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param type A valid type of entry."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Type(String type) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d (\"food\".equals(type) || \"f\".equals(type)) ? \"food\" : \"sports\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid type."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return \"food\".equals(test) || \"f\".equals(test) || \"sports\".equals(test) || \"s\".equals(test);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Type // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 value.equals(((Type) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 54
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/UniqueEntryList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * A list of entries that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * An entry is considered unique by comparing using {@code Entry#isSameEntry(Entry)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * entries uses Entry#isSameEntry(Entry) for equality so as to ensure that the entry being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * unique in terms of identity in the UniqueEntryList. However, the removal of an entry uses Entry#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * as to ensure that the entry with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * @see Entry#isSameEntry(Entry)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class UniqueEntryList implements Iterable\u003cEntry\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if the list contains an equivalent entry as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean contains(Entry toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Returns true if the list contains an equivalent entry as the given argument."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public long countClashes(Entry toCheck) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return internalList.stream().filter(toCheck::hasTimeClashes).count();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Adds an entry to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The entry must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void add(Entry toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Replaces the entry {@code target} in the list with {@code editedEntry}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!target.isSameEntry(editedEntry) \u0026\u0026 contains(editedEntry)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        internalList.set(index, editedEntry);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Replaces the contents of this list with {@code entries}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * {@code entries} must not contain duplicate entries."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setEntries(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!entriesAreUnique(entries)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void setEntries(UniqueEntryList replacement) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Removes the equivalent entry from the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * The entry must exist in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void remove(Entry toRemove) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ObservableList\u003cEntry\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Iterator\u003cEntry\u003e iterator() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof UniqueEntryList // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEntryList) other).internalList));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Returns true if {@code entries} contains only unique entries."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private boolean entriesAreUnique(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (int i \u003d 0; i \u003c entries.size() - 1; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            for (int j \u003d i + 1; j \u003c entries.size(); j++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                if (entries.get(i).isSameEntry(entries.get(j))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 8,
      "IYVVVVV": 13,
      "WANG-Yuchen-Alice": 123
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/VeventList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.commons.util.EventUtil.entryToVEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " *  A list of VEvents."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class VeventList {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private final ObservableList\u003cVEvent\u003e vEvents \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private final ObservableList\u003cVEvent\u003e vEventUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        FXCollections.unmodifiableObservableList(vEvents);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public VeventList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Generates a new list of events based on two lists"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public VeventList(FilteredList\u003cEntry\u003e filteredFoodEntries, FilteredList\u003cEntry\u003e filteredSportsEntries) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        refreshedList(filteredFoodEntries, filteredSportsEntries);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Refreshes the existing list with new lists."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void refreshedList(FilteredList\u003cEntry\u003e foodEntries, FilteredList\u003cEntry\u003e sportsEntries) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(foodEntries);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(sportsEntries);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        ArrayList\u003cVEvent\u003e vEvents \u003d entriesToVEvents(foodEntries, sportsEntries);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireAllNonNull(vEvents);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.vEvents.setAll(vEvents);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Maps events to VEvents"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ArrayList\u003cVEvent\u003e entriesToVEvents(FilteredList\u003cEntry\u003e foodEntries, FilteredList\u003cEntry\u003e sportsEntries) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        ArrayList\u003cVEvent\u003e veventList \u003d new ArrayList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        for (Entry entry: foodEntries) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            veventList.add(entryToVEvent(entry));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        for (Entry entry: sportsEntries) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            veventList.add(entryToVEvent(entry));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return veventList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Returns an unmodifiable ObservableList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public ObservableList\u003cVEvent\u003e getVEvents() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return this.vEventUnmodifiableList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Add a new vEvent to the vEvents list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param entry to add to the list after converted to VEvent."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void addVEvent(Entry entry) throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        VEvent vEvent \u003d entryToVEvent(entry);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(vEvent);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (contains(vEvent)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            throw new IllegalValueException(\"Duplicated VEvents cannot be added\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        vEvents.add(vEvent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Returns true if the list contains an equivalent VEvent as the given argument."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public boolean contains(VEvent event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return vEvents.stream().anyMatch(vEvent -\u003e equals(vEvent, event));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Returns true if the two parameters are equal."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private boolean equals(VEvent vEvent, VEvent event) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        boolean isEqual \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (!vEvent.getSummary().equals(event.getSummary())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            || !vEvent.getDateTimeEnd().equals(event.getDateTimeEnd())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            || !vEvent.getDateTimeStart().equals(event.getDateTimeStart())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            || !vEvent.getCategories().equals(event.getCategories())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            isEqual \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return isEqual;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Replace the old entry with the updated one."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param entry the old entry"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param newEntry updated entry"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setVEvent(Entry entry, Entry newEntry) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        VEvent newEvent \u003d entryToVEvent(newEntry);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        VEvent event \u003d entryToVEvent(entry);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireAllNonNull(newEvent, event);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        int index \u003d vEvents.indexOf(event);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (!event.equals(newEvent) \u0026\u0026 contains(newEvent)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        vEvents.set(index, newEvent);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Removes the equivalent entry from the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * The entry must exist in the list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void deleteVEvent(Entry toRemove) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        VEvent temp \u003d entryToVEvent(toRemove);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (!vEvents.remove(temp)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 138
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/exceptions/DuplicateEntryException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Signals that the operation will result in duplicate Entries (Entries are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class DuplicateEntryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DuplicateEntryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(\"Operation would result in duplicate entries\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "WANG-Yuchen-Alice": 10
    }
  },
  {
    "path": "src/main/java/fithelper/model/entry/exceptions/EntryNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.entry.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Signals that the operation is unable to find the specified entry."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "WANG-Yuchen-Alice": 5
    }
  },
  {
    "path": "src/main/java/fithelper/model/profile/Address.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents the User\u0027s address in the FitHelper profile."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 4,
      "-": 53
    }
  },
  {
    "path": "src/main/java/fithelper/model/profile/Age.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents the User\u0027s age in FitHelper profile."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Your age should a positive integer.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code Type}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param age A valid user\u0027 age."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d Integer.parseInt(age);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid age."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        double testValue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            testValue \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return testValue \u003e 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return String.format(\"%d\", value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Age // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Age) other).value); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 56
    }
  },
  {
    "path": "src/main/java/fithelper/model/profile/Gender.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a User\u0027s gender in FitHelper profile."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Gender can only be male/m or female/f.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code Gender}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param gender A valid gender of user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d (\"female\".equals(gender) || \"f\".equals(gender)) ? \"female\" : \"male\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid gender."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return \"female\".equals(test) || \"f\".equals(test) || \"male\".equals(test) || \"m\".equals(test);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Gender// instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 54
    }
  },
  {
    "path": "src/main/java/fithelper/model/profile/Height.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a User\u0027s height in FitHelper profile."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Height should a positive number united in cm.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final double T \u003d 0.0001; // tolerance for double comparision."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code Height}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param height A valid height of user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Height(String height) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidHeight(height), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d Double.parseDouble(height);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        double testValue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            testValue \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return testValue \u003e 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return String.format(\"%.1f\", value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 Math.abs(value - ((Height) other).value) \u003c T); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 57
    }
  },
  {
    "path": "src/main/java/fithelper/model/profile/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents User\u0027s name in FitHelper profile."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please input your name correctly, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * The first character of the user name must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 value.equals(((Name) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 58
    }
  },
  {
    "path": "src/main/java/fithelper/model/profile/Profile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.weight.Bmi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.weight.Weight;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.weight.WeightValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents the user profile in the FitHelper."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Height height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final TargetWeight targetWeight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final WeightValue currentWeight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Bmi currentBmi;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Construct an empty profile."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Profile() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.name \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.age \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.gender \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.address \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.height \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.targetWeight \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.currentWeight \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.currentBmi \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Construct a profile without current weight and bmi."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Every other field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Profile(Name name, Gender gender, Age age, Address address, Height height, TargetWeight targetWeight) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireAllNonNull(name, age, gender, address, height, targetWeight);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.currentWeight \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.currentBmi \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Construct a profile with weight."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Profile(Name name, Gender gender, Age age, Address address, Height height,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                   TargetWeight targetWeight, Weight weight) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireAllNonNull(name, age, gender, address, height, targetWeight);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.currentWeight \u003d weight.getWeightValue();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.currentBmi \u003d weight.getBmi();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Construct a profile with current weight and bmi."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Profile(Name name, Gender gender, Age age, Address address, Height height,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                   TargetWeight targetWeight, WeightValue weight, Bmi bmi) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireAllNonNull(name, age, gender, address, height, targetWeight);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.currentWeight \u003d weight;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.currentBmi \u003d bmi;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public TargetWeight getTargetWeight() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return targetWeight;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public WeightValue getCurrentWeight() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return currentWeight;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Bmi getCurrentBmi() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return currentBmi;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return Objects.hash(name, gender, age, address, height, targetWeight);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } else if (other instanceof Profile) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            Profile otherProfile \u003d (Profile) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return this.name.equals(otherProfile.name)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 this.gender.equals(otherProfile.gender)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 this.age.equals(otherProfile.age)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 this.address.equals(otherProfile.address)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 this.height.equals(otherProfile.height)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    \u0026\u0026 this.targetWeight.equals(otherProfile.targetWeight);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(this.name \u003d\u003d null ? \"NA\" : getName())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(this.gender \u003d\u003d null ? \"NA\" : getGender())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\" Age: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(this.age \u003d\u003d null ? \"NA\" : getAge())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(this.age \u003d\u003d null ? \"NA\" : getAddress())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\" Height:\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(this.height \u003d\u003d null ? \"NA\" : getHeight())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\" Target Weight: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(this.targetWeight \u003d\u003d null ? \"NA\" : getTargetWeight().toString())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\" Current Weight: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(this.currentWeight \u003d\u003d null ? \"NA\" : getCurrentWeight())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\" Current BMI: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(this.currentBmi \u003d\u003d null ? \"NA\" : getCurrentBmi());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 166
    }
  },
  {
    "path": "src/main/java/fithelper/model/profile/TargetWeight.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a User\u0027s TargetWeight in FitHelper profile."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTargetWeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class TargetWeight {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Target Weight should a positive number united in kg.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final double T \u003d 0.0001; // tolerance for double comparision."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code TargetWeight}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param targetWeight A valid TargetWeight of user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public TargetWeight(String targetWeight) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(targetWeight);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidTargetWeight(targetWeight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d Double.parseDouble(targetWeight);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid TargetWeight."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidTargetWeight(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        double testValue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            testValue \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return testValue \u003e 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return String.format(\"%.2f\", value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof TargetWeight // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 Math.abs(value - ((TargetWeight) other).value) \u003c T); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 57
    }
  },
  {
    "path": "src/main/java/fithelper/model/today/Today.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.today;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Represents the Today Page in the FitHelper."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class Today {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final UniqueEntryList todayFoodEntries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final UniqueEntryList todaySportsEntries \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private TodayDate todayDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Today(TodayDate todayDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        requireAllNonNull(todayDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.todayDate \u003d todayDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructor overloading."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Today() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.todayDate \u003d new TodayDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public TodayDate getTodayDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return todayDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setTodayDate(TodayDate todayDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.todayDate \u003d todayDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String getTodayDateStr() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.todayDate.getTodayDateStr();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return Objects.hash(todayDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        builder.append(\"Today Date: \")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .append(getTodayDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 59
    }
  },
  {
    "path": "src/main/java/fithelper/model/today/TodayDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.model.today;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Represents Today\u0027s Date in FitHelper Today Page."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class TodayDate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private LocalDate todayDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private String todayDateStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public TodayDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.todayDateStr \u003d dtf.format(todayDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public LocalDate getTodayDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return todayDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setTodayDate(LocalDate todayDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.todayDate \u003d todayDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String getTodayDateStr() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return todayDateStr;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void setTodayDateStr(String todayDateStr) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.todayDateStr \u003d todayDateStr;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.todayDateStr;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                || (other instanceof TodayDate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u0026\u0026 this.todayDateStr.equals(((TodayDate) other).getTodayDateStr())); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return this.todayDate.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 53
    }
  },
  {
    "path": "src/main/java/fithelper/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.FitHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyFitHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.UserProfile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Calorie;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Age;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Height;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Profile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.TargetWeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.weight.Bmi;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.weight.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.weight.Weight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.weight.WeightValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Contains utility methods for populating {@code FitHelper} with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Gets sample food and sports entries."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return An array of food and sports entries."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Entry[] getSampleEntries() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Entry[]{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"food\"), new Name(\"Noodles\"), new Time(\"2020-03-01 15:30\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    new Location(\"Utown canteen\"), new Calorie(\"150.5\"), new Remark(\"Too expensive\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    new Duration(\"1\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"food\"), new Name(\"Mala\"), new Time(\"2020-03-01 15:30\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        new Location(\"Utown canteen\"), new Calorie(\"150.5\"), new Remark(\"Too expensive\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"food\"), new Name(\"Apple juice\"), new Time(\"2020-03-01 11:30\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    new Location(\"Utown 711\"), new Calorie(\"79\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"food\"), new Name(\"Lemon juice\"), new Time(\"2020-03-01 11:30\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        new Location(\"Utown 711\"), new Calorie(\"79\"), new Duration(\"1\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"sports\"), new Name(\"Running\"), new Time(\"2020-03-01 10:00\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    new Location(\"Utown gym\"), new Calorie(\"300\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"sports\"), new Name(\"Running\"), new Time(\"2020-03-01 10:00\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        new Location(\"Track\"), new Calorie(\"300\"), new Duration(\"1\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"s\"), new Name(\"Swimming\"), new Time(\"2020-03-01 20:20\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    new Location(\"Sports Center\"), new Calorie(\"450.5\"), new Remark(\"Very tired.\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"s\"), new Name(\"Jogging\"), new Time(\"2020-03-01 20:20\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        new Location(\"Track\"), new Calorie(\"450.5\"), new Remark(\"Very tired.\"), new Duration(\"1\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"f\"), new Name(\"Ice-cream\"), new Time(\"2020-03-31 14:30\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    new Location(\"YIH 711\"), new Calorie(\"700\"), new Remark(\"Not healthy\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"f\"), new Name(\"Ice-cream\"), new Time(\"2020-03-31 14:30\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        new Location(\"YIH\"), new Calorie(\"700\"), new Remark(\"Not healthy\"), new Duration(\"1\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"food\"), new Name(\"Chicken Rice\"), new Time(\"2020-03-01 11:30\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            new Location(\"Utown FineFood\"), new Calorie(\"200\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"food\"), new Name(\"Chicken Rice\"), new Time(\"2020-03-01 11:30\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        new Location(\"The Deck\"), new Calorie(\"200\"), new Duration(\"1\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"sports\"), new Name(\"Football\"), new Time(\"2019-12-01 14:00\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    new Location(\"Utown towngreen\"), new Calorie(\"400\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"sports\"), new Name(\"Football\"), new Time(\"2019-12-01 14:00\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        new Location(\"NUS Trackfield\"), new Calorie(\"400\"), new Duration(\"1\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"s\"), new Name(\"Walking\"), new Time(\"2020-02-01 19:20\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    new Location(\"PGP\"), new Calorie(\"450.5\"), new Remark(\"Feels good\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Entry(new Type(\"s\"), new Name(\"Walking\"), new Time(\"2020-02-01 19:20\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        new Location(\"PGPR\"), new Calorie(\"450.5\"), new Remark(\"Feels good\"), new Duration(\"1\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Gets sample FitHelper."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return A FitHelper only with the sample entries."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static ReadOnlyFitHelper getSampleFitHelper() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        FitHelper sampleFitHelper \u003d new FitHelper();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        for (Entry sampleEntry : getSampleEntries()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            sampleFitHelper.addEntry(sampleEntry);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return sampleFitHelper;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Gets sample profile content."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return A profile with some sample value."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static Profile getSampleProfile() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Profile("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                new fithelper.model.profile.Name(\"Alice\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                new Gender(\"female\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                new Age(\"19\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                new Address(\"Utown CAPT\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                new Height(\"168\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                new TargetWeight(\"50\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                new Weight(new Date(\"2020-03-01\"), new WeightValue(\"52\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        new Bmi(new Height(\"168\"), new WeightValue(\"52\")))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Gets sample User Profile."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return A user profile only with the sample values for each attribute."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static ReadOnlyUserProfile getSampleUserProfile() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        UserProfile sampleUserProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        sampleUserProfile.setUserProfile(getSampleProfile());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return sampleUserProfile;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 26,
      "IYVVVVV": 77,
      "WANG-Yuchen-Alice": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/fithelper/model/weight/Bmi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.weight;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Height;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a User\u0027s Bmi in one weight record."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBmi(Height, WeightValue)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Bmi {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Bmi should be computed by both height and weight.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final double T \u003d 0.0001; // tolerance for double comparision."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final Height height;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final WeightValue weightValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code Bmi}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param height A valid height of user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param weightValue A valid weight of user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Bmi(Height height, WeightValue weightValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireAllNonNull(height, weightValue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidBmi(height, weightValue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.weightValue \u003d weightValue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        value \u003d weightValue.value / (height.value / 100.0 * height.value / 100.0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid Bmi."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidBmi(Height testHeight, WeightValue testWeight) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return testHeight.value !\u003d 0 \u0026\u0026 testWeight.value !\u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return String.format(\"%.2f\", value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Bmi // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 Math.abs(value - ((Bmi) other).value) \u003c T); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 1,
      "IYVVVVV": 58
    }
  },
  {
    "path": "src/main/java/fithelper/model/weight/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.weight;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a Weight\u0027s recording time in one weight record."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be in format: yyyy-mm-dd\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final DateTimeFormatter PARSE_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code Time}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param date A valid time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d LocalDate.parse(date, PARSE_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            LocalDate.parse(test, PARSE_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.value.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 59
    }
  },
  {
    "path": "src/main/java/fithelper/model/weight/Weight.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.weight;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a Weight record in the FitHelper."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final WeightValue weightValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Bmi bmi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Weight(Date date, WeightValue weightValue, Bmi bmi) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireAllNonNull(date, weightValue, bmi);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.weightValue \u003d weightValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.bmi \u003d bmi;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public WeightValue getWeightValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return weightValue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Bmi getBmi() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return bmi;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if both Weight record have the same date value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * This defines a weaker notion of equality between two weight records"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean isSameWeight(Weight anotherWeight) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (anotherWeight \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return anotherWeight !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 anotherWeight.getDate().equals(getDate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if both entries have the same identity and data fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * This defines a stronger notion of equality between two entries."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!(other instanceof Weight)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Weight otherWeight \u003d (Weight) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return otherWeight.getWeightValue().equals(getWeightValue())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 otherWeight.getDate().equals(getDate())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 otherWeight.getBmi().equals(getBmi());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return Objects.hash(date, weightValue, bmi);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        builder.append(\"Date: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\" Weight Value: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(getWeightValue())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(\" Bmi: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                .append(getBmi());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 91
    }
  },
  {
    "path": "src/main/java/fithelper/model/weight/WeightValue.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.model.weight;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static fithelper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a User\u0027s WeightValue in one weight record."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeightValue(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class WeightValue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"WeightValue should a positive number united in kg.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final double T \u003d 0.0001; // tolerance for double comparision."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs an {@code WeightValue}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param weightValue A valid WeightValue of user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public WeightValue(String weightValue) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(weightValue);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        checkArgument(isValidWeightValue(weightValue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        value \u003d Double.parseDouble(weightValue);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns true if a given string is a valid WeightValue."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static boolean isValidWeightValue(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        double testValue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            testValue \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return testValue \u003e 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return String.format(\"%.2f\", value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                || (other instanceof WeightValue // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u0026\u0026 Math.abs(value - ((WeightValue) other).value) \u003c T); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 57
    }
  },
  {
    "path": "src/main/java/fithelper/storage/FitHelperStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyFitHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a storage for {@link fithelper.model.FitHelper}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public interface FitHelperStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Path getFitHelperFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns FitHelper data as a {@link ReadOnlyFitHelper}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Optional\u003cReadOnlyFitHelper\u003e readFitHelper() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @see #getFitHelperFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Optional\u003cReadOnlyFitHelper\u003e readFitHelper(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Saves the given {@link ReadOnlyFitHelper} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param fitHelper cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    void saveFitHelper(ReadOnlyFitHelper fitHelper) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @see #saveFitHelper(ReadOnlyFitHelper)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    void saveFitHelper(ReadOnlyFitHelper fitHelper, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 45
    }
  },
  {
    "path": "src/main/java/fithelper/storage/JsonAdaptedDiary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Content;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.DiaryDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Jackson-friendly version of {@link fithelper.model.diary.Diary}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class JsonAdaptedDiary {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Diary\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private String diaryId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private String diaryDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs a {@code JsonAdaptedDiary} with the given diary details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public JsonAdaptedDiary(@JsonProperty(\"diaryId\") String diaryId,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            @JsonProperty(\"diaryDate\") String diaryDate,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            @JsonProperty(\"content\") String content) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diaryId \u003d diaryId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diaryDate \u003d diaryDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Converts a given {@code Diary} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public JsonAdaptedDiary(Diary source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diaryId \u003d source.getDiaryId().value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diaryDate \u003d source.getDiaryDate().value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.content \u003d source.getContent().getValue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Build {@code DiaryDate} based on Json file string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return Attribute diaryDate."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws IllegalValueException Invalid value for diaryDate."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DiaryDate buildDiaryDate() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (diaryDate \u003d\u003d null || diaryId \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    DiaryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new DiaryDate(diaryDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Build {@code Content} based on Json file string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @return Attribute content."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @throws IllegalValueException Invalid value for content."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Content buildDiaryContent() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (content \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new Content(content);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Converts this Jackson-friendly adapted diary object into the model\u0027s {@code Diary} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public Diary toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        final DiaryDate modelDate \u003d buildDiaryDate();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        final Content modelContent \u003d buildDiaryContent();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return new Diary(modelDate, modelContent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 79
    }
  },
  {
    "path": "src/main/java/fithelper/storage/JsonAdaptedEntry.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Calorie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "class JsonAdaptedEntry {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Entry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String calorie;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs a {@code JsonAdaptedEntry} with the given entry details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public JsonAdaptedEntry(@JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                            @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                            @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                            @JsonProperty(\"calorie\") String calorie,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                            @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                            @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                            @JsonProperty(\"duration\") String duration) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Converts a given {@code Entry} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public JsonAdaptedEntry(Entry source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        type \u003d source.getType().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        name \u003d source.getName().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        time \u003d source.getTime().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        calorie \u003d source.getCalorie().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        status \u003d source.getStatus().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        duration \u003d source.getDuration().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Type} based on Json file string."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute type."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for type."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Type buildType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Type.isValidType(type)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Type(type);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Name} based on Json file string."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute name."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for name."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Name buildName() throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Name(name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Time} based on Json file string."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute time."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for time."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Time buildTime() throws IllegalValueException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Time.isValidTime(time)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Time(time);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Location} based on Json file string."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute location."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for location."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Location buildLocation() throws IllegalValueException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Location(location);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Calorie} based on Json file string."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute calorie."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for calorie."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Calorie buildCalorie() throws IllegalValueException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (calorie \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Calorie.class.getSimpleName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Calorie.isValidCalorie(calorie)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Calorie(calorie);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Status} based on Json file string."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute status."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for status."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Status buildStatus() throws IllegalValueException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Status.isValidStatus(status)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Status(status);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Remark} based on Json file string."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute remark."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for remark."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Remark buildRemark() throws IllegalValueException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Remark(remark);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Build {@code Duration} based on Json file string."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @return Attribute duration."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @throws IllegalValueException Invalid value for duration."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public Duration buildDuration() throws IllegalValueException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    Duration.class.getSimpleName()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return new Duration(duration);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Converts this Jackson-friendly adapted entry object into the model\u0027s {@code Entry} object."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted entry."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Entry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Type modelType \u003d buildType();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Name modelName \u003d buildName();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Time modelTime \u003d buildTime();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Location modelLocation \u003d buildLocation();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Calorie modelCalorie \u003d buildCalorie();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Status modelStatus \u003d buildStatus();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Remark modelRemark \u003d buildRemark();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        final Duration modelDuration \u003d buildDuration();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return new Entry(modelType, modelName, modelTime, modelLocation, modelCalorie,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                modelStatus, modelRemark, modelDuration);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 23,
      "IYVVVVV": 189,
      "WANG-Yuchen-Alice": 1
    }
  },
  {
    "path": "src/main/java/fithelper/storage/JsonAdaptedProfile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Age;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Gender;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Height;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Profile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.TargetWeight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Jackson-friendly version of {@link Profile}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "class JsonAdaptedProfile {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Profile\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String age;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String height;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final String targetWeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs a {@code JsonAdaptedProfile} with the given profile details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public JsonAdaptedProfile(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                              @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                              @JsonProperty(\"age\") String age,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                              @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                              @JsonProperty(\"height\") String height,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                              @JsonProperty(\"targetWeight\") String targetWeight) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Converts a given {@code Profile} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public JsonAdaptedProfile(Profile source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        name \u003d source.getName().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        gender \u003d source.getGender().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        age \u003d String.valueOf(source.getAge().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        height \u003d String.valueOf(source.getHeight().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        targetWeight \u003d String.valueOf(source.getTargetWeight().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Name} based on Json file string."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for name."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Name buildName() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Name(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Gender} based on Json file string."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute gender."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for gender."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Gender buildGender() throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Gender(gender);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Age} based on Json file string."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute age."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for age."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Age buildAge() throws IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (age \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Age.isValidAge(age)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Age(age);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Address} based on Json file string."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute address."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for address."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Address buildAddress() throws IllegalValueException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Address(address);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code Height} based on Json file string."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute height."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for height."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Height buildHeight() throws IllegalValueException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (height \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Height.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!Height.isValidHeight(height)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Height(height);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Build {@code TargetWeight} based on Json file string."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @return Attribute targetWeight."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException Invalid value for targetWeight."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public TargetWeight buildTargetWeight() throws IllegalValueException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (targetWeight \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                    TargetWeight.class.getSimpleName()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new TargetWeight(targetWeight);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Converts this Jackson-friendly adapted profile object into the model\u0027s {@code Profile} object."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted profile."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Profile toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Name modelName \u003d buildName();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Gender modelGender \u003d buildGender();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Age modelAge \u003d buildAge();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Address modelAddress \u003d buildAddress();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final Height modelHeight \u003d buildHeight();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        final TargetWeight modelTargetWeight \u003d buildTargetWeight();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return new Profile(modelName, modelGender, modelAge, modelAddress,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                modelHeight, modelTargetWeight);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 172
    }
  },
  {
    "path": "src/main/java/fithelper/storage/JsonFitHelperStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyFitHelper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * A class to access FitHelper data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class JsonFitHelperStorage implements FitHelperStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFitHelperStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public JsonFitHelperStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Path getFitHelperFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Optional\u003cReadOnlyFitHelper\u003e readFitHelper() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return readFitHelper(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Similar to {@link #readFitHelper()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Optional\u003cReadOnlyFitHelper\u003e readFitHelper(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Optional\u003cJsonSerializableFitHelper\u003e jsonFitHelper \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                filePath, JsonSerializableFitHelper.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!jsonFitHelper.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.of(jsonFitHelper.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } catch (Exception i) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            logger.info(\"Exception happened while reading data\" + i.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            throw new DataConversionException(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void saveFitHelper(ReadOnlyFitHelper fitHelper) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        saveFitHelper(fitHelper, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Similar to {@link #saveFitHelper(ReadOnlyFitHelper)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void saveFitHelper(ReadOnlyFitHelper fitHelper, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(fitHelper);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFitHelper(fitHelper), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 1,
      "IYVVVVV": 26,
      "WANG-Yuchen-Alice": 6,
      "-": 50
    }
  },
  {
    "path": "src/main/java/fithelper/storage/JsonSerializableFitHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import static fithelper.logic.commands.diary.AddDiaryCommand.MESSAGE_DUPLICATE_DIARY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.FitHelper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyFitHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * An Immutable FitHelper that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "@JsonRootName(value \u003d \"fithelper\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "class JsonSerializableFitHelper {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"Entries list contains duplicate entry(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final List\u003cJsonAdaptedEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final List\u003cJsonAdaptedDiary\u003e diaries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs a {@code JsonSerializableFitHelper} with the given entries."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public JsonSerializableFitHelper(@JsonProperty(\"entries\") List\u003cJsonAdaptedEntry\u003e entries,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                     @JsonProperty(\"diaries\") List\u003cJsonAdaptedDiary\u003e diaries) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.entries.addAll(entries);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diaries.addAll(diaries);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Converts a given {@code ReadOnlyFitHelper} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFitHelper}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public JsonSerializableFitHelper(ReadOnlyFitHelper source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        entries.addAll(source.getFoodList().stream().map(JsonAdaptedEntry::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        entries.addAll(source.getSportsList().stream().map(JsonAdaptedEntry::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        diaries.addAll(source.getDiaryList().stream().map(JsonAdaptedDiary::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Converts this fitHelper into the model\u0027s {@code FitHelper} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public FitHelper toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        FitHelper fitHelper \u003d new FitHelper();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (JsonAdaptedDiary jsonAdaptedOrder : diaries) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            Diary diary \u003d jsonAdaptedOrder.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (fitHelper.hasDiary(diary)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DIARY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            fitHelper.addDiary(diary);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        for (JsonAdaptedEntry jsonAdaptedEntry : entries) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            Entry entry \u003d jsonAdaptedEntry.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            if (fitHelper.hasEntry(entry)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTRY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            fitHelper.addEntry(entry);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return fitHelper;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 60,
      "WANG-Yuchen-Alice": 17
    }
  },
  {
    "path": "src/main/java/fithelper/storage/JsonSerializableUserProfile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.UserProfile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * An Immutable UserProfile that is serializable to JSON format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "@JsonRootName(value \u003d \"userprofile\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "class JsonSerializableUserProfile {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final JsonAdaptedProfile profile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Constructs a {@code JsonSerializableUserProfile} with the given Profile."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public JsonSerializableUserProfile(@JsonProperty(\"profile\") JsonAdaptedProfile profile) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.profile \u003d profile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Converts a given {@code ReadOnlyUserProfile} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableUserProfile}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public JsonSerializableUserProfile(ReadOnlyUserProfile source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.profile \u003d new JsonAdaptedProfile(source.getUserProfile());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Converts this profile into the model\u0027s {@code UserProfile} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public UserProfile toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        UserProfile userProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        userProfile.setUserProfile(this.profile.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 45
    }
  },
  {
    "path": "src/main/java/fithelper/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/fithelper/storage/JsonUserProfileStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * A class to access UserProfile data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class JsonUserProfileStorage implements UserProfileStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUserProfileStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public JsonUserProfileStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Path getUserProfilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Optional\u003cReadOnlyUserProfile\u003e readUserProfile() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return readUserProfile(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Similar to {@link #readUserProfile()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Optional\u003cReadOnlyUserProfile\u003e readUserProfile(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        Optional\u003cJsonSerializableUserProfile\u003e jsonUserProfile \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                filePath, JsonSerializableUserProfile.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (!jsonUserProfile.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            return Optional.of(jsonUserProfile.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } catch (Exception i) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            logger.info(\"Exception happened while reading data\" + i.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            throw new DataConversionException(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void saveUserProfile(ReadOnlyUserProfile userProfile) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        logger.fine(\"Attempting to write user profile to data file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        saveUserProfile(userProfile, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Similar to {@link #saveUserProfile(ReadOnlyUserProfile)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void saveUserProfile(ReadOnlyUserProfile userProfile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(userProfile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableUserProfile(userProfile), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 83
    }
  },
  {
    "path": "src/main/java/fithelper/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyFitHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public interface Storage extends FitHelperStorage, UserPrefsStorage, UserProfileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Path getFitHelperFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Optional\u003cReadOnlyFitHelper\u003e readFitHelper() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    void saveFitHelper(ReadOnlyFitHelper fitHelper) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Path getUserProfilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Optional\u003cReadOnlyUserProfile\u003e readUserProfile() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    void saveUserProfile(ReadOnlyUserProfile userProfile) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 17,
      "-": 17
    }
  },
  {
    "path": "src/main/java/fithelper/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyFitHelper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Manages storage of FitHelper data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private FitHelperStorage fitHelperStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private UserProfileStorage userProfileStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public StorageManager(FitHelperStorage fitHelperStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                          UserProfileStorage userProfileStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.fitHelperStorage \u003d fitHelperStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        this.userProfileStorage \u003d userProfileStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FitHelper methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Path getFitHelperFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return fitHelperStorage.getFitHelperFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Optional\u003cReadOnlyFitHelper\u003e readFitHelper() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return readFitHelper(fitHelperStorage.getFitHelperFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Optional\u003cReadOnlyFitHelper\u003e readFitHelper(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return fitHelperStorage.readFitHelper(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void saveFitHelper(ReadOnlyFitHelper fitHelper) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        saveFitHelper(fitHelper, fitHelperStorage.getFitHelperFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void saveFitHelper(ReadOnlyFitHelper fitHelper, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        fitHelperStorage.saveFitHelper(fitHelper, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Profile methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Path getUserProfilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return userProfileStorage.getUserProfilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Optional\u003cReadOnlyUserProfile\u003e readUserProfile() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return readUserProfile(userProfileStorage.getUserProfilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public Optional\u003cReadOnlyUserProfile\u003e readUserProfile(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        logger.fine(\"Attempting to read user profile data from file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        return userProfileStorage.readUserProfile(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void saveUserProfile(ReadOnlyUserProfile userProfile) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        saveUserProfile(userProfile, userProfileStorage.getUserProfilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void saveUserProfile(ReadOnlyUserProfile userProfile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        logger.fine(\"Attempting to write to user profile data file: \" + filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        userProfileStorage.saveUserProfile(userProfile, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 55,
      "-": 56
    }
  },
  {
    "path": "src/main/java/fithelper/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a storage for {@link fithelper.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Saves the given {@link fithelper.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/fithelper/storage/UserProfileStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Represents a storage for {@link fithelper.model.UserProfile}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public interface UserProfileStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Path getUserProfilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns UserProfile data as a {@link ReadOnlyUserProfile}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Optional\u003cReadOnlyUserProfile\u003e readUserProfile() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @see #getUserProfilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    Optional\u003cReadOnlyUserProfile\u003e readUserProfile(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Saves the given {@link ReadOnlyUserProfile} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param userProfile cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    void saveUserProfile(ReadOnlyUserProfile userProfile) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @see #saveUserProfile(ReadOnlyUserProfile)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    void saveUserProfile(ReadOnlyUserProfile userProfile, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 45
    }
  },
  {
    "path": "src/main/java/fithelper/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "         * @see fithelper.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 5,
      "-": 73
    }
  },
  {
    "path": "src/main/java/fithelper/ui/FoodCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * An UI component that displays information of a {@code Entry}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class FoodCard extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final String FXML \u003d \"FoodCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Entry food;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private AnchorPane innerPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Label place;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label calorie;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public FoodCard(Entry food) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        name.setText(food.getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        time.setText(food.getTime().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        place.setText(food.getLocation().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        calorie.setText(food.getCalorie().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates a card displaying the {@code food entry}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param food the list of food entries display"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param displayedIndex the index of the order to show on the card"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public FoodCard(Entry food, int displayedIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        fillInDetails(displayedIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Fills in details in GUI, in list view."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param displayedIndex the index of the order to show on the card"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private void fillInDetails(int displayedIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        index.setText(displayedIndex + \".\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        name.setText(food.getName().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        status.setText(food.getStatus().toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        time.setText(food.getTime().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        place.setText(food.getLocation().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        calorie.setText(food.getCalorie().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return food.equals(card.food);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 3,
      "WANG-Yuchen-Alice": 87,
      "IYVVVVV": 2
    }
  },
  {
    "path": "src/main/java/fithelper/ui/FoodListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final String FXML \u003d \"FoodListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private ListView\u003cEntry\u003e foodListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public FoodListPanel(ObservableList\u003cEntry\u003e foodList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodListView.setItems(foodList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Entry} using a {@code FoodCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    class FoodListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        protected void updateItem(Entry food, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(new FoodCard(food).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 42
    }
  },
  {
    "path": "src/main/java/fithelper/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class HelpWindow extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String LIST_OF_VALID_COMMANDS \u003d \"Common commands and their format are as follows:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"add x/TYPE n/NAME t/YYYY-MM-DD 24:60 l/LOCATION c/CALORIE\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"  - add a food/exercise entry [TYPE can only be f/food/s/sports]\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"list (x/TYPE) (d/YYYY-MM-DD)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"  - list entries (of food/sport in a given day)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"reminder (x/TYPE) (d/YYYY-MM-DD)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"  - list all entries (of food/sport) not marked as done (in a given day)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"edit x/TYPE (d/YYYY-MM-DD) i/INDEX s/Done OR Undone\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"  - Mark an entry as done/not done\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"edit x/TYPE i/INDEX [n/NAME] [t/YYYY-MM-DD 24:60] [l/LOCATION] [c/CALORIE] [r/REMARK]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"  - edit the information of an entry\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"delete x/type (d/YYYY-MM-DD) i/INDEX\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"  - delete an entry\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"home(i.e. dashboard)/today/weight/profile/help\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"  - switch to the specified page\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"find (x/TYPE) keywords\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"  - show all (food/sports) entries (whose description contains any of the keywords)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"diary YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"  - record the diary for a date\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"check x/TYPE keywords\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"  - show records of calorie intake of some food or calorie consumption per hour of some sports\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"table x/TYPE YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + \"  - show calorie table of a specified date\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + \"calendar [OPT]d/datestring [OPT]m/\u0027ls\u0027 or tb\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            + \"  - show calendar of a specified time period, mode can be switched to list or timetable\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    //+ \"update attr/ATTRIBUTE v/VALUE\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    //+ \"  - edit the information of the user profile [ATTRIBUTE can only be name/address/height/weight]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String LOOK_FOR_URL \u003d \"For detailed information regarding the usage of commands, \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"please refer to the user guide via\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            \"https://github.com/AY1920S2-CS2103-T09-4/main/blob/master/docs/UserGuide.adoc\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String URL_COPED \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            \"(We have already stored the url in your clipboard, use ctrl + v in your browser to access the guide)\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String HELP_MESSAGE \u003d LIST_OF_VALID_COMMANDS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static final String SHOW_URL \u003d LOOK_FOR_URL + USERGUIDE_URL + URL_COPED;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private AnchorPane helpPage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Label showUrl;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        logger.info(\"Initializing Help Page\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        showUrl.setText(SHOW_URL);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void copyUrl() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 3,
      "lm5lm5": 48,
      "IYVVVVV": 1,
      "WANG-Yuchen-Alice": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/java/fithelper/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.today.Today;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.ui.calendar.CalendarPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.diary.DiaryPage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.home.DashBoard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.ui.profile.ProfilePage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.today.TodayPage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.ui.weight.WeightPage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private List\u003cString\u003e inputHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    //private int historyIndex \u003d inputHistory.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private FoodListPanel foodListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private SportsListPanel sportsListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private DashBoard dashBoard;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private TodayPage todayPage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private DiaryPage diaryPage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private ProfilePage profilePage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private WeightPage weightPage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private StackPane foodListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private StackPane sportsListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    //Main page"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label currentPage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private AnchorPane pagePane;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    //Sidebar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Button dashBoardButton;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Button todayButton;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Button calendarButton;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Button diaryButton;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Button profileButton;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Button weightButton;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Button helpButton;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        logger.info(\"Initializing MainWindow\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        dashBoard \u003d new DashBoard(logic.getFilteredFoodEntryList(), logic.getFilteredSportsEntryList(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                logic.getFilteredReminderEntryList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setAllPageAnchor(dashBoard.getRoot());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        todayPage \u003d new TodayPage(logic.getFilteredTodayFoodEntryList(new Today().getTodayDateStr()),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                logic.getFilteredTodaySportsEntryList(new Today().getTodayDateStr()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        logger.info(new Today().getTodayDateStr());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setAllPageAnchor(todayPage.getRoot());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        diaryPage \u003d new DiaryPage(logic.getFilteredDiaryList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setAllPageAnchor(diaryPage.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(logic.getFilteredFoodEntryList(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            logic.getFilteredSportsEntryList(), logic.getVEvents());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        setAllPageAnchor(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        setAllPageAnchor(helpWindow.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        profilePage \u003d new ProfilePage(logic.getUserProfile());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setAllPageAnchor(profilePage.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        weightPage \u003d new WeightPage();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        setAllPageAnchor(weightPage.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        logger.fine(\"All pages filled in MainWindow\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Handles the user inputs."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void handleUserInput() throws IllegalValueException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        inputHistory.add(input);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        //historyIndex \u003d inputHistory.size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(input);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            showPage(commandResult);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            showResultMessage(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        } catch (CommandException | ParseException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            showResultMessage(e.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Shows the page of FitHelper according to the command keyword."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * @param commandResult the result of executing a command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void showPage(CommandResult commandResult) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        CommandResult.DisplayedPage toDisplay \u003d commandResult.getDisplayedPage();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        switch (toDisplay) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case HOME:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            showDashBoard();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case TODAY:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            showTodayPage();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        case DIARY:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            showDiaryPage();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        case CALENDAR:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            showCalendarPanel();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            showHelpPageAndCopyUrl();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        case PROFILE:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            updateProfilePage();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            showProfilePage();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        case WEIGHT:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            showWeightPage();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void handleShowHelpPage() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        showHelpPageAndCopyUrl();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void handleShowDashBoard() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        showDashBoard();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void handleShowTodayPage() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        showTodayPage();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void handleShowDiaryPage() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        showDiaryPage();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void handleShowCalendarPage() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        showCalendarPanel();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void handleShowProfilePage() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        showProfilePage();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public void handleShowWeightPage() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        showWeightPage();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void showDashBoard() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        pagePane.getChildren().add(dashBoard.getRoot());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        currentPage.setText(\"Dash Board\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void showTodayPage() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        pagePane.getChildren().add(todayPage.getRoot());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        currentPage.setText(\"Today\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void showDiaryPage() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        pagePane.getChildren().add(diaryPage.getRoot());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        currentPage.setText(\"My Diary\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Goes to the Help Page and copys the url of user guide to the clipboard."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private void showHelpPageAndCopyUrl() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        pagePane.getChildren().add(helpWindow.getRoot());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        currentPage.setText(\"Help\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        helpWindow.copyUrl();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Shows the calendar page."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private void showCalendarPanel() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendarPanel.updateScheduler();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendarPanel.set(logic.getCalendarDate(), logic.getCalendarMode());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        pagePane.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        currentPage.setText(\"Calendar\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Update content of profile page with latest values."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private void updateProfilePage() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        profilePage \u003d new ProfilePage(logic.getUserProfile());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Shows the user profile page."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private void showProfilePage() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        pagePane.getChildren().add(profilePage.getRoot());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        currentPage.setText(\"Profile\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Shows the user weight records."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private void showWeightPage() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        pagePane.getChildren().add(weightPage.getRoot());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        currentPage.setText(\"Weight Records\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void showResultMessage(String message) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        result.setText(message);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void setAllPageAnchor(AnchorPane... pages) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (AnchorPane page : pages) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            AnchorPane.setLeftAnchor(page, 0.0);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            AnchorPane.setRightAnchor(page, 0.0);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            AnchorPane.setTopAnchor(page, 0.0);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            AnchorPane.setBottomAnchor(page, 4.0);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public FoodListPanel getFoodListPanel() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return foodListPanel;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public SportsListPanel getSportsListPanel() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return sportsListPanel;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @see fithelper.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public CommandResult executeCommand(String commandText) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 27,
      "lm5lm5": 23,
      "IYVVVVV": 63,
      "WANG-Yuchen-Alice": 159,
      "-": 59
    }
  },
  {
    "path": "src/main/java/fithelper/ui/ReminderCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * An UI component that displays information of a {@code Entry}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class ReminderCard extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final String FXML \u003d \"ReminderCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Entry reminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private AnchorPane innerPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label place;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label calorie;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ReminderCard(Entry reminder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        name.setText(reminder.getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        time.setText(reminder.getTime().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        place.setText(reminder.getLocation().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        calorie.setText(reminder.getCalorie().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates a card displaying the {@code reminder entry}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param reminder the list of reminder entries display"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param displayedIndex the index of the order to show on the card"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public ReminderCard(Entry reminder, int displayedIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        fillInDetails(displayedIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Fills in details in GUI, in list view."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param displayedIndex the index of the order to show on the card"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void fillInDetails(int displayedIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        index.setText(displayedIndex + \".\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        name.setText(reminder.getName().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        status.setText(reminder.getStatus().toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        time.setText(reminder.getTime().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        place.setText(reminder.getLocation().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        calorie.setText(reminder.getCalorie().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!(other instanceof ReminderCard)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        ReminderCard card \u003d (ReminderCard) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return reminder.equals(card.reminder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 90,
      "IYVVVVV": 2
    }
  },
  {
    "path": "src/main/java/fithelper/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/fithelper/ui/SportCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * An UI component that displays information of a {@code Entry}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class SportCard extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final String FXML \u003d \"SportCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Entry sport;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private AnchorPane innerPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Label place;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label calorie;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public SportCard(Entry sport) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.sport \u003d sport;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        name.setText(sport.getName().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        time.setText(sport.getTime().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        place.setText(sport.getLocation().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        calorie.setText(sport.getCalorie().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates a card displaying the {@code sport entry}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param sport a list of sport entries"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param displayedIndex the index of the order to show on the card"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public SportCard(Entry sport, int displayedIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.sport \u003d sport;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        fillInDetails(sport, displayedIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Fills in details in GUI, in list view."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param sport a list of sport entries"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param displayedIndex the index of the order to show on the card"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void fillInDetails(Entry sport, int displayedIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        index.setText(displayedIndex + \".\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        name.setText(sport.getName().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        status.setText(sport.getStatus().toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        time.setText(sport.getTime().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        place.setText(sport.getLocation().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        calorie.setText(sport.getCalorie().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!(other instanceof SportCard)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        SportCard card \u003d (SportCard) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return sport.equals(card.sport);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 1,
      "WANG-Yuchen-Alice": 89,
      "IYVVVVV": 2
    }
  },
  {
    "path": "src/main/java/fithelper/ui/SportsCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * An UI component that displays information of a {@code Entry}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class SportsCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final String FXML \u003d \"SportsListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public final Entry sports;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Label place;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label calorie;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public SportsCard(Entry sports) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.sports \u003d sports;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        name.setText(sports.getName().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        time.setText(sports.getTime().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        place.setText(sports.getLocation().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        calorie.setText(sports.getCalorie().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        remark.setText(sports.getRemark().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!(other instanceof SportsCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        SportsCard card \u003d (SportsCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return sports.equals(card.sports);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 1,
      "WANG-Yuchen-Alice": 64,
      "IYVVVVV": 1
    }
  },
  {
    "path": "src/main/java/fithelper/ui/SportsListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class SportsListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final String FXML \u003d \"SportsListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private ListView\u003cEntry\u003e sportsListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public SportsListPanel(ObservableList\u003cEntry\u003e sportsList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        sportsListView.setItems(sportsList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        sportsListView.setCellFactory(listView -\u003e new SportsListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Entry} using a {@code SportsCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    class SportsListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        protected void updateItem(Entry sports, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            super.updateItem(sports, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (empty || sports \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(new SportsCard(sports).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 41,
      "IYVVVVV": 1
    }
  },
  {
    "path": "src/main/java/fithelper/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/fithelper/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/fithelper/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/FitHelperLogo.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static UiManager thisUiManager \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public static UiManager getInstance(Logic logic) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (thisUiManager \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            thisUiManager \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return thisUiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        //Disable window resize"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 4,
      "IYVVVVV": 6,
      "WANG-Yuchen-Alice": 8,
      "-": 81
    }
  },
  {
    "path": "src/main/java/fithelper/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 1,
      "WANG-Yuchen-Alice": 7,
      "-": 84
    }
  },
  {
    "path": "src/main/java/fithelper/ui/calendar/CalendarPage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.icalendarfx.VCalendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.internal.scene.control.skin.agenda.AgendaDaySkin;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.internal.scene.control.skin.agenda.AgendaWeekSkin;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.scene.control.agenda.icalendar.ICalendarAgenda;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * Displays all food/sports items on calendar."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class CalendarPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private static final Locale UK_LOCALE \u003d Locale.UK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ICalendarAgenda agenda;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private BorderPane calendarBorderPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public CalendarPage(ObservableList\u003cVEvent\u003e events) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        VCalendar vCalendar \u003d new VCalendar();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        vCalendar.setVEvents(events);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.agenda \u003d new ICalendarAgenda(vCalendar);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        initCalendar(this.agenda);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendarBorderPane.setCenter(agenda);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendarBorderPane.setMaxWidth(500);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendarBorderPane.setMaxHeight(480);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private void initCalendar(ICalendarAgenda agenda) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        setLocale(agenda, UK_LOCALE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        setWeeklySkin();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        disableMouseClick(this.agenda);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Change the EventSchedulePanel to show the time interval including this targetDateTime. If in daily skin,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * simply show the date. If in weekly skin, show the week, with start day defined as in locale, including"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param targetDateTime"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param targetDateTime the desired dateTime to be viewed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setDisplayedDateTime(LocalDateTime targetDateTime) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.agenda.setDisplayedLocalDateTime(targetDateTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Method to set locale of ICalendarAgenda. Note that the locale decides the starting day of a week."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param agenda ICalendarAgenda to be set"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param locale desired locale to be set"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private void setLocale(ICalendarAgenda agenda, Locale locale) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setLocale(locale);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Disables all mouse click related actions. Scrolling is still allowed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param agenda ICalendarAgenda to be disabled"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private void disableMouseClick(ICalendarAgenda agenda) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setAllowDragging(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setAllowResize(false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setActionCallback(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setNewAppointmentCallback(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setSelectedOneAppointmentCallback(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setNewAppointmentDrawnCallback(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setAppointmentChangedCallback(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setOnMouseClicked(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setOnMousePressed(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setAllowDragging(false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setOnTouchPressed(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setOnMouseEntered(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setOnMouseExited(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Sets the calendar to week format."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setWeeklySkin() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        AgendaWeekSkin weekSkin \u003d new AgendaWeekSkin(this.agenda);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setSkin(weekSkin);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Sets the calendar to daily format."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setDailySkin() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        AgendaDaySkin dailySkin \u003d new AgendaDaySkin(this.agenda);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        agenda.setSkin(dailySkin);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Updates the scheduler to be reflected on UI"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void updateScheduler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.agenda.updateAppointments();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Update the calendar interface based on a date"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param dateToSet the date to be referenced by"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setDate(LocalDateTime dateToSet) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.agenda.setDisplayedLocalDateTime(dateToSet);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 117,
      "WANG-Yuchen-Alice": 1
    }
  },
  {
    "path": "src/main/java/fithelper/ui/calendar/CalendarPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.calculator.CalorieCalculatorByDateRange;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * Display two calendars."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class CalendarPanel extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ObservableList\u003cEntry\u003e foodList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ObservableList\u003cEntry\u003e sportList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private final CalendarPage calendarPage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private DaysCard daysPage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private MonthView monthView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private UpcomingList upcomingList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarPanel.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private CalorieCalculatorByDateRange stats;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private StackPane calendarPagePlaceholder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private AnchorPane monthViewPlaceholder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private StackPane upcomingListPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private AnchorPane daysPagePlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Creates a calendar page displaying two components from {@code }."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public CalendarPanel(ObservableList\u003cEntry\u003e foodList, ObservableList\u003cEntry\u003e sportList,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                         ObservableList\u003cVEvent\u003e events) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.foodList \u003d foodList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.sportList \u003d sportList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        logger.info(\"Initializing Calendar Page\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendarPage \u003d new CalendarPage(events);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        daysPage \u003d new DaysCard(foodList, sportList, LocalDateTime.now());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        set(LocalDateTime.now(), \"tb\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void updateScheduler() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendarPage.updateScheduler();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    // set date reference based on parameter date"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void set(LocalDateTime date, String mode) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        getGenerator(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        monthView \u003d new MonthView(date, stats);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        upcomingList \u003d new UpcomingList(foodList, sportList, date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        upcomingListPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        upcomingListPlaceholder.getChildren().add(upcomingList.getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        monthViewPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        monthViewPlaceholder.getChildren().add(monthView.getView());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (\"ls\".equals(mode)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            calendarPagePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            daysPagePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            daysPage \u003d new DaysCard(foodList, sportList, date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            daysPagePlaceholder.getChildren().add(daysPage.getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            daysPagePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            calendarPage.setDate(date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            calendarPage.updateScheduler();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            calendarPagePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            calendarPagePlaceholder.getChildren().add(calendarPage.getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void getGenerator(LocalDateTime date) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        LocalDate givenDate \u003d date.toLocalDate();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        LocalDate start \u003d givenDate.withDayOfMonth(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        LocalDate end \u003d givenDate.withDayOfMonth(givenDate.lengthOfMonth());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        stats \u003d new CalorieCalculatorByDateRange(foodList, sportList, start, end);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 91
    }
  },
  {
    "path": "src/main/java/fithelper/ui/calendar/DayCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.calculator.CalorieCalculator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * A section which displays entries of a day."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class DayCard extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private static final String FXML \u003d \"DayCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ObservableList\u003cEntry\u003e entries;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private CalorieCalculator stats;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Label dayTitle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Label statsNo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ListView\u003cEntry\u003e listView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public DayCard(ObservableList\u003cEntry\u003e entriesToSet, LocalDateTime dateToSet) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        LocalDateTime time \u003d dateToSet;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        dayTitle.setText(time.toLocalDate().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        entries \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        entries \u003d entriesToSet;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        getGenerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        statsNo.setText(\"Calorie: \" + String.valueOf(stats.getTotalCalorie()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (stats.getTotalCalorie() \u003e 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            statsNo.setTextFill(Color.RED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else if (stats.getTotalCalorie() \u003c 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            statsNo.setTextFill(Color.GREEN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        initializeListView(entries);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Constructs ListView Cell class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    static class ListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        protected void updateItem(Entry entry, boolean empty) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                setGraphic(new EntryCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Initializes the list view."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param entries an observable list of food and sports entries of a day"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private void initializeListView(ObservableList\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        listView.setItems(entries);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        listView.setCellFactory(listView -\u003e new DayCard.ListViewCell());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void getGenerator() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        stats \u003d new CalorieCalculator(entries);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 82
    }
  },
  {
    "path": "src/main/java/fithelper/ui/calendar/DayNode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * Create an anchor pane that can store additional data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class DayNode extends AnchorPane {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    // Date associated with this pane"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Create a anchor pane node. Date is not assigned in the constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param children children of the anchor pane"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public DayNode(javafx.scene.Node... children) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        super(children);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 30
    }
  },
  {
    "path": "src/main/java/fithelper/ui/calendar/DaysCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * Display list of entries by dates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class DaysCard extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private static final String FXML \u003d \"DaysListCard.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Label listTitle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ListView\u003cObservableList\u003cEntry\u003e\u003e daysListView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ObservableList\u003cEntry\u003e combined;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ObservableList\u003cObservableList\u003cEntry\u003e\u003e entries;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public DaysCard(ObservableList\u003cEntry\u003e foodList, ObservableList\u003cEntry\u003e sportList, LocalDateTime"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            dateToSet) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        time \u003d dateToSet;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        listTitle.setText(time.getMonth().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        combined \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        entries \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        initialiseEntries(foodList, sportList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Initialises the entries for display"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private void initialiseEntries(ObservableList\u003cEntry\u003e foodList, ObservableList\u003cEntry\u003e sportList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        addFilteredEntries(sportList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        addFilteredEntries(foodList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        Map\u003cLocalDate, ObservableList\u003cEntry\u003e\u003e entriesByDate \u003d getEntriesByDate(combined);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        Set\u003cLocalDate\u003e uniqueDateSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        uniqueDateSet.addAll(entriesByDate.keySet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        List\u003cLocalDate\u003e sortedDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        sortedDates.addAll(uniqueDateSet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        java.util.Collections.sort(sortedDates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        for (LocalDate dateTime: sortedDates) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            ObservableList\u003cEntry\u003e temp \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            temp.addAll(entriesByDate.get(dateTime));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            entries.add(temp);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        daysListView.setItems(entries);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        daysListView.setCellFactory(listView -\u003e new DaysCard.ListViewCell());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Maps each entry by its date"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Map\u003cLocalDate, ObservableList\u003cEntry\u003e\u003e getEntriesByDate(ObservableList\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        Map\u003cLocalDate, ObservableList\u003cEntry\u003e\u003e entriesByDate \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        for (Entry entry: entries) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            LocalDate date \u003d entry.getDate();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            requireNonNull(date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (!entriesByDate.containsKey(date)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                entriesByDate.put(date, FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            entriesByDate.get(date).add(entry);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return entriesByDate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Add filtered entries to combined list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param list the list to be filterd, can be either food or sports type"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void addFilteredEntries(ObservableList\u003cEntry\u003e list) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        for (Entry entry : list) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (time.getMonth().equals((entry.getDateTime().getMonth()))) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                combined.add(entry);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Constructs ListView Cell class."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    static class ListViewCell extends ListCell\u003cObservableList\u003cEntry\u003e\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        protected void updateItem(ObservableList\u003cEntry\u003e entries, boolean empty) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            super.updateItem(entries, empty);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (empty || entries \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                LocalDateTime temp \u003d entries.get(0).getDateTime();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                setGraphic(new DayCard(entries, temp).getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 119
    }
  },
  {
    "path": "src/main/java/fithelper/ui/calendar/EntryCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * An UI component that displays information of a {@code Entry}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class EntryCard extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private static final String FXML \u003d \"EntryCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Entry entry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private AnchorPane innerPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Text time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Text place;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Label calorie;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Text name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public EntryCard(Entry entry) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        name.setText(entry.getName().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        time.setText(entry.getTime().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        place.setText(entry.getLocation().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calorie.setText(entry.getCalorie().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Creates a card displaying the {@code sport entry}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param entry a list of sport entries"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param displayedIndex the index of the order to show on the card"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public EntryCard(Entry entry, int displayedIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        fillInDetails(entry, displayedIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Fills in details in GUI, in list view."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param entry a single entry"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param displayedIndex the index of the order to show on the card"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private void fillInDetails(Entry entry, int displayedIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        index.setText(displayedIndex + \".\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        name.setText(entry.getName().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        time.setText(entry.getTime().toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        place.setText(entry.getLocation().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calorie.setText(entry.getCalorie().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (entry.isFood()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            calorie.setTextFill(Color.RED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            calorie.setTextFill(Color.GREEN);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        name.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        place.setFill(Color.valueOf(\"#789cce\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        time.setFill(Color.valueOf(\"#789cce\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (entry.isDone()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            name.setStrikethrough(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            place.setStrikethrough(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            time.setStrikethrough(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        if (!(other instanceof EntryCard)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        EntryCard card \u003d (EntryCard) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return entry.equals(card.entry);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 104
    }
  },
  {
    "path": "src/main/java/fithelper/ui/calendar/MonthView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.calculator.CalorieCalculatorByDateRange;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * Get the full calendar view."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class MonthView extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private static final String FXML \u003d \"MonthView.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ArrayList\u003cDayNode\u003e allCalendarDays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private AnchorPane view;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Label monthYearTitle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Create a calendar view"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public MonthView(LocalDateTime dateToSet, CalorieCalculatorByDateRange stats) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        currentYearMonth \u003d YearMonth.from(dateToSet);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // Create the calendar grid pane"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        GridPane calendar \u003d new GridPane();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        view \u003d new AnchorPane();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendar.setPrefSize(60, 40);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        calendar.setGridLinesVisible(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        allCalendarDays \u003d new ArrayList\u003c\u003e(42);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        Label monthYearTitle \u003d new Label();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        monthYearTitle.setText(currentYearMonth.getMonth().toString() + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                + String.valueOf(currentYearMonth.getYear()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // Days of the week labels"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        Text[] dayNames \u003d new Text[]{new Text(\"S\"), new Text(\"M\"), new Text(\"T\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            new Text(\"W\"), new Text(\"T\"), new Text(\"F\"), new Text(\"S\")};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // Create rows and columns with anchor panes for the calendar"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                DayNode ap \u003d new DayNode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                ap.setPrefSize(20, 20);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                ap.setStyle(\"-fx-border-color:white;\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                calendar.add(ap, j, i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                dayNames[j].setFill(Color.web(\"#789cce\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    ap.setTopAnchor(dayNames[j], 8.0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    ap.setLeftAnchor(dayNames[j], 8.0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    ap.getChildren().add(dayNames[j]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    allCalendarDays.add(ap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            // Populate calendar with the appropriate day numbers"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            populateCalendar(currentYearMonth, stats);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            // Create the calendar view"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            AnchorPane.setTopAnchor(monthYearTitle, 0.0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            AnchorPane.setLeftAnchor(monthYearTitle, 10.0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            AnchorPane.setTopAnchor(calendar, 20.0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            monthYearTitle.setTextFill(Color.web(\"#789cce\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            view \u003d new AnchorPane(monthYearTitle, calendar);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Set the days of the calendar to correspond to the appropriate date"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param yearMonth year and month of month to render"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void populateCalendar(YearMonth yearMonth, CalorieCalculatorByDateRange calorieStats) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // Get the date we want to start with on the calendar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // Dial back the day until it is SUNDAY (unless the month starts on a sunday)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // Populate the calendar with day numbers"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        for (DayNode ap : allCalendarDays) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (ap.getChildren().size() !\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                ap.getChildren().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            Text txt \u003d new Text(String.valueOf(calendarDate.getDayOfMonth()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (calorieStats.getDailyCalorie().containsKey(calendarDate)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                if (calorieStats.getDailyCalorie().get(calendarDate) \u003e 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    txt.setFill(Color.RED);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                } else if (calorieStats.getDailyCalorie().get(calendarDate) \u003c 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    txt.setFill(Color.GREEN);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    txt.setFill(Color.web(\"#789cce\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                txt.setFill(Color.web(\"#789cce\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            ap.setDate(calendarDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            AnchorPane.setTopAnchor(txt, 8.0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            AnchorPane.setLeftAnchor(txt, 8.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            ap.getChildren().add(txt);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public AnchorPane getView() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 116
    }
  },
  {
    "path": "src/main/java/fithelper/ui/calendar/UpcomingList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.ui.FoodCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " * A section which displays upcoming tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class UpcomingList extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private static final String FXML \u003d \"UpcomingList.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ObservableList\u003cEntry\u003e combined;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private Label upcomingTitle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private ListView\u003cEntry\u003e listView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public UpcomingList(ObservableList\u003cEntry\u003e foodList, ObservableList\u003cEntry\u003e sportList, LocalDateTime dateToSet) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        time \u003d dateToSet;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        upcomingTitle.setText(\"Upcoming in \" + time.getMonth());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        combined \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        initializeListView(foodList, sportList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Constructs ListView Cell class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    static class ListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        protected void updateItem(Entry entry, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                setGraphic(new FoodCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Initializes the list view."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param foodList  an observable list of food entries"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param sportList an observable list of sport entries"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    private void initializeListView(ObservableList\u003cEntry\u003e foodList, ObservableList\u003cEntry\u003e sportList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        addFilteredEntries(foodList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        addFilteredEntries(sportList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        listView.setItems(combined);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        listView.setCellFactory(listView -\u003e new UpcomingList.ListViewCell());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Add filtered entries to combined list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * @param list the list to be filterd, can be either food or sports type"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void addFilteredEntries(ObservableList\u003cEntry\u003e list) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        for (Entry entry : list) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            if (time.isBefore(entry.getDateTime()) \u0026\u0026 time.getMonth().equals(entry.getDateTime().getMonth())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                combined.add(entry);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 81
    }
  },
  {
    "path": "src/main/java/fithelper/ui/diary/DiaryCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.ui.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * An UI component that displays information of a {@code Diary}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class DiaryCard extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final String FXML \u003d \"DiaryCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Diary diary;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private AnchorPane innerPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label diaryDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates a card displaying the {@code diary diary}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param diary the list of diary entries display"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DiaryCard(Diary diary) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.diary \u003d diary;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        diaryDate.setText(diary.getDiaryDate().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        content.setText(diary.getContent().getValue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        fillInDetails();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Fills in details in GUI, in list view."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void fillInDetails() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        diaryDate.setText(diary.getDiaryDate().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        content.setText(diary.getContent().getValue());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        if (!(other instanceof DiaryCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        DiaryCard card \u003d (DiaryCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return diary.equals(card.diary);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 73
    }
  },
  {
    "path": "src/main/java/fithelper/ui/diary/DiaryPage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.ui.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.diary.Diary;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Controller class for diary page."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * An diary page contains diary pages."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class DiaryPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final String FXML \u003d \"DiaryPage.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DiaryPage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private ListView\u003cDiary\u003e diaryListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates a diary page displaying diaries from {@code diaryList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DiaryPage(ObservableList\u003cDiary\u003e diaryList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        logger.info(\"Initializing Diary Page\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        initializeDiaryListView(diaryList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Initializes the list view."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param diaryList an observable list of diaries"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void initializeDiaryListView(ObservableList\u003cDiary\u003e diaryList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        diaryListView.setItems(diaryList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        diaryListView.setCellFactory(listView -\u003e new DiaryListViewCell());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs sportListView Cell class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    static class DiaryListViewCell extends ListCell\u003cDiary\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         * Update diary cell."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         * @param diary"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         * @param empty"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        protected void updateItem(Diary diary, boolean empty) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            super.updateItem(diary, empty);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (empty || diary \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(new DiaryCard(diary).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 67
    }
  },
  {
    "path": "src/main/java/fithelper/ui/home/DashBoard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.ui.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.FoodCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.ReminderCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.SportCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Controller class for dash board."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * An order page contains order cards and a statistics bar."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class DashBoard extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final String FXML \u003d \"DashBoard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DashBoard.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private ListView\u003cEntry\u003e foodListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private ListView\u003cEntry\u003e sportListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private ListView\u003cEntry\u003e reminderListView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates an order page displaying entries from {@code entryList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public DashBoard(ObservableList\u003cEntry\u003e foodList, ObservableList\u003cEntry\u003e sportList,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     ObservableList\u003cEntry\u003e reminderList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        logger.info(\"Initializing Dash Board\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        initializeFoodListView(foodList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        initializeSportListView(sportList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        initializeReminderListView(reminderList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Initializes the list view."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param foodList an observable list of food entries"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void initializeFoodListView(ObservableList\u003cEntry\u003e foodList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodListView.setItems(foodList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Initializes the list view."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param sportList an observable list of sports entries"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void initializeSportListView(ObservableList\u003cEntry\u003e sportList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        sportListView.setItems(sportList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        sportListView.setCellFactory(listView -\u003e new SportListViewCell());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Initializes the list view."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param reminderList an observable list of sports entries"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void initializeReminderListView(ObservableList\u003cEntry\u003e reminderList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        reminderListView.setItems(reminderList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs foodListView Cell class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    static class FoodListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        protected void updateItem(Entry entry, boolean empty) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(new FoodCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs sportListView Cell class."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    static class SportListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        protected void updateItem(Entry sport, boolean empty) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            super.updateItem(sport, empty);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (empty || sport \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(new SportCard(sport, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs sportListView Cell class."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    static class ReminderListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        protected void updateItem(Entry reminder, boolean empty) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            super.updateItem(reminder, empty);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (empty || reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(new ReminderCard(reminder, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 128
    }
  },
  {
    "path": "src/main/java/fithelper/ui/profile/ProfilePage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.ui.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.ReadOnlyUserProfile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Controller for a user profile page."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * The profile page contains all user basic information."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class ProfilePage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private static final String FXML \u003d \"ProfilePage.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProfilePage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Label height;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Label targetweight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Label currentweight;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private Label currentbmi;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Creates a new ProfileWindow displaying user basic data."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public ProfilePage(ReadOnlyUserProfile profile) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        logger.info(\"Initializing Profile Page\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        initializeAttributeValue(profile.getUserProfile());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Initialize the value of each profile attribute."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * @param profile an profile object containing user basic data."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private void initializeAttributeValue(Profile profile) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        name.setText(profile.getName().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        gender.setText(profile.getGender().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        age.setText(profile.getAge().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        address.setText(profile.getAddress().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        height.setText(profile.getHeight().toString() + \" cm\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        targetweight.setText(profile.getTargetWeight().toString() + \" kg\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        // Need to be updated after weight database is ready."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String weightText;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        String bmiText;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (profile.getCurrentWeight() \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            weightText \u003d \"Not Available Now\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            weightText \u003d profile.getCurrentWeight().toString() + \" kg\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        currentweight.setText(weightText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        if (profile.getCurrentBmi() \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            bmiText \u003d \"Not Available Now\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            bmiText \u003d profile.getCurrentBmi().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        currentbmi.setText(bmiText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        //currentweight.setText(profile.getCurrentWeight().toString() + \" kg\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        //currentbmi.setText(profile.getCurrentBmi().toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 1,
      "IYVVVVV": 86
    }
  },
  {
    "path": "src/main/java/fithelper/ui/today/TodayPage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "package fithelper.ui.today;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.calculator.CalorieCalculator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.calculator.FeedbackGenerator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.calculator.PerformanceCalculator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.FoodCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.SportCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * Controller class for today page."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " * An order page contains order cards and a statistics bar."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "public class TodayPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private static final String FXML \u003d \"TodayPage.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TodayPage.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private double foodCalorie;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private double sportCalorie;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private double difCalorie;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private int sportDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private double percentDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private ListView\u003cEntry\u003e foodListView;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private ListView\u003cEntry\u003e sportListView;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label undoneFoodCounter;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label doneFoodCounter;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label undoneSportCounter;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label doneSportCounter;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label calorieGain;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label calorieConsume;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label totalCalorie;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label performance;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private Label feedback;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private PieChart foodCaloriePieChart;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Creates an order page displaying orders from {@code orderList}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public TodayPage(ObservableList\u003cEntry\u003e foodList, ObservableList\u003cEntry\u003e sportList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        logger.info(\"Initializing Today Page\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodCalorie \u003d 0.0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        sportCalorie \u003d 0.0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        difCalorie \u003d 0.0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        initializeFoodListView(foodList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        initializeSportListView(sportList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        initializeFoodCaloriePirChart(foodList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        initializeFoodListener(foodList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        initializeSportListener(sportList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Initializes the list view."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param foodList an observable list of food entries"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void initializeFoodListView(ObservableList\u003cEntry\u003e foodList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodListView.setItems(foodList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Initializes the list view."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param sportList an observable list of sports entries"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void initializeSportListView(ObservableList\u003cEntry\u003e sportList) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        sportListView.setItems(sportList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        sportListView.setCellFactory(listView -\u003e new SportListViewCell());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Initializes the food calorie pie chart."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param foodList an observable list of sports entries"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void initializeFoodCaloriePirChart(ObservableList\u003cEntry\u003e foodList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        ArrayList\u003cPieChart.Data\u003e pieChartDataList \u003d getPieChartDataArrayList(foodList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                FXCollections.observableArrayList(pieChartDataList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodCaloriePieChart.setData(pieChartData);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        setFoodCaloriePieChartProperty();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Generates an arrayList of PieChart data from the foodList."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param foodList an observable list of sports entries"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private ArrayList\u003cPieChart.Data\u003e getPieChartDataArrayList(ObservableList\u003cEntry\u003e foodList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        ArrayList\u003cPieChart.Data\u003e pieChartDataList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        for (int i \u003d 0; i \u003c foodList.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            Entry foodEntry \u003d foodList.get(i);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (foodEntry.isDone()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                String foodName \u003d foodEntry.getName().value;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                int foodCalorie \u003d (int) foodEntry.getCalorie().value;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                pieChartDataList.add(new PieChart.Data(foodName, foodCalorie));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        return pieChartDataList;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Sets the property of food calorie pie chart."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void setFoodCaloriePieChartProperty() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodCaloriePieChart.setClockwise(true);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodCaloriePieChart.setLabelLineLength(10);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodCaloriePieChart.setBorder(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Initializes the listeners."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param foodList an observable list of food entries"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void initializeFoodListener(ObservableList\u003cEntry\u003e foodList) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        updateFoodStatistics(foodList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodList.addListener((ListChangeListener\u003cEntry\u003e) change -\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                updateFoodStatistics(foodList)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        );"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Initializes the listeners."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param sportList an observable list of sports entries"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    public void initializeSportListener(ObservableList\u003cEntry\u003e sportList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        updateSportStatistics(sportList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        sportList.addListener((ListChangeListener\u003cEntry\u003e) change -\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                updateSportStatistics(sportList)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        );"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the food entry list statistics."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param foodList an observable list of food entries"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void updateFoodStatistics(ObservableList\u003cEntry\u003e foodList) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        updateFoodCounter(foodList);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        updateFoodCalorie(foodList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        updateFoodCaloriePieChart(foodList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        updateFeedback();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the sport entry list statistics."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param sportList an observable list of sport entries"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void updateSportStatistics(ObservableList\u003cEntry\u003e sportList) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        updateSportCounter(sportList);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        updateSportCalorie(sportList);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        updatePerformance(sportList);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        updateFeedback();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the food entry list statistics."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param foodList an observable list of food entries"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void updateFoodCounter(ObservableList\u003cEntry\u003e foodList) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        PerformanceCalculator foodPerformanceCalculator \u003d new PerformanceCalculator(foodList);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        int foodUndone \u003d foodPerformanceCalculator.getUndoneCounter();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        int foodDone \u003d foodPerformanceCalculator.getDoneCounter();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        undoneFoodCounter.setText(foodUndone + \" undone\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        doneFoodCounter.setText(foodDone + \" completed\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the food entry list statistics."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param sportList an observable list of food entries"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void updateSportCounter(ObservableList\u003cEntry\u003e sportList) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        PerformanceCalculator sportPerformanceCalculator \u003d new PerformanceCalculator(sportList);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        int sportUndone \u003d sportPerformanceCalculator.getUndoneCounter();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        this.sportDone \u003d sportPerformanceCalculator.getDoneCounter();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        undoneSportCounter.setText(sportUndone + \" sport plans undone\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        doneSportCounter.setText(sportDone + \" sport plans completed\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the food entry list statistics."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param foodList an observable list of food entries"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void updateFoodCalorie(ObservableList\u003cEntry\u003e foodList) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        CalorieCalculator foodCalorieCalculator \u003d new CalorieCalculator(foodList);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        foodCalorie \u003d foodCalorieCalculator.getFoodCalorie();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        logger.info(\"foodCalorie: \" + foodCalorie);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        calorieGain.setText(\"food adds in: \" + foodCalorie + \" kcal\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        difCalorie \u003d foodCalorie - sportCalorie;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        totalCalorie.setText(\"total calorie: \" + difCalorie + \" kcal\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the foodCaloriePieChart."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param foodList an observable list of food entries"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void updateFoodCaloriePieChart(ObservableList\u003cEntry\u003e foodList) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        initializeFoodCaloriePirChart(foodList);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the food entry list statistics."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param sportList an observable list of food entries"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void updateSportCalorie(ObservableList\u003cEntry\u003e sportList) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        CalorieCalculator sportCalorieCalculator \u003d new CalorieCalculator(sportList);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        sportCalorie \u003d sportCalorieCalculator.getSportsCalorie();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        calorieConsume.setText(\"sports burn: \" + sportCalorie + \" kcal\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        difCalorie \u003d foodCalorie - sportCalorie;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        totalCalorie.setText(\"totdal calorie: \" + difCalorie + \" kcal\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Updates the performance calculation of today\u0027s food and sport list"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * @param sportList an observable list of sport entries"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void updatePerformance(ObservableList\u003cEntry\u003e sportList) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        percentDone \u003d this.sportDone * 100.0 / sportList.size();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        performance.setText(\"Sports Task Completion: \" + (int) this.percentDone + \"%\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        logger.info(\"task modification: \" + this.percentDone);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs foodListView Cell class."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    static class FoodListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        protected void updateItem(Entry entry, boolean empty) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(new FoodCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Constructs sportListView Cell class."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    static class SportListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        protected void updateItem(Entry sport, boolean empty) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            super.updateItem(sport, empty);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            if (empty || sport \u003d\u003d null) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                setGraphic(new SportCard(sport, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     * Generates and updates the feedback box based on the task completion data."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    private void updateFeedback() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        FeedbackGenerator feedbackGenerator \u003d new FeedbackGenerator(this.percentDone, this.difCalorie);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        logger.info(\"generate feedback: \" + percentDone);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        String todayFeedback \u003d feedbackGenerator.generateFeedback();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        feedback.setText(todayFeedback);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 1,
      "WANG-Yuchen-Alice": 319
    }
  },
  {
    "path": "src/main/java/fithelper/ui/weight/WeightPage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "package fithelper.ui.weight;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import fithelper.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "//import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "//import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "//import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * Controller for a user profile page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " * The profile page contains all user basic information."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "public class WeightPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private static final String FXML \u003d \"WeightPage.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WeightPage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     * Creates a new ProfileWindow displaying user basic data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    public WeightPage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        logger.info(\"Initializing Weight Page\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 30
    }
  },
  {
    "path": "src/main/resources/view/Calendar.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cBorderPane fx:id\u003d\"calendarBorderPane\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 7
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cBorderPane fx:id\u003d\"calendarBorderPane\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cStackPane fx:id\u003d\"calendarPagePlaceholder\" alignment\u003d\"TOP_LEFT\" prefWidth\u003d\"20.0\" GridPane.halignment\u003d\"LEFT\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowSpan\u003d\"2\" GridPane.valignment\u003d\"TOP\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"monthViewPlaceholder\" AnchorPane.leftAnchor\u003d\"510.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" style\u003d\"-fx-background-color: white;\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cStackPane fx:id\u003d\"upcomingListPlaceholder\" AnchorPane.leftAnchor\u003d\"510.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"190.0\" prefHeight\u003d\"290.0\" prefWidth\u003d\"100.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"daysPagePlaceholder\" AnchorPane.leftAnchor\u003d\"0.0\" GridPane.halignment\u003d\"LEFT\" prefHeight\u003d\"480.0\" style\u003d\"-fx-background-color: white;\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 32
    }
  },
  {
    "path": "src/main/resources/view/DashBoard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003cVBox prefHeight\u003d\"500.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"80.0\" prefWidth\u003d\"700.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"30.0\" prefWidth\u003d\"220.0\" style\u003d\"-fx-background-color: #789cce; -fx-border-color: #ffffff;\" text\u003d\"Food Entry History\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"118.0\" layoutY\u003d\"18.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"220.0\" style\u003d\"-fx-background-color: #789cce; -fx-border-color: #ffffff;\" text\u003d\"Sport Entry History\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"30.0\" prefWidth\u003d\"260.0\" style\u003d\"-fx-background-color: #ef827d; -fx-border-color: #ffffff;\" text\u003d\"Reminders\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003cHBox prefHeight\u003d\"420.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cListView fx:id\u003d\"foodListView\" editable\u003d\"true\" prefHeight\u003d\"420.0\" prefWidth\u003d\"220.0\" style\u003d\"-fx-background-color: white;\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cListView fx:id\u003d\"sportListView\" prefHeight\u003d\"420.0\" prefWidth\u003d\"220.0\" style\u003d\"-fx-background-color: white;\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cListView fx:id\u003d\"reminderListView\" prefHeight\u003d\"420.0\" prefWidth\u003d\"260.0\" style\u003d\"-fx-background-color: white;\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 38,
      "IYVVVVV": 2
    }
  },
  {
    "path": "src/main/resources/view/DayCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003cStackPane id\u003d\"daysPane\" alignment\u003d\"TOP_CENTER\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"470.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003cStackPane prefWidth\u003d\"470.0\" minHeight\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003cLabel fx:id\u003d\"dayTitle\" StackPane.alignment\u003d\"TOP_LEFT\" textFill\u003d\"#789cce\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cInsets top\u003d\"0.0\" left\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003cLabel fx:id\u003d\"statsNo\" StackPane.alignment\u003d\"TOP_RIGHT\" textFill\u003d\"#789cce\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cInsets top\u003d\"0.0\" left\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003cStackPane id\u003d\"listPanel\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003cScrollPane id\u003d\"listScrollPane\" fitToWidth\u003d\"true\" prefWidth\u003d\"470.0\" prefHeight\u003d\"200\" minHeight\u003d\"-Infinity\" fitToHeight\u003d\"True\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cListView fx:id\u003d\"listView\" prefWidth\u003d\"470.0\" prefHeight\u003d\"190\" minHeight\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 38
    }
  },
  {
    "path": "src/main/resources/view/DaysListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003cStackPane id\u003d\"daysPane\" alignment\u003d\"TOP_CENTER\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"500.0\" prefHeight\u003d\"480\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003cStackPane prefWidth\u003d\"500.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003cLabel fx:id\u003d\"listTitle\" StackPane.alignment\u003d\"TOP_LEFT\" textFill\u003d\"#789cce\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cInsets top\u003d\"0.0\" left\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003cStackPane id\u003d\"listPanel\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003cScrollPane id\u003d\"listScrollPane\" fitToWidth\u003d\"true\" prefWidth\u003d\"500.0\" prefHeight\u003d\"480\" minHeight\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cListView fx:id\u003d\"daysListView\" prefWidth\u003d\"500.0\" prefHeight\u003d\"475\" minHeight\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 33
    }
  },
  {
    "path": "src/main/resources/view/DiaryCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"550.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"innerPane\" prefHeight\u003d\"100.0\" prefWidth\u003d\"550.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003cVBox prefHeight\u003d\"100.0\" prefWidth\u003d\"550.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"20.0\" prefWidth\u003d\"550.0\" spacing\u003d\"3.0\" style\u003d\"-fx-background-color: #ffacbb; -fx-border-color: #ffacbb;\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                \u003cLabel fx:id\u003d\"diaryDate\" prefHeight\u003d\"20.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #ffacbb;\" text\u003d\"DiaryDate\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"80.0\" prefWidth\u003d\"550.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #ffacbb;\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003cLabel fx:id\u003d\"content\" prefHeight\u003d\"59.0\" prefWidth\u003d\"536.0\" text\u003d\"Content\" textFill\u003d\"#ffacbb\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 39,
      "IYVVVVV": 3
    }
  },
  {
    "path": "src/main/resources/view/DiaryPage.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: white; -fx-border-color: white;\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003cVBox prefHeight\u003d\"500.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: white; -fx-border-color: white;\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cListView fx:id\u003d\"diaryListView\" prefHeight\u003d\"500.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: white; -fx-border-color: white;\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 14
    }
  },
  {
    "path": "src/main/resources/view/EntryCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"80.0\" prefWidth\u003d\"431.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"innerPane\" prefHeight\u003d\"80.0\" prefWidth\u003d\"460.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003cVBox prefHeight\u003d\"80.0\" prefWidth\u003d\"460.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"80.0\" prefWidth\u003d\"460.0\" spacing\u003d\"3.0\" style\u003d\"-fx-background-color: #789cce; -fx-border-color: #789cce;\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                \u003cLabel fx:id\u003d\"index\" prefHeight\u003d\"33.0\" prefWidth\u003d\"28.0\" style\u003d\"-fx-background-color: #789cce;\" text\u003d\"1\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                \u003cText fx:id\u003d\"name\" style\u003d\"-fx-font: 20\" text\u003d\"text\" wrappingWidth\u003d\"375.916015625\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"80.0\" prefWidth\u003d\"460.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #789cce;\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                \u003cVBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"40.0\" prefWidth\u003d\"350.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                        \u003cText fx:id\u003d\"time\" style\u003d\"-fx-font: 20\" text\u003d\"text\" wrappingWidth\u003d\"113.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                        \u003cText fx:id\u003d\"place\" style\u003d\"-fx-font: 20\" text\u003d\"text\" wrappingWidth\u003d\"113.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                \u003cLabel fx:id\u003d\"calorie\" alignment\u003d\"CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"70.0\" text\u003d\"Calorie\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"10.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/calorie.png\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 58
    }
  },
  {
    "path": "src/main/resources/view/FoodCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "      \u003cAnchorPane fx:id\u003d\"innerPane\" prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cVBox prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\" spacing\u003d\"3.0\" style\u003d\"-fx-background-color: #789cce; -fx-border-color: #789cce;\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cLabel fx:id\u003d\"index\" prefHeight\u003d\"40.0\" prefWidth\u003d\"40.0\" style\u003d\"-fx-background-color: #789cce;\" text\u003d\"1\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" prefHeight\u003d\"40.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #789cce;\" text\u003d\"name\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cLabel fx:id\u003d\"status\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"90.0\" style\u003d\"-fx-background-color: #789cce;\" text\u003d\"undone\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"60.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #789cce;\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"40.0\" prefWidth\u003d\"130.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                              \u003cLabel fx:id\u003d\"time\" prefHeight\u003d\"15.0\" prefWidth\u003d\"130.0\" text\u003d\"time\" textFill\u003d\"#789cce\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                              \u003cLabel fx:id\u003d\"place\" prefHeight\u003d\"15.0\" prefWidth\u003d\"130.0\" text\u003d\"place\" textFill\u003d\"#789cce\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cLabel fx:id\u003d\"calorie\" alignment\u003d\"CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"70.0\" text\u003d\"Calorie\" textFill\u003d\"#789cce\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003cgraphic\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"10.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cimage\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cImage url\u003d\"@../images/calorie.png\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003c/image\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/graphic\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 57,
      "IYVVVVV": 6
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calorie\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 12,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/FoodListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "  \u003cListView fx:id\u003d\"foodListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"helpPage\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"650.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "      \u003cButton fx:id\u003d\"copyButton\" defaultButton\u003d\"true\" layoutX\u003d\"568.0\" layoutY\u003d\"467.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" style\u003d\"-fx-background-color: #ef827d;\" text\u003d\"Copy URL\" textFill\u003d\"WHITE\" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "      \u003cLabel fx:id\u003d\"showUrl\" layoutX\u003d\"14.0\" layoutY\u003d\"450.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "      \u003cVBox prefHeight\u003d\"448.0\" prefWidth\u003d\"650.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "      \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" textFill\u003d\"#ef827d\" textOverrun\u003d\"CLIP\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 18,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003cfx:root title\u003d\"FitHelper\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "      \u003cImage url\u003d\"@../images/FitHelperLogo.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "      \u003cScene stylesheets\u003d\"@Extensions.css\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         \u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"900.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "               \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"200.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                     \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"10.0\" layoutY\u003d\"493.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"33.0\" prefWidth\u003d\"338.0\" promptText\u003d\"Enter any command to start. e.g.  add x/food n/alice t/2020-03-10 16:00 l/utown c/500\" AnchorPane.bottomAnchor\u003d\"6.0\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.rightAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"560.6666666666666\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cLabel fx:id\u003d\"currentPage\" text\u003d\"FitHelper\" textFill\u003d\"#ef827d\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003cFont size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cSeparator prefHeight\u003d\"3.0\" prefWidth\u003d\"200.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\" AnchorPane.topAnchor\u003d\"45.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cAnchorPane fx:id\u003d\"pagePane\" prefHeight\u003d\"500.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"84.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                           \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"500.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: white;\" text\u003d\"With FitHelper, Let\u0027s Turn Fat into FIT!\" textFill\u003d\"#ef827d\" wrapText\u003d\"true\" AnchorPane.bottomAnchor\u003d\"-34.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cFont size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "               \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "               \u003cAnchorPane maxWidth\u003d\"200.0\" minWidth\u003d\"200.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"700.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cVBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003cImageView fitHeight\u003d\"80.0\" fitWidth\u003d\"80.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cimage\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cImage url\u003d\"@../images/FitHelperLogo.png\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/image\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cInsets top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                           \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" lineSpacing\u003d\"10.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"170.0\" text\u003d\"FitHelper\" textAlignment\u003d\"CENTER\" textFill\u003d\"#ef827d\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                           \u003cButton fx:id\u003d\"dashBoardButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowDashBoard\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #789cce; -fx-border-color: #789cce;\" text\u003d\"Dashboard\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/Button\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                           \u003cButton fx:id\u003d\"todayButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowTodayPage\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #acbfea; -fx-border-color: #acbfea;\" text\u003d\"Today\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/Button\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                           \u003cButton fx:id\u003d\"calendarButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowCalendarPage\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #c8d5f6; -fx-border-color: #c8d5f6;\" text\u003d\"Calendar\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/Button\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                           \u003cButton fx:id\u003d\"profileButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowProfilePage\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #fed7dd; -fx-border-color: #fed7dd;\" text\u003d\"User Profile\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                 \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                           \u003c/Button\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                           \u003cButton fx:id\u003d\"weightButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowWeightPage\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #ffc5ce; -fx-border-color: #ffc5ce;\" text\u003d\"Weight Records\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/Button\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                           \u003cButton fx:id\u003d\"diaryButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowDiaryPage\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #ffacbb; -fx-border-color: #ffacbb;\" text\u003d\"Diary\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                           \u003cButton fx:id\u003d\"helpButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleShowHelpPage\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #ef827d; -fx-border-color: #ef827d;\" text\u003d\"Help\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cfont\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/font\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/Button\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                           \u003cLabel fx:id\u003d\"result\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"157.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" text\u003d\"FitHelper is ready to help you~\" textAlignment\u003d\"CENTER\" textFill\u003d\"#ef827d\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/VBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 2,
      "IYVVVVV": 24,
      "WANG-Yuchen-Alice": 62,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/MonthView.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"calendarPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cLabel id\u003d\"monthYearTitle\" fx:id\u003d\"monthYearTitle\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 8
    }
  },
  {
    "path": "src/main/resources/view/ProfilePage.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "      \u003cHBox prefHeight\u003d\"500.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003cGridPane prefHeight\u003d\"500.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"287.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"137.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"471.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"263.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"27.0\" prefWidth\u003d\"171.0\" style\u003d\"-fx-background-color: #fed7dd;\" text\u003d\"Name:\" textAlignment\u003d\"CENTER\" textFill\u003d\"#ee3e5b\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"32.0\" prefWidth\u003d\"172.0\" style\u003d\"-fx-background-color: #fed7dd;\" text\u003d\"Gender:\" textAlignment\u003d\"CENTER\" textFill\u003d\"#ee3e5b\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"32.0\" prefWidth\u003d\"171.0\" style\u003d\"-fx-background-color: #fed7dd;\" text\u003d\"Age:\" textAlignment\u003d\"CENTER\" textFill\u003d\"#ee3e5b\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"32.0\" prefWidth\u003d\"170.0\" style\u003d\"-fx-background-color: #fed7dd;\" text\u003d\"Address:\" textAlignment\u003d\"CENTER\" textFill\u003d\"#ee3e5b\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"32.0\" prefWidth\u003d\"173.0\" style\u003d\"-fx-background-color: #fed7dd;\" text\u003d\"Height:\" textAlignment\u003d\"CENTER\" textFill\u003d\"#ee3e5b\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"32.0\" prefWidth\u003d\"173.0\" style\u003d\"-fx-background-color: #fed7dd;\" text\u003d\"Target Weight:\" textAlignment\u003d\"CENTER\" textFill\u003d\"#ee3e5b\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"32.0\" prefWidth\u003d\"173.0\" style\u003d\"-fx-background-color: #fed7dd;\" text\u003d\"Current Weight:\" textAlignment\u003d\"CENTER\" textFill\u003d\"#ee3e5b\" GridPane.rowIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"32.0\" prefWidth\u003d\"179.0\" style\u003d\"-fx-background-color: #fed7dd;\" text\u003d\"Current BMI:\" textAlignment\u003d\"CENTER\" textFill\u003d\"#ee3e5b\" GridPane.rowIndex\u003d\"7\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"471.0\" textAlignment\u003d\"CENTER\" textFill\u003d\"#789cce\" underline\u003d\"true\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel fx:id\u003d\"gender\" alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"471.0\" textAlignment\u003d\"CENTER\" textFill\u003d\"#789cce\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel fx:id\u003d\"age\" alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"471.0\" textAlignment\u003d\"CENTER\" textFill\u003d\"#789cce\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel fx:id\u003d\"address\" alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"471.0\" textAlignment\u003d\"CENTER\" textFill\u003d\"#789cce\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel fx:id\u003d\"height\" alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"471.0\" textAlignment\u003d\"CENTER\" textFill\u003d\"#789cce\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel fx:id\u003d\"targetweight\" alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"471.0\" textAlignment\u003d\"CENTER\" textFill\u003d\"#789cce\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentweight\" alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"471.0\" textAlignment\u003d\"CENTER\" textFill\u003d\"#789cce\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentbmi\" alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"471.0\" textAlignment\u003d\"CENTER\" textFill\u003d\"#789cce\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"7\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"146.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 118
    }
  },
  {
    "path": "src/main/resources/view/ReminderCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"innerPane\" prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003cVBox prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\" spacing\u003d\"3.0\" style\u003d\"-fx-background-color: #ef827d; -fx-border-color: #ef827d;\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                \u003cLabel fx:id\u003d\"index\" prefHeight\u003d\"40.0\" prefWidth\u003d\"40.0\" style\u003d\"-fx-background-color: #ef827d;\" text\u003d\"1\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                \u003cLabel fx:id\u003d\"name\" prefHeight\u003d\"40.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #ef827d;\" text\u003d\"name\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                \u003cLabel fx:id\u003d\"status\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"90.0\" style\u003d\"-fx-background-color: #ef827d;\" text\u003d\"undone\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #ef827d;\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003cVBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"40.0\" prefWidth\u003d\"130.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                        \u003cLabel fx:id\u003d\"time\" prefHeight\u003d\"15.0\" prefWidth\u003d\"130.0\" text\u003d\"time\" textFill\u003d\"#ef827d\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                        \u003cLabel fx:id\u003d\"place\" prefHeight\u003d\"15.0\" prefWidth\u003d\"130.0\" text\u003d\"place\" textFill\u003d\"#ef827d\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                \u003cLabel fx:id\u003d\"calorie\" alignment\u003d\"CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"70.0\" text\u003d\"Calorie\" textFill\u003d\"#ef827d\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"10.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/calorie.png\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 49,
      "IYVVVVV": 17
    }
  },
  {
    "path": "src/main/resources/view/SportCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"innerPane\" prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003cVBox prefHeight\u003d\"80.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\" spacing\u003d\"3.0\" style\u003d\"-fx-background-color: #789cce; -fx-border-color: #789cce;\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                \u003cLabel fx:id\u003d\"index\" prefHeight\u003d\"40.0\" prefWidth\u003d\"40.0\" style\u003d\"-fx-background-color: #789cce;\" text\u003d\"1\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                \u003cLabel fx:id\u003d\"name\" prefHeight\u003d\"40.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #789cce;\" text\u003d\"name\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                \u003cLabel fx:id\u003d\"status\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"90.0\" style\u003d\"-fx-background-color: #789cce;\" text\u003d\"undone\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"60.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #789cce;\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003cVBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"40.0\" prefWidth\u003d\"130.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                        \u003cLabel fx:id\u003d\"time\" prefHeight\u003d\"15.0\" prefWidth\u003d\"130.0\" text\u003d\"time\" textFill\u003d\"#789cce\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                        \u003cLabel fx:id\u003d\"place\" prefHeight\u003d\"15.0\" prefWidth\u003d\"130.0\" text\u003d\"place\" textFill\u003d\"#789cce\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                                \u003cLabel fx:id\u003d\"calorie\" alignment\u003d\"CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"70.0\" text\u003d\"Calorie\" textFill\u003d\"#789cce\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"10.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/calorie.png\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 57,
      "IYVVVVV": 6
    }
  },
  {
    "path": "src/main/resources/view/SportsListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calorie\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 41
    }
  },
  {
    "path": "src/main/resources/view/SportsListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "  \u003cListView fx:id\u003d\"sportsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 8
    }
  },
  {
    "path": "src/main/resources/view/TodayPage.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.chart.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "      \u003cVBox prefHeight\u003d\"500.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"80.0\" prefWidth\u003d\"700.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"30.0\" prefWidth\u003d\"220.0\" style\u003d\"-fx-background-color: #789cce; -fx-border-color: #ffffff;\" text\u003d\"Today\u0027s Food\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"118.0\" layoutY\u003d\"18.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"220.0\" style\u003d\"-fx-background-color: #789cce; -fx-border-color: #ffffff;\" text\u003d\"Today\u0027s Sports\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"30.0\" prefWidth\u003d\"260.0\" style\u003d\"-fx-background-color: #ef827d; -fx-border-color: #ffffff;\" text\u003d\"My Performance\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cHBox prefHeight\u003d\"377.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cListView fx:id\u003d\"foodListView\" editable\u003d\"true\" prefHeight\u003d\"277.0\" prefWidth\u003d\"220.0\" style\u003d\"-fx-background-color: white;\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cListView fx:id\u003d\"sportListView\" prefHeight\u003d\"277.0\" prefWidth\u003d\"220.0\" style\u003d\"-fx-background-color: white;\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cSeparator orientation\u003d\"VERTICAL\" prefHeight\u003d\"359.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cAnchorPane prefHeight\u003d\"277.0\" prefWidth\u003d\"260.0\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"277.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cLabel fx:id\u003d\"calorieGain\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" text\u003d\"Calorie-Intake\" textFill\u003d\"#ef827d\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cLabel fx:id\u003d\"calorieGain1\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" text\u003d\"Food Calorie Distribution :\" textFill\u003d\"#ef827d\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cAnchorPane prefHeight\u003d\"114.0\" prefWidth\u003d\"259.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                    \u003cPieChart fx:id\u003d\"foodCaloriePieChart\" labelLineLength\u003d\"10.0\" legendVisible\u003d\"false\" prefHeight\u003d\"100.0\" prefWidth\u003d\"260.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cLabel fx:id\u003d\"calorieConsume\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" text\u003d\"Calorie-Consumption\" textFill\u003d\"#ef827d\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cLabel fx:id\u003d\"totalCalorie\" layoutX\u003d\"10.0\" layoutY\u003d\"40.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" text\u003d\"Total-Calorie\" textFill\u003d\"#ef827d\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cLabel fx:id\u003d\"performance\" layoutX\u003d\"10.0\" layoutY\u003d\"70.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" text\u003d\"Sport Task Performance\" textFill\u003d\"#ef827d\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"78.0\" prefWidth\u003d\"220.0\" spacing\u003d\"5.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cLabel fx:id\u003d\"doneFoodCounter\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"30.0\" prefWidth\u003d\"150.0\" style\u003d\"-fx-background-color: #789cce;\" text\u003d\"done food plan\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cLabel fx:id\u003d\"undoneFoodCounter\" alignment\u003d\"CENTER\" prefHeight\u003d\"30.0\" prefWidth\u003d\"150.0\" style\u003d\"-fx-background-color: #ef827d;\" text\u003d\"undone food plan\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cInsets bottom\u003d\"6.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"78.0\" prefWidth\u003d\"220.0\" spacing\u003d\"5.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cLabel fx:id\u003d\"doneSportCounter\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"30.0\" prefWidth\u003d\"150.0\" style\u003d\"-fx-background-color: #789cce;\" text\u003d\"done sports plan\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                        \u003cLabel fx:id\u003d\"undoneSportCounter\" alignment\u003d\"CENTER\" prefHeight\u003d\"30.0\" prefWidth\u003d\"150.0\" style\u003d\"-fx-background-color: #ef827d;\" text\u003d\"undone sport plan\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cInsets bottom\u003d\"6.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"260.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"20.0\" prefWidth\u003d\"260.0\" style\u003d\"-fx-background-color: #ef827d; -fx-border-color: #ef827d;\" text\u003d\"FitHelper Feedback~\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cFont size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003cLabel fx:id\u003d\"feedback\" alignment\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" prefHeight\u003d\"60.0\" prefWidth\u003d\"260.0\" style\u003d\"-fx-background-color: #ffffff;\" text\u003d\"Now add in some plans and get your feedbacks~\" textFill\u003d\"#ef827d\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                              \u003cFont size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WANG-Yuchen-Alice"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WANG-Yuchen-Alice": 89,
      "IYVVVVV": 6
    }
  },
  {
    "path": "src/main/resources/view/UpcomingList.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003cStackPane id\u003d\"upcomingPane\" alignment\u003d\"TOP_CENTER\" maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003cStackPane prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003cLabel fx:id\u003d\"upcomingTitle\" StackPane.alignment\u003d\"TOP_LEFT\" textFill\u003d\"#789cce\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cInsets top\u003d\"0.0\" left\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003cStackPane id\u003d\"upcomingPanel\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003cScrollPane id\u003d\"upcomingScrollPane\" fitToWidth\u003d\"true\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                        \u003cListView fx:id\u003d\"listView\" prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 34
    }
  },
  {
    "path": "src/main/resources/view/WeightPage.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "      \u003cGridPane prefHeight\u003d\"500.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"294.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"93.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"507.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"507.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"26.0\" prefWidth\u003d\"93.0\" style\u003d\"-fx-background-color: #ffc5ce;\" text\u003d\"Data Table\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"28.0\" prefWidth\u003d\"93.0\" style\u003d\"-fx-background-color: #ffc5ce;\" text\u003d\"Weight Trend\" textFill\u003d\"WHITE\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"31.0\" prefWidth\u003d\"93.0\" style\u003d\"-fx-background-color: #ffc5ce;\" text\u003d\"BMI Trend\" textFill\u003d\"WHITE\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                  \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003cLineChart GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003cxAxis\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003cyAxis\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003cLineChart GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003cxAxis\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003cyAxis\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "                \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "              \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "            \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IYVVVVV"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "IYVVVVV": 60
    }
  },
  {
    "path": "src/test/java/fithelper/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void versionParsingacceptableVersionStringparsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void versionParsingwrongVersionStringthrowIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void versionConstructorcorrectParametervalueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void versionToStringvalidVersioncorrectStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void versionComparablevalidVersioncompareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void versionComparablevalidVersionhashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void versionComparablevalidVersionequalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 9,
      "-": 126
    }
  },
  {
    "path": "src/test/java/fithelper/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 3,
      "-": 55
    }
  },
  {
    "path": "src/test/java/fithelper/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void getImageexitingImage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void getImagenullGiventhrowsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void checkArgumentfalseWithoutErrorMessagethrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void checkArgumentfalseWithErrorMessagethrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 7,
      "-": 24
    }
  },
  {
    "path": "src/test/java/fithelper/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 4,
      "-": 105
    }
  },
  {
    "path": "src/test/java/fithelper/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/fithelper/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void serializeObjectToJsonFilenoExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void deserializeObjectFromJsonFilenoExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstancecorrectObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJsoncorrectObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 7,
      "-": 38
    }
  },
  {
    "path": "src/test/java/fithelper/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void containsWordIgnoreCasenullWordthrowsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void containsWordIgnoreCaseemptyWordthrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void containsWordIgnoreCasemultipleWordsthrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void containsWordIgnoreCasenullSentencethrowsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void containsWordIgnoreCasevalidInputscorrectResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void getDetailsexceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void getDetailsnullGiventhrowsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 9,
      "-": 134
    }
  },
  {
    "path": "src/test/java/fithelper/model/entry/CalorieTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class CalorieTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructornullthrowsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Calorie(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructorinvalidCaloriethrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String invalidCalorie \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Calorie(invalidCalorie));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void isValidCalorie() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // null calorie"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Calorie.isValidCalorie(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // invalid calories"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"-0.5\")); // negative calorie"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // valid calorie"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Calorie.isValidCalorie(\"0.555\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Calorie.isValidCalorie(\"400.0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 36
    }
  },
  {
    "path": "src/test/java/fithelper/model/entry/DurationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class DurationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructornullthrowsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Duration(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructorinvalidEmailthrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String invalidDuration \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Duration(invalidDuration));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void isValidDuration() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Duration.isValidDuration(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Duration.isValidDuration(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // invalid values"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"-0.6\")); // negative value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"-34.0\")); // negative value"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // valid values"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Duration.isValidDuration(\"5.0\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Duration.isValidDuration(\"0.5\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 39
    }
  },
  {
    "path": "src/test/java/fithelper/model/entry/LocationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructornullthrowsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructorinvalidLocationthrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // invalid locations"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // valid locations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Leng Inc; 1234 Market St; San Francisco \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                + \"CA 2349879; USA\")); // long location"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 37
    }
  },
  {
    "path": "src/test/java/fithelper/model/entry/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructornullthrowsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructorinvalidNamethrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Name.isValidName(\"chicken rice\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Name.isValidName(\"McDonald\u0027s\")); // with capital letters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Name.isValidName(\"Earl Grey Milk Tea with Jelly 50% sugar\")); // long names"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 36
    }
  },
  {
    "path": "src/test/java/fithelper/model/entry/RemarkTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructornullthrowsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void isValidRemark() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // null remark"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Remark.isValidRemark(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // valid remark"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"the food is reasonably priced\")); // alphabets only"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"I had a good meal\")); // with capital letters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 26
    }
  },
  {
    "path": "src/test/java/fithelper/model/entry/StatusTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class StatusTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructornullthrowsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void isValidStatus() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // null status"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e Status.isValidStatus(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // invalid status"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Status.isValidStatus(\" \")); // spaces only"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Status.isValidStatus(\"done\")); // lower case done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Status.isValidStatus(\"undone\")); // lonwer case undone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Status.isValidStatus(\"Not sure\")); // other undefined status"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // valid status"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Status.isValidStatus(\"Done\")); // done status"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Status.isValidStatus(\"Undone\")); // undone status"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 30
    }
  },
  {
    "path": "src/test/java/fithelper/model/entry/TimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructornullthrowsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructorinvalidTimethrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Time.isValidTime(\"tmr\")); // date only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Time.isValidTime(\"tmr 2pm\")); // time not in HH:mm format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Time.isValidTime(\"tmr 2pm\")); // time not in HH:mm format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Time.isValidTime(\"tmr-12:20\")); // date and time not separated by space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // valid time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Time.isValidTime(\"tmr 23:00\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Time.isValidTime(\"03-23 12:00\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 39
    }
  },
  {
    "path": "src/test/java/fithelper/model/entry/TypeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class TypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructornullthrowsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void isValidType() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // null type"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e Type.isValidType(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        //assertFalse(Type.isValidType(\" \")); // spaces only"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Type.isValidType(\"sport\")); // singular sport"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Type.isValidType(\"Sports\")); // upper case sports"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Type.isValidType(\"Food\")); // upper case food"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertFalse(Type.isValidType(\"Not sure\")); // other undefined type"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        // valid type"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Type.isValidType(\"food\")); // food type"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        assertTrue(Type.isValidType(\"sports\")); // sports type"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 31
    }
  },
  {
    "path": "src/test/java/fithelper/testutil/AssertUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "public class AssertUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 4,
      "-": 31
    }
  },
  {
    "path": "src/test/java/fithelper/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 2,
      "-": 71
    }
  },
  {
    "path": "src/test/java/fithelper/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.model.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "            System.out.println(\"IO Exception\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Returns the middle index of the entry in the {@code model}\u0027s entry list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodEntryList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Returns the last index of the entry in the {@code model}\u0027s entry list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodEntryList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "     * Returns the entry in the {@code model}\u0027s entry list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public static Entry getEntry(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "        return model.getFilteredFoodEntryList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 12,
      "-": 43
    }
  },
  {
    "path": "src/test/java/fithelper/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/fithelper/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "package fithelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import static fithelper.testutil.AssertUtil.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "import fithelper.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructornullFileUrlthrowsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructormissingFileUrlthrowsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructorinvalidFileUrlthrowsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructorvalidFileUrlloadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructorvalidFileWithFxRootUrlloadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructornullFileNamethrowsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructormissingFileNamethrowsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "    public void constructorinvalidFileNamethrowsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 11,
      "-": 103
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003c?import fithelper.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYiping126"
        },
        "content": "\u003cfx:root type\u003d\"fithelper.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangYiping126": 1,
      "-": 5
    }
  }
]
