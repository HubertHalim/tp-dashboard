[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-params\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            \u0027site-name\u0027: \u0027Delino\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W12-1/main\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 2,
      "-": 153,
      "JeremyLoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.storage.JsonOrderBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.storage.JsonReturnOrderBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.storage.OrderBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.storage.ReturnOrderBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Delino ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBookStorage returnOrderBookStorage \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new JsonReturnOrderBookStorage(userPrefs.getReturnOrderBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        OrderBookStorage orderBookStorage \u003d new JsonOrderBookStorage(userPrefs.getOrderBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        storage \u003d new StorageManager(orderBookStorage, returnOrderBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s order book and return order book and"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The data from the sample order book and return order book will be used instead if {@code storage}\u0027s order book"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * and return order book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * or an empty order book and an empty return order book will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code storage}\u0027s order book and return order book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Optional\u003cReadOnlyOrderBook\u003e orderBookOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Optional\u003cReadOnlyReturnOrderBook\u003e returnOrderBookOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ReadOnlyOrderBook initialData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReadOnlyReturnOrderBook initialReturnData;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            orderBookOptional \u003d storage.readOrderBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (orderBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample OrderBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            initialData \u003d orderBookOptional.orElseGet(SampleDataUtil::getSampleOrderBook);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty OrderBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            initialData \u003d new OrderBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty OrderBook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            initialData \u003d new OrderBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            returnOrderBookOptional \u003d storage.readReturnOrderBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (returnOrderBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ReturnOrderBook\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            initialReturnData \u003d returnOrderBookOptional.orElseGet(SampleDataUtil::getSampleReturnOrderBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ReturnOrderBook\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            initialReturnData \u003d new ReturnOrderBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ReturnOrderBook\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            initialReturnData \u003d new ReturnOrderBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new ModelManager(initialData, initialReturnData, userPrefs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty OrderBook\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        logger.info(\"Starting Delino \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Delino ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 44,
      "-": 159,
      "JeremyLoh": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_DISPLAYED_INDEX \u003d \"The order index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_ORDERS_LISTED_OVERVIEW \u003d \"%1$d orders listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "JeremyLoh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the OrderBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @see seedu.address.model.Model#getOrderBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ReadOnlyOrderBook getOrderBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the ReturnOrderBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @see seedu.address.model.Model#getReturnOrderBook()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ReadOnlyReturnOrderBook getReturnOrderBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of orders */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of return orders */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredReturnOrderList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the user prefs\u0027 order book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the user prefs\u0027 return order book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Path getReturnOrderBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 24,
      "-": 41,
      "JeremyLoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.parser.OrderBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final OrderBookParser orderBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        orderBookParser \u003d new OrderBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Command command \u003d orderBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            storage.saveOrderBook(model.getOrderBook());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            storage.saveReturnOrderBook(model.getReturnOrderBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReadOnlyOrderBook getOrderBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return model.getOrderBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReadOnlyReturnOrderBook getReturnOrderBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return model.getReturnOrderBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return model.getFilteredOrderList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredReturnOrderList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return model.getFilteredReturnOrderList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return model.getOrderBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path getReturnOrderBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return model.getReturnOrderBookFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 19,
      "-": 70,
      "JeremyLoh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Clears the order book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            + \": Clear the order book list.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            + \"Parameters: -f\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Order book has been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String MESSAGE_ENQUIRY \u003d \"Are you sure you want to clear the order book list?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ClearCommand(String flag) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this.flag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (flag \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return new CommandResult(MESSAGE_ENQUIRY, false, false, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        model.setOrderBook(new OrderBook());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                || (other instanceof ClearCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 flag.equals(((ClearCommand) other).flag));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 28,
      "-": 20,
      "JeremyLoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /** Warning message should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final boolean clearList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean clearList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.clearList \u003d clearList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean isClearList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return clearList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 clearList \u003d\u003d otherCommandResult.clearList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, clearList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 13,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " * Deletes an order identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + \": Deletes the order identified by the index number used in the displayed order list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order orderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        model.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 4,
      "-": 44,
      "Amoscheong97": 2,
      "JeremyLoh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DistrictInfo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Contains district and area information of Singapore."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class DistrictInfo {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Areas of Singapore"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String CENTRAL \u003d \"CENTRAL\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String EAST \u003d \"EAST\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String NORTH_EAST \u003d \"NORTH-EAST\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String WEST \u003d \"WEST\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String NORTH \u003d \"NORTH\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Regex for postal district and area"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district1 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S01\\\\d{4}.*\", \".*S02\\\\d{4}.*\", \".*S03\\\\d{4}.*\", \".*S04\\\\d{4}.*\", \".*S05\\\\d{4}.*\", \".*S06\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district2 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S07\\\\d{4}.*\", \".*S08\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district3 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S14\\\\d{4}.*\", \".*S15\\\\d{4}.*\", \".*S16\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district4 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S09\\\\d{4}.*\", \".*S10\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district5 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S11\\\\d{4}.*\", \".*S12\\\\d{4}.*\", \".*S13\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district6 \u003d new ArrayList\u003c\u003e(Collections.singletonList("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S17\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district7 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S18\\\\d{4}.*\", \".*S19\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district8 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S20\\\\d{4}.*\", \".*S21\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district9 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S22\\\\d{4}.*\", \".*S23\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district10 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S24\\\\d{4}.*\", \".*S25\\\\d{4}.*\", \".*S26\\\\d{4}.*\", \".*S27\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district11 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S28\\\\d{4}.*\", \".*S29\\\\d{4}.*\", \".*S30\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district12 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S31\\\\d{4}.*\", \".*S32\\\\d{4}.*\", \".*S33\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district13 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S34\\\\d{4}.*\", \".*S35\\\\d{4}.*\", \".*S36\\\\d{4}.*\", \".*S37\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district14 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S38\\\\d{4}.*\", \".*S39\\\\d{4}.*\", \".*S40\\\\d{4}.*\", \".*S41\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district15 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S42\\\\d{4}.*\", \".*S43\\\\d{4}.*\", \".*S44\\\\d{4}.*\", \".*S45\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district16 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S46\\\\d{4}.*\", \".*S47\\\\d{4}.*\", \".*S48\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district17 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S49\\\\d{4}.*\", \".*S50\\\\d{4}.*\", \".*S81\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district18 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S51\\\\d{4}.*\", \".*S52\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district19 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S53\\\\d{4}.*\", \".*S54\\\\d{4}.*\", \".*S55\\\\d{4}.*\", \".*S82\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district20 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S56\\\\d{4}.*\", \".*S57\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district21 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S58\\\\d{4}.*\", \".*S59\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district22 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S60\\\\d{4}.*\", \".*S61\\\\d{4}.*\", \".*S62\\\\d{4}.*\", \".*S63\\\\d{4}.*\", \".*S64\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district23 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S65\\\\d{4}.*\", \".*S66\\\\d{4}.*\", \".*S67\\\\d{4}.*\", \".*S68\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district24 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S69\\\\d{4}.*\", \".*S70\\\\d{4}.*\", \".*S71\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district25 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S72\\\\d{4}.*\", \".*S73\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district26 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S77\\\\d{4}.*\", \".*S78\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district27 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S75\\\\d{4}.*\", \".*S76\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e district28 \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \".*S79\\\\d{4}.*\", \".*S80\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e centralArea \u003d Stream.of("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            district1, district2, district3, district4, district5, district6,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            district7, district8, district9, district10, district11, district12,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            district13, district14, district15, district21)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .flatMap(Collection::stream)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e eastArea \u003d Stream.of("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            district16, district17, district18)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .flatMap(Collection::stream)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e northEastArea \u003d Stream.of("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            district19, district20, district28)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .flatMap(Collection::stream)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e westArea \u003d Stream.of("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            district22, district23, district24)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .flatMap(Collection::stream)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static List\u003cString\u003e northArea \u003d Stream.of("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            district25, district26, district27)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .flatMap(Collection::stream)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Checks if a given {@code searchTerm} is a valid area."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param searchTerm used for checking validity"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return boolean indicating validity of given {@code searchTerm}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static boolean isValidArea(String searchTerm) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(searchTerm);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String term \u003d searchTerm.toUpperCase();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of(CENTRAL, EAST, NORTH_EAST, WEST, NORTH)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .anyMatch(term::contains);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Obtain a list of postal sectors regex with the same area."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param searchTerm used to find all matching areas"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return {@code List\u003cString\u003e} of all postal sectors regex with same area"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static List\u003cString\u003e sameAreaRegex(String searchTerm) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(searchTerm);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        switch (searchTerm.toUpperCase()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"CENTRAL\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return centralArea;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"EAST\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return eastArea;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"NORTH-EAST\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return northEastArea;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"WEST\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return westArea;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"NORTH\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return northArea;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": " * Adds a order to the order book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delivered\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \": Marks an order as delivered based on its index in the current list.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final String MESSAGE_DELIVERED_SUCCESS \u003d \"The order has been delivered: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final String MESSAGE_ORDER_ALREADY_DELIVERED \u003d \"This order was already delivered\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private final DoneCommand.DoneOrderDescriptor doneOrderDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * @param targetIndex                of the order in the filtered order list to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * @param doneOrderDescriptor details to edit the order with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneCommand(Index targetIndex, DoneOrderDescriptor doneOrderDescriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        requireNonNull(doneOrderDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        this.doneOrderDescriptor \u003d new DoneOrderDescriptor(doneOrderDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /*@Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order orderToBeDelivered \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        if (orderToBeDelivered.isDelivered() \u003d\u003d false) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            model.deliverOrder(orderToBeDelivered);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            model.updateFilteredOrderList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELIVERED_SUCCESS, orderToBeDelivered));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            model.updateFilteredOrderList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ORDER_ALREADY_DELIVERED, orderToBeDelivered));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order orderToBeDelivered \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order editedOrder \u003d createEditedOrder(orderToBeDelivered, doneOrderDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        if (orderToBeDelivered.isDelivered() \u003d\u003d false) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            model.setOrder(orderToBeDelivered, editedOrder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            model.deliverOrder(editedOrder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELIVERED_SUCCESS, orderToBeDelivered));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            model.updateFilteredOrderList(Model.PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ORDER_ALREADY_DELIVERED, orderToBeDelivered));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private static Order createEditedOrder(Order orderToDeliver, DoneOrderDescriptor doneOrderDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assert orderToDeliver !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        TransactionId updatedTid \u003d doneOrderDescriptor.getTid().orElse(orderToDeliver.getTid());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Name updatedName \u003d doneOrderDescriptor.getName().orElse(orderToDeliver.getName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Phone updatedPhone \u003d doneOrderDescriptor.getPhone().orElse(orderToDeliver.getPhone());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Email updatedEmail \u003d doneOrderDescriptor.getEmail().orElse(orderToDeliver.getEmail());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Address updatedAddress \u003d doneOrderDescriptor.getAddress().orElse(orderToDeliver.getAddress());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        TimeStamp updateTimeStamp \u003d doneOrderDescriptor.getTimeStamp().orElse(orderToDeliver.getTimestamp());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Warehouse updatedWarehouse \u003d doneOrderDescriptor.getWarehouse().orElse(orderToDeliver.getWarehouse());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        CashOnDelivery updatedCod \u003d doneOrderDescriptor.getCash().orElse(orderToDeliver.getCash());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Comment updatedComment \u003d doneOrderDescriptor.getComment().orElse(orderToDeliver.getComment());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        TypeOfItem updatedType \u003d doneOrderDescriptor.getItemType().orElse(orderToDeliver.getItemType());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        boolean updatedDeliveryStatus \u003d doneOrderDescriptor.getDeliveryStatus();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order copyOrder \u003d new Order(updatedTid, updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                updateTimeStamp, updatedWarehouse, updatedCod, updatedComment, updatedType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        copyOrder.setDeliveryStatus(updatedDeliveryStatus);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return copyOrder;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        if (!(other instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        DoneCommand e \u003d (DoneCommand) other;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                \u0026\u0026 doneOrderDescriptor.equals(e.doneOrderDescriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Stores the details to edit the order with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * corresponding field value of the order."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static class DoneOrderDescriptor {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        private TransactionId tid;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        private TimeStamp timeStamp;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        private Warehouse warehouse;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        private CashOnDelivery cod;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        private Comment comment;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        private TypeOfItem itemType;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        private boolean deliveryStatus;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public DoneOrderDescriptor() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public DoneOrderDescriptor(Order toCopy) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setTid(toCopy.getTid());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setName(toCopy.getName());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setPhone(toCopy.getPhone());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setEmail(toCopy.getEmail());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setAddress(toCopy.getAddress());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setTimeStamp(toCopy.getTimestamp());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setWarehouse(toCopy.getWarehouse());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setCash(toCopy.getCash());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setComment(toCopy.getComment());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setItemType(toCopy.getItemType());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setDeliveryStatus(toCopy.isDelivered());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public DoneOrderDescriptor(DoneOrderDescriptor toCopy) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setTid(toCopy.tid);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setTimeStamp(toCopy.timeStamp);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setWarehouse(toCopy.warehouse);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setCash(toCopy.cod);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setComment(toCopy.comment);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setItemType(toCopy.itemType);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            setDeliveryStatus(toCopy.deliveryStatus);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void setTid(TransactionId tid) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            this.tid \u003d tid;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public Optional\u003cTransactionId\u003e getTid() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return Optional.ofNullable(tid);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void setTimeStamp(TimeStamp timeStamp) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            this.timeStamp \u003d timeStamp;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public Optional\u003cTimeStamp\u003e getTimeStamp() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return Optional.ofNullable(timeStamp);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void setWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            this.warehouse \u003d warehouse;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public Optional\u003cWarehouse\u003e getWarehouse() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return Optional.ofNullable(warehouse);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void setCash(CashOnDelivery cod) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            this.cod \u003d cod;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public Optional\u003cCashOnDelivery\u003e getCash() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return Optional.ofNullable(cod);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void setComment(Comment comment) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            this.comment \u003d comment;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public Optional\u003cComment\u003e getComment() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return Optional.ofNullable(comment);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void setItemType(TypeOfItem itemType) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            this.itemType \u003d itemType;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public Optional\u003cTypeOfItem\u003e getItemType() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return Optional.ofNullable(itemType);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public boolean getDeliveryStatus() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return this.deliveryStatus;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void setDeliveryStatus(boolean deliveryStatus) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            this.deliveryStatus \u003d deliveryStatus;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            if (!(other instanceof DoneCommand.DoneOrderDescriptor)) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            DoneCommand.DoneOrderDescriptor e \u003d (DoneOrderDescriptor) other;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return getTid().equals(e.getTid())"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u0026\u0026 getTimeStamp().equals(e.getTimeStamp())"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u0026\u0026 getWarehouse().equals(e.getWarehouse())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u0026\u0026 getCash().equals(e.getCash())"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u0026\u0026 getComment().equals(e.getComment())"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u0026\u0026 getItemType().equals(e.getItemType())"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u0026\u0026 (getDeliveryStatus() \u003d\u003d (e.getDeliveryStatus()));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 3,
      "Cherweijie": 314
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_TIMESTAMP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAREHOUSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Edits the details of an existing order in the order book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the order identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            + \"by the index number used in the displayed order list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + \"[\" + PREFIX_TID + \"TRANSACTION_ID] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            + \"[\" + PREFIX_DELIVERY_TIMESTAMP + \"DELIVERY_DATE_\u0026_TIME] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            + \"[\" + PREFIX_WAREHOUSE + \"WAREHOUSE_LOCATION] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + \"[\" + PREFIX_COD + \"CASH_ON_DELIVERY] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            + \"[\" + PREFIX_COMMENT + \"COMMENT] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + \"[\" + PREFIX_TYPE + \"TYPE_OF_ITEM] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + PREFIX_TID + \"A0185837Q\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_EDIT_ORDER_SUCCESS \u003d \"Edited Order: %1$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists in the order book.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final EditOrderDescriptor editOrderDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param index                of the order in the filtered order list to edit"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param editOrderDescriptor details to edit the order with"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EditCommand(Index index, EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(editOrderDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.editOrderDescriptor \u003d new EditOrderDescriptor(editOrderDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order orderToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order editedOrder \u003d createEditedOrder(orderToEdit, editOrderDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!orderToEdit.isSameOrder(editedOrder) \u0026\u0026 model.hasOrder(editedOrder)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        model.setOrder(orderToEdit, editedOrder);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ORDER_SUCCESS, editedOrder));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Creates and returns a {@code Order} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * edited with {@code editOrderDescriptor}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Order createEditedOrder(Order orderToEdit, EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assert orderToEdit !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        TransactionId updatedTid \u003d editOrderDescriptor.getTid().orElse(orderToEdit.getTid());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Name updatedName \u003d editOrderDescriptor.getName().orElse(orderToEdit.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Phone updatedPhone \u003d editOrderDescriptor.getPhone().orElse(orderToEdit.getPhone());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Email updatedEmail \u003d editOrderDescriptor.getEmail().orElse(orderToEdit.getEmail());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Address updatedAddress \u003d editOrderDescriptor.getAddress().orElse(orderToEdit.getAddress());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        TimeStamp updateTimeStamp \u003d editOrderDescriptor.getTimeStamp().orElse(orderToEdit.getTimestamp());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Warehouse updatedWarehouse \u003d editOrderDescriptor.getWarehouse().orElse(orderToEdit.getWarehouse());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        CashOnDelivery updatedCod \u003d editOrderDescriptor.getCash().orElse(orderToEdit.getCash());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Comment updatedComment \u003d editOrderDescriptor.getComment().orElse(orderToEdit.getComment());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        TypeOfItem updatedType \u003d editOrderDescriptor.getItemType().orElse(orderToEdit.getItemType());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return new Order(updatedTid, updatedName, updatedPhone, updatedEmail, updatedAddress, updateTimeStamp,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                updatedWarehouse, updatedCod, updatedComment, updatedType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \u0026\u0026 editOrderDescriptor.equals(e.editOrderDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Stores the details to edit the order with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * corresponding field value of the order."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static class EditOrderDescriptor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        private TransactionId tid;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        private TimeStamp timeStamp;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        private Warehouse warehouse;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        private CashOnDelivery cod;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        private Comment comment;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        private TypeOfItem itemType;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        public EditOrderDescriptor() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        public EditOrderDescriptor(EditOrderDescriptor toCopy) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            setTid(toCopy.tid);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            setTimeStamp(toCopy.timeStamp);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            setWarehouse(toCopy.warehouse);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            setCash(toCopy.cod);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            setComment(toCopy.comment);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            setItemType(toCopy.itemType);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return CollectionUtil.isAnyNonNull(tid, name, phone, email, address, timeStamp, warehouse,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    cod, comment, itemType);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        public void setTid(TransactionId tid) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            this.tid \u003d tid;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        public Optional\u003cTransactionId\u003e getTid() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            return Optional.ofNullable(tid);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void setTimeStamp(TimeStamp timeStamp) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            this.timeStamp \u003d timeStamp;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public Optional\u003cTimeStamp\u003e getTimeStamp() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return Optional.ofNullable(timeStamp);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        public void setWarehouse(Warehouse warehouse) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            this.warehouse \u003d warehouse;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        public Optional\u003cWarehouse\u003e getWarehouse() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return Optional.ofNullable(warehouse);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        public void setCash(CashOnDelivery cod) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            this.cod \u003d cod;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        public Optional\u003cCashOnDelivery\u003e getCash() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            return Optional.ofNullable(cod);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void setComment(Comment comment) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            this.comment \u003d comment;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public Optional\u003cComment\u003e getComment() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return Optional.ofNullable(comment);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        public void setItemType(TypeOfItem itemType) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            this.itemType \u003d itemType;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        public Optional\u003cTypeOfItem\u003e getItemType() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            return Optional.ofNullable(itemType);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            if (!(other instanceof EditOrderDescriptor)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            EditOrderDescriptor e \u003d (EditOrderDescriptor) other;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            return getTid().equals(e.getTid())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    \u0026\u0026 getTimeStamp().equals(e.getTimeStamp())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    \u0026\u0026 getWarehouse().equals(e.getWarehouse())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    \u0026\u0026 getCash().equals(e.getCash())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    \u0026\u0026 getComment().equals(e.getComment())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    \u0026\u0026 getItemType().equals(e.getItemType());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 34,
      "-": 159,
      "Amoscheong97": 43,
      "JeremyLoh": 50,
      "Cherweijie": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Order Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Please refer to the pop-up window for more information.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n\" + \"Alternatively, you may refer to Delino\u0027s User Guide at https://bit.ly/38Y296W\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 19,
      "Cherweijie": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InsertCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_TIMESTAMP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAREHOUSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Adds a order to the order book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "public class InsertCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"insert\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an order to the order book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + PREFIX_TID + \"TRANSACTION_ID \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            + PREFIX_DELIVERY_TIMESTAMP + \"Delivery_DATE_\u0026_TIME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + PREFIX_WAREHOUSE + \"WAREHOUSE_LOCATION \" + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + PREFIX_COD + \"CASH_ON_DELIVERY \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            + \"[\" + PREFIX_COMMENT + \"COMMENT] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + \"[\" + PREFIX_TYPE + \"TYPE_OF_ITEM] \" + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + PREFIX_TID + \"A999999 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@gmail.com\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            + PREFIX_DELIVERY_TIMESTAMP + \"2019-12-02 1500 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            + PREFIX_WAREHOUSE + \"5 Toh Guan Rd E, #02-30 S608831 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + PREFIX_COD + \"$2 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            + PREFIX_COMMENT + \"NIL \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            + PREFIX_TYPE + \"glass \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New order added: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists in the order book\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final Order toAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Creates an InsertCommand to add the specified {@code Order}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public InsertCommand(Order order) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        toAdd \u003d order;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (model.hasOrder(toAdd)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        model.addOrder(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                || (other instanceof InsertCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((InsertCommand) other).toAdd));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 9,
      "-": 43,
      "Amoscheong97": 16,
      "JeremyLoh": 9,
      "Cherweijie": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NearbyCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.commands.NearbyCommandUtil.getGeneralLocation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.commands.NearbyCommandUtil.isValidPostalSector;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Used to identify orders in the order book that belong to a given postal sector or area."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class NearbyCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"nearby\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            + \": View all orders located at the same postal sector based on the displayed order list.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            + NEWLINE + \"Parameters: POSTAL_SECTOR or AREA\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            + NEWLINE + \"A postal sector is the first two digits of a six digit Singapore postal code\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            + NEWLINE + \"An area is one of the following: Central, East, North-East, West, North\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            + NEWLINE + \"Example: \" + COMMAND_WORD + \" 14\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            + NEWLINE + \"Example: \" + COMMAND_WORD + \" central\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS_POSTAL_SECTOR \u003d \"Displayed all orders in postal sector.\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            + NEWLINE + \"General Location: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS_AREA \u003d \"Displayed all orders in area (%s)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_FAILURE_POSTAL_SECTOR \u003d \"Invalid postal sector given.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_FAILURE_AREA \u003d \"Invalid area given.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final String searchTerm;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public NearbyCommand(String searchTerm) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.searchTerm \u003d searchTerm;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Obtain a {@code Predicate\u003cOrder\u003e} that will search based on the postal sector."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return {@code Predicate\u003cOrder\u003e} used for filtering orders"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Predicate\u003cOrder\u003e getPostalSectorPredicate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Index postalSector \u003d Index.fromOneBased(Integer.parseInt(searchTerm));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String location \u003d getGeneralLocation(postalSector).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e matchingPostalSectors \u003d NearbyCommandUtil.sameGeneralLocation(location);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return order -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String orderAddress \u003d order.getAddress().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return matchingPostalSectors.stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    .map(mps -\u003e String.format(\".*%s\\\\d{4}.*\", mps))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    .anyMatch(regex -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        Pattern p \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        Matcher m \u003d p.matcher(orderAddress);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        return m.matches();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Obtain a {@code Predicate\u003cOrder\u003e} that will search based on area."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return {@code Predicate\u003cOrder\u003e} used for filtering orders"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Predicate\u003cOrder\u003e getAreaPredicate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e areaRegex \u003d DistrictInfo.sameAreaRegex(searchTerm);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return order -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String orderAddress \u003d order.getAddress().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return areaRegex.stream().anyMatch(regex -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Pattern p \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Matcher m \u003d p.matcher(orderAddress);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                return m.matches();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (isPostalSectorSearch()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Index postalSector \u003d Index.fromOneBased(Integer.parseInt(searchTerm));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            if (isValidPostalSector(postalSector)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                return showPostalSectors(model, postalSector);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_POSTAL_SECTOR);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (DistrictInfo.isValidArea(searchTerm)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Predicate\u003cOrder\u003e orderPredicate \u003d getAreaPredicate();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            model.updateFilteredOrderList(orderPredicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_AREA, searchTerm));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_AREA);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Show all postal sectors in the given {@code model}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private CommandResult showPostalSectors(Model model, Index postalSector) throws CommandException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Predicate\u003cOrder\u003e orderPredicate \u003d getPostalSectorPredicate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        model.updateFilteredOrderList(orderPredicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cString\u003e generalLocation \u003d getGeneralLocation(postalSector);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (generalLocation.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_POSTAL_SECTOR);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS_POSTAL_SECTOR,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                generalLocation.get()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Checks if given {@code searchTerm} is a postal sector."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return boolean of whether {@code searchTerm} is a postal sector"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private boolean isPostalSectorSearch() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Integer.parseInt(searchTerm);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                || (other instanceof NearbyCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \u0026\u0026 searchTerm.equals(((NearbyCommand) other).searchTerm); // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NearbyCommandUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Contains utility methods used for Nearby Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class NearbyCommandUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static HashMap\u003cInteger, String\u003e postalSectorInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Checks if given {@code postalSector} is a valid postal sector."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param postalSector Used to find postal sector"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return whether given {@code postalSector} is a valid postal sector"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static boolean isValidPostalSector(Index postalSector) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(postalSector);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int givenPostalSector \u003d postalSector.getOneBased();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return postalSectorInfo.containsKey(givenPostalSector);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Obtains the general location for a given {@code postalSector}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param postalSector used to find general location"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return {@code Optional\u003cString\u003e} representing the general location of given postal sector"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static Optional\u003cString\u003e getGeneralLocation(Index postalSector) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(postalSector);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int givenPostalSector \u003d postalSector.getOneBased();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Optional.ofNullable(postalSectorInfo.get(givenPostalSector));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Obtain a list of postal sectors with the same general location."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param location used to find all matching postal sectors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return {@code List\u003cString\u003e} of all postal sectors with same location"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static List\u003cString\u003e sameGeneralLocation(String location) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        for (Map.Entry\u003cInteger, String\u003e entry : postalSectorInfo.entrySet()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            if (location.equals(entry.getValue())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Integer sector \u003d entry.getKey();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                String sectorStr \u003d \"S\" + ((sector \u003c 10) ? (\"0\" + sector)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        : sector);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                output.add(sectorStr);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information to HashMap {@code postalSectorInfo}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void initialize() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict1();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict2();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict3();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict4();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict5();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict6();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict7();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict8();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict9();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict10();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict11();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict12();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict13();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict14();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict15();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict16();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict17();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict18();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict19();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict20();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict21();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict22();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict23();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict24();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict25();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict26();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict27();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        addDistrict28();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 79,80."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict28() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Seletar\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(79, generalLocation);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(80, generalLocation);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 75,76."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict27() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Yishun, Sembawang\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(75, generalLocation);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(76, generalLocation);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 77,78."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict26() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Upper Thomson, Springleaf\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(77, generalLocation);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(78, generalLocation);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 72,73."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict25() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Kranji, Woodgrove\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(72, generalLocation);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(73, generalLocation);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 69,70,71."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict24() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Lim Chu Kang, Tengah\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(69, generalLocation);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(70, generalLocation);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(71, generalLocation);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 65,66,67,68."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict23() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Hillview, Dairy Farm, Bukit Panjang, Choa Chu Kang\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(65, generalLocation);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(66, generalLocation);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(67, generalLocation);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(68, generalLocation);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 60,61,62,63,64."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict22() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Jurong\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(60, generalLocation);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(61, generalLocation);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(62, generalLocation);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(63, generalLocation);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(64, generalLocation);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 58,59."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict21() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Upper Bukit Timah, Clementi Park, Ulu Pandan\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(58, generalLocation);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(59, generalLocation);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 56,57."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict20() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Bishan, Ang Mo Kio\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(56, generalLocation);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(57, generalLocation);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 53,54,55,82."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict19() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Serangoon Garden, Hougang, Punggol\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(53, generalLocation);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(54, generalLocation);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(55, generalLocation);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(82, generalLocation);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 51,52."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict18() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Tampines, Pasir Ris\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(51, generalLocation);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(52, generalLocation);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 49,50,81."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict17() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Loyang, Changi\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(49, generalLocation);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(50, generalLocation);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(81, generalLocation);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 46,47,48."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict16() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Bedok, Upper East Coast, Eastwood, Kew Drive\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(46, generalLocation);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(47, generalLocation);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(48, generalLocation);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 42,43,44,45."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict15() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Katong, Joo Chiat, Amber Road\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(42, generalLocation);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(43, generalLocation);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(44, generalLocation);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(45, generalLocation);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 38,39,40,41."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict14() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Geylang, Eunos\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(38, generalLocation);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(39, generalLocation);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(40, generalLocation);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(41, generalLocation);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 34,35,36,37."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict13() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Macpherson, Braddell\";"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(34, generalLocation);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(35, generalLocation);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(36, generalLocation);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(37, generalLocation);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 31,32,33."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict12() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Balestier, Toa Payoh, Serangoon\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(31, generalLocation);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(32, generalLocation);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(33, generalLocation);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 28,29,30."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict11() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Watten Estate, Novena, Thomson\";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(28, generalLocation);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(29, generalLocation);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(30, generalLocation);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 24,25,26,27."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict10() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Ardmore, Bukit Timah, Holland Road, Tanglin\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(24, generalLocation);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(25, generalLocation);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(26, generalLocation);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(27, generalLocation);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 22,23."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict9() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Orchard, Cairnhill, River Valley\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(22, generalLocation);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(23, generalLocation);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 20,21."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict8() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Little India\";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(20, generalLocation);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(21, generalLocation);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 18,19."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict7() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Middle Road, Golden Mile\";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(18, generalLocation);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(19, generalLocation);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 17."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict6() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(17, \"High Street, Beach Road (part)\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 11,12,13."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict5() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Pasir Panjang, Hong Leong Garden, Clementi New Town\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(11, generalLocation);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(12, generalLocation);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(13, generalLocation);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 9,10."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict4() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Telok Blangah, Harbourfront\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(9, generalLocation);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(10, generalLocation);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 14,15,16."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict3() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Queenstown, Tiong Bahru\";"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(14, generalLocation);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(15, generalLocation);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(16, generalLocation);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 7,8."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict2() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Anson, Tanjong Pagar\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(7, generalLocation);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(8, generalLocation);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Add postal sector information for 1,2,3,4,5,6."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static void addDistrict1() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String generalLocation \u003d \"Raffles Place, Cecil, Marina, People’s Park\";"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(1, generalLocation);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(2, generalLocation);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(3, generalLocation);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(4, generalLocation);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(5, generalLocation);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        postalSectorInfo.put(6, generalLocation);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 376
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.model.order.OrderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Finds and lists all orders in order book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khsc96"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Default, search command searches for all orders \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            + \"that contain any of the specified keywords in any of it\u0027s field (case-insensitive) \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie 999 Geylang\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            + \"If given a Prefix followed by a set of keywords, \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            + \"only orders with that set of keywords under that specific prefix will be displayed.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            + \"However, do note that adding any KEYWORD before any prefix given will result in default search \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            + \"and everything given with prefixes after that will not be considered!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private final OrderContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public SearchCommand(OrderContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        model.updateFilteredOrderList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                String.format(Messages.MESSAGE_ORDERS_LISTED_OVERVIEW, model.getFilteredOrderList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 3,
      "-": 29,
      "khsc96": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_TIMESTAMP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAREHOUSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.logic.commands.InsertCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " * Parses input arguments and creates a new InsertCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "public class AddCommandParser implements Parser\u003cInsertCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InsertCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * and returns an InsertCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public InsertCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TID, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                        PREFIX_DELIVERY_TIMESTAMP, PREFIX_WAREHOUSE, PREFIX_COD, PREFIX_TYPE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                        PREFIX_COMMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TID, PREFIX_NAME, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                PREFIX_DELIVERY_TIMESTAMP, PREFIX_WAREHOUSE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_COD)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InsertCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        TransactionId tid \u003d ParserUtil.parseTid(argMultimap.getValue(PREFIX_TID).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        TimeStamp timeStamp \u003d ParserUtil.parseTimeStamp(argMultimap.getValue(PREFIX_DELIVERY_TIMESTAMP).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Warehouse warehouse \u003d ParserUtil.parseWarehouse(argMultimap.getValue(PREFIX_WAREHOUSE).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        CashOnDelivery cash \u003d ParserUtil.parseCash(argMultimap.getValue(PREFIX_COD).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Comment comment \u003d ParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENT).isEmpty()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                ? \"NIL\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                : argMultimap.getValue(PREFIX_COMMENT).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        TypeOfItem type \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_TYPE).isEmpty()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                ? \"NIL\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                : argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order order \u003d new Order(tid, name, phone, email, address, timeStamp, warehouse, cash, comment, type);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return new InsertCommand(order);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 8,
      "-": 38,
      "Amoscheong97": 24,
      "JeremyLoh": 7,
      "Cherweijie": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     * A getter method to get all the values of the ArgumentMultimap."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     * @return Returns a List of strings containing all the values of the ArgumentMultimap."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public List\u003cString\u003e getAllPrefixValues() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        List\u003cString\u003e allPrefixValues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        Collection\u003cList\u003cString\u003e\u003e collectionOfValues \u003d this.argMultimap.values();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        for (List\u003cString\u003e perPrefixValues : collectionOfValues) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            allPrefixValues.addAll(perPrefixValues);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return allPrefixValues;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "khsc96": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_FORCE_CLEAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Parses input arguments and creates a new ClearCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * and returns an ClearCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ClearCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return new ClearCommand(null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else if (!trimmedArgs.equals(FLAG_FORCE_CLEAR.toString())) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new ClearCommand(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final Prefix PREFIX_TID \u003d new Prefix(\"tid/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final Prefix PREFIX_COD \u003d new Prefix(\"cod/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Prefix PREFIX_DELIVERY_TIMESTAMP \u003d new Prefix(\"dts/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Prefix PREFIX_COMMENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final Prefix PREFIX_WAREHOUSE \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /* Flag definitions */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Flag FLAG_FORCE_CLEAR \u003d new Flag(\"-f\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 4,
      "-": 14,
      "Amoscheong97": 3,
      "JeremyLoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            DoneCommand.DoneOrderDescriptor doneOrderDescriptor \u003d new DoneCommand.DoneOrderDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return new DoneCommand(index, doneOrderDescriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cherweijie": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_TIMESTAMP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAREHOUSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Parses input arguments and creates a new EditCommand Object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TID, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                        PREFIX_DELIVERY_TIMESTAMP, PREFIX_WAREHOUSE, PREFIX_COD, PREFIX_COMMENT, PREFIX_TYPE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditOrderDescriptor editOrderDescriptor \u003d new EditOrderDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TID).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            editOrderDescriptor.setTid(ParserUtil.parseTid(argMultimap.getValue(PREFIX_TID).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            editOrderDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            editOrderDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            editOrderDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            editOrderDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DELIVERY_TIMESTAMP).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            editOrderDescriptor.setTimeStamp("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    ParserUtil.parseTimeStamp(argMultimap.getValue(PREFIX_DELIVERY_TIMESTAMP).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WAREHOUSE).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            editOrderDescriptor.setWarehouse("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    ParserUtil.parseWarehouse(argMultimap.getValue(PREFIX_WAREHOUSE).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COD).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            editOrderDescriptor.setCash(ParserUtil.parseCash(argMultimap.getValue(PREFIX_COD).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMMENT).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            editOrderDescriptor.setComment(ParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENT).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            editOrderDescriptor.setItemType(ParserUtil.parseItemType(argMultimap.getValue(PREFIX_TYPE).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (!editOrderDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return new EditCommand(index, editOrderDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 10,
      "-": 47,
      "Amoscheong97": 13,
      "JeremyLoh": 12,
      "Cherweijie": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Flag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A flag that indicate additional command to the system to work in certain way in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * E.g. \u0027-f\u0027 in clear command, force the system clear the command without notify the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Flag {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Flag(String flag) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return getFlag();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return flag \u003d\u003d null ? 0 : flag.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!(obj instanceof Flag)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Flag otherFlag \u003d (Flag) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return otherFlag.getFlag().equals(getFlag());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NearbyCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.commands.NearbyCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Parses input arguments and creates a new NearbyCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class NearbyCommandParser implements Parser\u003cNearbyCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NearbyCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * and returns a NearbyCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param args to be parsed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws ParseException if {@code args} does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public NearbyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int numOfArgs \u003d trimmedArgs.split(\"\\\\s+\").length;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (numOfArgs \u003e 1 || trimmedArgs.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    NearbyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return new NearbyCommand(trimmedArgs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OrderBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.logic.commands.InsertCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.commands.NearbyCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class OrderBookParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        case InsertCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case NearbyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return new NearbyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 67,
      "Amoscheong97": 2,
      "JeremyLoh": 5,
      "Cherweijie": 5,
      "khsc96": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Parses a {@code String tid} into a {@code TransactionId}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * @throws ParseException if the given {@code tid} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static TransactionId parseTid(String tid) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        requireNonNull(tid);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String trimmedTid \u003d tid.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (!TransactionId.isValidTid(trimmedTid)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            throw new ParseException(TransactionId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return new TransactionId(trimmedTid);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Parses a {@code String timeStamp} into an {@code TimeStamp}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws ParseException if the given {@code timeStamp} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static TimeStamp parseTimeStamp(String timeStamp) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(timeStamp);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String trimmedTimeStamp \u003d timeStamp.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!TimeStamp.isValidTimeStamp(trimmedTimeStamp)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new ParseException(TimeStamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new TimeStamp(trimmedTimeStamp);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Parses a {@code String address} into an {@code Warehouse}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Leading and trailing whitespace will be removed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static Warehouse parseWarehouse(String address) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (!Warehouse.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new ParseException(Warehouse.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return new Warehouse(trimmedAddress);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Parses a {@code String cod} into a {@code CashOnDelivery}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * @throws ParseException if the given {@code cod} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static CashOnDelivery parseCash(String cod) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        requireNonNull(cod);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String trimmedCash \u003d cod.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (!CashOnDelivery.isValidCashValue(trimmedCash)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            throw new ParseException(CashOnDelivery.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return new CashOnDelivery(trimmedCash);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Parses a {@code String comment} into a {@code Comment}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws ParseException if the given {@code comment} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static Comment parseComment(String comment) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(comment);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String trimmedComment \u003d comment.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!Comment.isValidComment(trimmedComment)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new ParseException(Comment.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new Comment(trimmedComment);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Parses a {@code String itemType} into a {@code TypeOfItem}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * @throws ParseException if the given {@code itemType} is invalid."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static TypeOfItem parseItemType(String itemType) throws ParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        requireNonNull(itemType);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String itemTypeTrimmed \u003d itemType.trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (!TypeOfItem.isValidItemType(itemTypeTrimmed)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            throw new ParseException(TypeOfItem.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return new TypeOfItem(itemTypeTrimmed);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 19,
      "-": 102,
      "Amoscheong97": 34,
      "JeremyLoh": 19,
      "Cherweijie": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_TIMESTAMP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAREHOUSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.model.order.KeywordContainsOrderPrefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.model.order.OrderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khsc96"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khsc96"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     * and returns a SearchCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TID, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_COD,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                PREFIX_DELIVERY_TIMESTAMP, PREFIX_WAREHOUSE, PREFIX_COMMENT, PREFIX_TYPE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TID, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_COD,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            PREFIX_DELIVERY_TIMESTAMP, PREFIX_WAREHOUSE, PREFIX_COMMENT, PREFIX_TYPE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywords \u003d Arrays.asList(argMultimap.getPreamble().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            return new SearchCommand(new OrderContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix(argMultimap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        StringBuilder keywordsString \u003d addPrefixKeywordsToList(argMultimap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywords \u003d Arrays.asList(keywordsString.toString().trim().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return new SearchCommand(new OrderContainsKeywordsPredicate(keywords, keywordContainsOrderPrefix));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     * Returns a StringBuilder object of all the values user keyed in."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     * @param argumentMultimap An {@code ArgumentMultimap} object containing all the keywords tagged to a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     *                         specific prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     * @return returns a StringBuilder object of all the values user keyed in with a trailing whitespace behind."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private static StringBuilder addPrefixKeywordsToList(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        StringBuilder keywords \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        List\u003cString\u003e currentPrefixListOfKeywords \u003d argumentMultimap.getAllPrefixValues();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        for (String each : currentPrefixListOfKeywords) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywords.append(each + \" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "khsc96": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_ALL_ORDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the user prefs\u0027 order book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the user prefs\u0027 order book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void setOrderBookFilePath(Path orderBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Replaces order book data with the data in {@code orderBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void setOrderBook(ReadOnlyOrderBook orderBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /** Returns the OrderBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ReadOnlyOrderBook getOrderBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns true if a person with the same identity as {@code order} exists in the order book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    boolean hasOrder(Order order);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Deletes the given order."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The order must exist in the order book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void deleteOrder(Order target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Adds the given order."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code order} must not already exist in the order book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void addOrder(Order order);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Replaces the given order {@code target} with {@code editedOrder}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code target} must exist in the order book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the order book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void setOrder(Order target, Order editedOrder);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Used to mark the given order as delivered."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * The order must exist in the order book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    void deliverOrder(Order target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Used to mark a given order as undelivered."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * The order must exist in the order book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    void renewDeliveryStatus(Order target);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the user prefs\u0027 return order book file path."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Path getReturnOrderBookFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the user prefs\u0027 return order book file path."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void setReturnOrderBookFilePath(Path returnOrderBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Replaces return order book data with the data in {@code returnOrderBook}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void setReturnOrderBook(ReadOnlyReturnOrderBook returnOrderBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /** Returns the ReturnOrderBook */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ReadOnlyReturnOrderBook getReturnOrderBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns true if a return order with the same identity as {@code returnOrder} exists in the return order book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    boolean hasReturnOrder(Order returnOrder);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Deletes the given return order."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The return order must exist in the return order book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void deleteReturnOrder(Order target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Adds the given return order."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code returnOrder} must not already exist in the return order book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void addReturnOrder(Order returnOrder);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Replaces the given order {@code target} with {@code editedReturnOrder}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code target} must exist in the return order book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The return order identity of {@code editedReturnOrder} must not be the same as another existing return order"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * in the return order book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void setReturnOrder(Order target, Order editedReturnOrder);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /** Returns an unmodifiable view of the filtered order list */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /** Returns an unmodifiable view of the filtered return order list */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredReturnOrderList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Updates the filter of the filtered return order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void updateFilteredReturnOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 75,
      "-": 65,
      "Cherweijie": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Represents the in-memory model of the order book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final OrderBook orderBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final ReturnOrderBook returnOrderBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final FilteredList\u003cOrder\u003e filteredOrders;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final FilteredList\u003cOrder\u003e filteredReturnOrders;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Initializes a ModelManager with the given orderBook and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ModelManager(ReadOnlyOrderBook orderBook, ReadOnlyReturnOrderBook returnOrderBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireAllNonNull(orderBook, returnOrderBook, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        logger.fine(\"Initializing with order book: \" + orderBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.orderBook \u003d new OrderBook(orderBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.returnOrderBook \u003d new ReturnOrderBook(returnOrderBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        filteredOrders \u003d new FilteredList\u003c\u003e(this.orderBook.getOrderList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        filteredReturnOrders \u003d new FilteredList\u003c\u003e(this.returnOrderBook.getReturnOrderList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this(new OrderBook(), new ReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return userPrefs.getOrderBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path getReturnOrderBookFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return userPrefs.getReturnOrderBookFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setOrderBookFilePath(Path orderBookFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(orderBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userPrefs.setOrderBookFilePath(orderBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrderBookFilePath(Path returnOrderBookFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(returnOrderBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userPrefs.setReturnOrderBookFilePath(returnOrderBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d OrderBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setOrderBook(ReadOnlyOrderBook orderBook) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.orderBook.resetData(orderBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReadOnlyOrderBook getOrderBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return orderBook.hasOrder(order);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderBook.removeOrder(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void addOrder(Order order) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderBook.addOrder(order);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderBook.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ReturnOrderBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrderBook(ReadOnlyReturnOrderBook returnOrderBook) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.returnOrderBook.resetData(returnOrderBook);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReadOnlyReturnOrderBook getReturnOrderBook() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return returnOrderBook;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean hasReturnOrder(Order returnOrder) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(returnOrder);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return returnOrderBook.hasReturnOrder(returnOrder);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void deleteReturnOrder(Order target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        returnOrderBook.removeReturnOrder(target);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void addReturnOrder(Order returnOrder) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        returnOrderBook.addReturnOrder(returnOrder);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        updateFilteredReturnOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrder(Order target, Order editedReturnOrder) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireAllNonNull(target, editedReturnOrder);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        returnOrderBook.setReturnOrder(target, editedReturnOrder);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Order List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void deliverOrder(Order target) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        orderBook.deliverOrder(target);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void renewDeliveryStatus(Order target) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        target.setDeliveryStatus(false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        orderBook.setDeliveryStatus(target);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Order} backed by the internal list of"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code versionedOrderBook}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return filteredOrders;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        filteredOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Return Order List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Order} backed by the internal list of"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code versionedReturnOrderBook}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredReturnOrderList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return filteredReturnOrders;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void updateFilteredReturnOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        filteredReturnOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return orderBook.equals(other.orderBook)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 returnOrderBook.equals(other.returnOrderBook)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 filteredOrders.equals(other.filteredOrders)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 filteredReturnOrders.equals(other.filteredReturnOrders);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 86,
      "-": 137,
      "JeremyLoh": 5,
      "Cherweijie": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/OrderBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.UniqueOrderList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Wraps all data at the order-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Duplicates are not allowed (by .isSameOrder comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class OrderBook implements ReadOnlyOrderBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final UniqueOrderList orders;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        orders \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Creates an OrderBook using the Orders in the {@code toBeCopied}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBook(ReadOnlyOrderBook toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Replaces the contents of the order list with {@code orders}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * {@code orders} must not contain duplicate orders."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.orders.setOrders(orders);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Resets the existing data of this {@code OrderBook} with {@code newData}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void resetData(ReadOnlyOrderBook newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        setOrders(newData.getOrderList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    //// order-level operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns true if an order with the same identity as {@code order} exists in the order book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return orders.contains(order);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Adds an order to the order book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * The order must not already exist in the order book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void addOrder(Order p) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        orders.add(p);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Replaces the given order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * {@code target} must exist in the order book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * order book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        orders.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Removes {@code key} from this {@code OrderBook}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * {@code key} must exist in the order book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void removeOrder(Order key) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        orders.remove(key);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void deliverOrder(Order target) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        orders.deliver(target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void setDeliveryStatus(Order target) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        orders.setToBeDelivered(target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return orders.asUnmodifiableObservableList().size() + \" orders\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return orders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                || (other instanceof OrderBook // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \u0026\u0026 orders.equals(((OrderBook) other).orders));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return orders.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 3,
      "JeremyLoh": 108,
      "Cherweijie": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyOrderBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Unmodifiable view of an order book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public interface ReadOnlyOrderBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an unmodifiable view of the orders list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * This list will not contain any duplicate orders."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ObservableList\u003cOrder\u003e getOrderList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "JeremyLoh": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Path getReturnOrderBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Path orderBookFilePath \u003d Paths.get(\"data\", \"DeliveryOrderBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Path returnOrderBookFilePath \u003d Paths.get(\"data\", \"ReturnOrderBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        setOrderBookFilePath(newUserPrefs.getOrderBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        setReturnOrderBookFilePath(newUserPrefs.getReturnOrderBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return orderBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path getReturnOrderBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return returnOrderBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setOrderBookFilePath(Path orderBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(orderBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.orderBookFilePath \u003d orderBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrderBookFilePath(Path returnOrderBookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(returnOrderBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.returnOrderBookFilePath \u003d returnOrderBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 orderBookFilePath.equals(o.orderBookFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 returnOrderBookFilePath.equals((o.returnOrderBookFilePath));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return Objects.hash(guiSettings, orderBookFilePath, returnOrderBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        sb.append(\"\\nDelivery order data file location : \" + orderBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        sb.append(\"\\nReturn order data file location : \" + returnOrderBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 21,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/comment/Comment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.comment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Represents a comment in the order book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidComment(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Comment {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Comment can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public final String commentMade;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Constructs a {@code Comment}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param commentMade A valid comment."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Comment(String commentMade) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(commentMade);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        checkArgument(isValidComment(commentMade), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.commentMade \u003d commentMade;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns true if a given string is a valid comment."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static boolean isValidComment(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                || (other instanceof Comment"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 commentMade.equals(((Comment) other).commentMade));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return commentMade.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return commentMade;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itemtype/TypeOfItem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "package seedu.address.model.itemtype;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " * Represents the type of item in the order book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " * Guarantees: immutable; item is valid as declared in {@link #isValidItemType(String)}}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "public class TypeOfItem {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            \"Type Of Item should be alphanumeric\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public final String itemType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * @param itemType A valid monetary value."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public TypeOfItem(String itemType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        requireNonNull(itemType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        checkArgument(isValidItemType(itemType), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.itemType \u003d itemType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Returns true if a given string is a valid Item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static boolean isValidItemType(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return itemType.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                || (obj instanceof TypeOfItem // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                \u0026\u0026 itemType.equals(((TypeOfItem) obj).itemType)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return itemType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Amoscheong97": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Address.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Represents a Order\u0027s address in the order book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 54,
      "JeremyLoh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/CashOnDelivery.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " * Represents the cash to be earned by courier for this order in the order list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCashValue(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "public class CashOnDelivery {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Must have a $ sign followed by the value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\$\\\\d+(?:.(\\\\d+))?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public final String cashOnDelivery;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Constructs a {@code CashOnDelivery}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * @param cashOnDelivery A valid cash value."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public CashOnDelivery(String cashOnDelivery) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        requireNonNull(cashOnDelivery);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        checkArgument(isValidCashValue(cashOnDelivery), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.cashOnDelivery \u003d cashOnDelivery;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Returns true if a given string is a valid cash value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static boolean isValidCashValue(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return cashOnDelivery;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                || (other instanceof CashOnDelivery // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                \u0026\u0026 cashOnDelivery.equals(((CashOnDelivery) other).cashOnDelivery)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return cashOnDelivery.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Amoscheong97": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Email.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "Cherweijie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/KeywordContainsOrderPrefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khsc96"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_TIMESTAMP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAREHOUSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khsc96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khsc96"
        },
        "content": " * Checks user input contains any of the {@code Prefix}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khsc96"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khsc96"
        },
        "content": "public class KeywordContainsOrderPrefix {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private ArgumentMultimap argumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private boolean hasTid;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private boolean hasName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private boolean hasPhone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private boolean hasAddress;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private boolean hasTimeStamp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private boolean hasWarehouse;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private boolean hasCod;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private boolean hasComment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private boolean hasItemType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    // Empty constructor for OrderContainsKeywordsPredicate constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public KeywordContainsOrderPrefix() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public KeywordContainsOrderPrefix(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.argumentMultimap \u003d argumentMultimap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        checkPrefixExist();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     * Updates the presence of each prefix accordingly to match the user\u0027s input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private void checkPrefixExist() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        hasTid \u003d argumentMultimap.getValue(PREFIX_TID).isPresent();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        hasName \u003d argumentMultimap.getValue(PREFIX_NAME).isPresent();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        hasPhone \u003d argumentMultimap.getValue(PREFIX_PHONE).isPresent();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        hasAddress \u003d argumentMultimap.getValue(PREFIX_ADDRESS).isPresent();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        hasTimeStamp \u003d argumentMultimap.getValue(PREFIX_DELIVERY_TIMESTAMP).isPresent();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        hasWarehouse \u003d argumentMultimap.getValue(PREFIX_WAREHOUSE).isPresent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        hasCod \u003d argumentMultimap.getValue(PREFIX_COD).isPresent();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        hasComment \u003d argumentMultimap.getValue(PREFIX_COMMENT).isPresent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        hasItemType \u003d argumentMultimap.getValue(PREFIX_TYPE).isPresent();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public boolean getHasTid() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return hasTid;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public boolean getHasName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return hasName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public boolean getHasPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return hasPhone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public boolean getHasAddress() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return hasAddress;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public boolean getHasTimeStamp() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return hasTimeStamp;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public boolean getHasWarehouse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return hasWarehouse;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public boolean getHasCod() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return hasCod;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public boolean getHasComment() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return hasComment;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public boolean getHasItemType() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return hasItemType;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void setHasTid(boolean hasTid) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.hasTid \u003d hasTid;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void setHasName(boolean hasName) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.hasName \u003d hasName;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void setHasPhone(boolean hasPhone) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.hasPhone \u003d hasPhone;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void setHasAddress(boolean hasAddress) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.hasAddress \u003d hasAddress;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void setHasTimeStamp(boolean hasTimeStamp) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.hasTimeStamp \u003d hasTimeStamp;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void setHasWarehouse(boolean hasWarehouse) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.hasWarehouse \u003d hasWarehouse;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void setHasCod(boolean hasCod) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.hasCod \u003d hasCod;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void setHasComment(boolean hasComment) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.hasComment \u003d hasComment;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void setHasItemType(boolean hasItemType) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.hasItemType \u003d hasItemType;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khsc96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khsc96": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Order.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a Order in the order book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Order {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private final TransactionId tid;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private final CashOnDelivery cod;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final TimeStamp timestamp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final Warehouse warehouse;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final Comment comment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private final TypeOfItem itemType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private boolean deliveryStatus;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public Order(TransactionId tid, Name name, Phone phone, Email email, Address address, TimeStamp timestamp,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                 Warehouse warehouse, CashOnDelivery cod, Comment comment, TypeOfItem itemType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        requireAllNonNull(tid, name, phone, email, address, timestamp, warehouse, cod, comment, itemType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.tid \u003d tid;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.warehouse \u003d warehouse;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.cod \u003d cod;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.itemType \u003d itemType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        this.deliveryStatus \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public TransactionId getTid() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return tid;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public TimeStamp getTimestamp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return timestamp;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Warehouse getWarehouse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return warehouse;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public CashOnDelivery getCash() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return cod;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Comment getComment() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public TypeOfItem getItemType() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return itemType;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public boolean isDelivered() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return deliveryStatus;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void setDeliveryStatus(boolean status) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        deliveryStatus \u003d status;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns true if both orders of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * This defines a weaker notion of equality between two orders."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean isSameOrder(Order otherOrder) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (otherOrder \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return otherOrder !\u003d null"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                \u0026\u0026 otherOrder.getTid().equals(getTid())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \u0026\u0026 otherOrder.getName().equals(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                \u0026\u0026 otherOrder.getPhone().equals(getPhone());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns true if both orders have the same identity and data fields."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * This defines a stronger notion of equality between two orders."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (!(other instanceof Order)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order otherOrder \u003d (Order) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return otherOrder.getTid().equals(getTid())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                \u0026\u0026 otherOrder.getName().equals(getName())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \u0026\u0026 otherOrder.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                \u0026\u0026 otherOrder.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \u0026\u0026 otherOrder.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 otherOrder.getTimestamp().equals(getTimestamp())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \u0026\u0026 otherOrder.getWarehouse().equals(getWarehouse())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 otherOrder.getComment().equals(getComment())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                \u0026\u0026 otherOrder.getCash().equals(getCash())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                \u0026\u0026 otherOrder.getItemType().equals(getItemType())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                \u0026\u0026 (otherOrder.isDelivered() \u003d\u003d isDelivered());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return Objects.hash(tid, name, phone, email, address, timestamp, warehouse, cod, comment, itemType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .append(\" Transaction ID: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .append(getTid())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .append(\" Delivery Date \u0026 Time: \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .append(getTimestamp())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(\" Warehouse: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(getWarehouse())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .append(\" Cash On Delivery: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .append(getCash())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .append(\" Comment: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .append(getComment())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .append(\" Item Type: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .append(getItemType());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        if (this.isDelivered()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            builder.append(\" Delivery Status: \").append(\"Delivered\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            builder.append(\" Delivery Status: \").append(\"Not Delivered\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 19,
      "-": 74,
      "Amoscheong97": 28,
      "JeremyLoh": 24,
      "Cherweijie": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/OrderContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khsc96"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khsc96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khsc96"
        },
        "content": " * Tests that a {@code Order}\u0027s {@code TransactionId}, {@code Name}, {@code Phone}, {@code Address}, {@code TimeStamp},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khsc96"
        },
        "content": " * {@code Warehouse}, {@code CashOnDeliver}, {@code Comment} and {@code TypeOfItem} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khsc96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khsc96"
        },
        "content": "public class OrderContainsKeywordsPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private final KeywordContainsOrderPrefix keywordContainsOrderPrefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private boolean isGeneralSearch \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public OrderContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public OrderContainsKeywordsPredicate(List\u003cString\u003e keywords,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                                          KeywordContainsOrderPrefix keywordContainsOrderPrefix) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.keywordContainsOrderPrefix \u003d keywordContainsOrderPrefix;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        this.isGeneralSearch \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        if (isGeneralSearch) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                    StringUtil.containsWordIgnoreCase(order.getTid().tid, keyword)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(order.getName().fullName, keyword)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(order.getPhone().value, keyword)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(order.getAddress().value, keyword)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(order.getTimestamp().value, keyword)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(order.getWarehouse().address, keyword)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(order.getComment().commentMade, keyword)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(order.getCash().cashOnDelivery, keyword)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(order.getItemType().itemType, keyword)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            .anyMatch(keyword -\u003e (("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                keywordContainsOrderPrefix.getHasTid()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                    \u0026\u0026 StringUtil.containsWordIgnoreCase(order.getTid().tid, keyword))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                || (keywordContainsOrderPrefix.getHasName()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                    \u0026\u0026 StringUtil.containsWordIgnoreCase(order.getName().fullName, keyword))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                || (keywordContainsOrderPrefix.getHasPhone()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                    \u0026\u0026 StringUtil.containsWordIgnoreCase(order.getPhone().value, keyword))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                || (keywordContainsOrderPrefix.getHasAddress()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                    \u0026\u0026 StringUtil.containsWordIgnoreCase(order.getAddress().value, keyword))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                || (keywordContainsOrderPrefix.getHasTimeStamp()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                    \u0026\u0026 StringUtil.containsWordIgnoreCase(order.getTimestamp().value, keyword))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                || (keywordContainsOrderPrefix.getHasWarehouse()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                    \u0026\u0026 StringUtil.containsWordIgnoreCase(order.getWarehouse().address, keyword))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                || (keywordContainsOrderPrefix.getHasComment()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                    \u0026\u0026 StringUtil.containsWordIgnoreCase(order.getComment().commentMade, keyword))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                || (keywordContainsOrderPrefix.getHasCod()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                    \u0026\u0026 StringUtil.containsWordIgnoreCase(order.getCash().cashOnDelivery, keyword))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                || (keywordContainsOrderPrefix.getHasItemType()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                    \u0026\u0026 StringUtil.containsWordIgnoreCase(order.getItemType().itemType, keyword))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                || (other instanceof OrderContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                \u0026\u0026 keywords.equals(((OrderContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khsc96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khsc96": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Phone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/TimeStamp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Represents a Order\u0027s timeStamp in the order book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTimeStamp(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class TimeStamp {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            \"Timestamp should have a valid date and a valid time, and it should have space in between date and time.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    + \"Furthermore, time is in 24 hours format\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final DateTimeFormatter FORMAT_CHECKER \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public final LocalDateTime timeStamp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Constructs a {@code Timestamp}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param timeStamp A valid date and time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public TimeStamp(String timeStamp) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(timeStamp);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        checkArgument(isValidTimeStamp(timeStamp), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.timeStamp \u003d LocalDateTime.parse(timeStamp, FORMAT_CHECKER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.value \u003d this.timeStamp.format(FORMAT_CHECKER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns true if a given string is a valid date and time."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static boolean isValidTimeStamp(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            LocalDateTime.parse(test, FORMAT_CHECKER.withResolverStyle(ResolverStyle.STRICT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                || (other instanceof TimeStamp // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 value.equals(((TimeStamp) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/TransactionId.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " * Represents an Order\u0027s Transaction ID in the Order List."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTid(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "public class TransactionId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            \"Transaction ID should not be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Check if first character of given input is whitespace."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public final String tid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Constructs an {@code TransactionId}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * @param tid A valid transaction ID."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public TransactionId(String tid) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        requireNonNull(tid);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        checkArgument(isValidTid(tid), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.tid \u003d tid;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Returns true if a given string is a valid transaction ID."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static boolean isValidTid(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return tid.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                || (obj instanceof TransactionId // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                \u0026\u0026 tid.equals(((TransactionId) obj).tid)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return tid;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Amoscheong97": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/UniqueOrderList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * A list of orders that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * An order is considered unique by comparing using {@code Order#isSameOrder(Order)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * orders uses Order#isSameOrder(Order) for equality so as to ensure that the order being added or"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * unique in terms of identity in the UniqueOrderList. However, the removal of an order uses Order#equals"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * (Order) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * as to ensure that the order with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * @see Order#isSameOrder(Order)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class UniqueOrderList implements Iterable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns true if the list contains an equivalent order as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean contains(Order toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameOrder);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Adds an order to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * The order must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void add(Order toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Replaces the order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (!target.isSameOrder(editedOrder) \u0026\u0026 contains(editedOrder)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        internalList.set(index, editedOrder);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Removes the equivalent order from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * The order must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void remove(Order toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrders(UniqueOrderList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Replaces the contents of this list with {@code orders}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * {@code orders} must not contain duplicate orders."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireAllNonNull(orders);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (!ordersAreUnique(orders)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        internalList.setAll(orders);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Marks an order in the list as done."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void deliver(Order toBeDelivered) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        requireNonNull(toBeDelivered);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        toBeDelivered.setDeliveryStatus(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the order\u0027s delivery status to false."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * This prevents order from being mistakenly marked as delivered."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void setToBeDelivered(Order toBeDelivered) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        requireNonNull(toBeDelivered);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        toBeDelivered.setDeliveryStatus(false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public ObservableList\u003cOrder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Iterator\u003cOrder\u003e iterator() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                || (other instanceof UniqueOrderList // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueOrderList) other).internalList));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns true if {@code orders} contains only unique orders."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private boolean ordersAreUnique(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        for (int i \u003d 0; i \u003c orders.size() - 1; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c orders.size(); j++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                if (orders.get(i).isSameOrder(orders.get(j))) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 8,
      "JeremyLoh": 132,
      "Cherweijie": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/UniqueReturnOrderList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateReturnOrderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A list of return orders that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * An order is considered unique by comparing using {@code Order#isSameOrder(Order)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * return orders uses Order#isSameOrder(Order) for equality so as to ensure that the order being added or"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * unique in terms of identity in the UniqueOrderList. However, the removal of an return order uses Order#equals"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * (Order) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * as to ensure that the order with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @see Order#isSameOrder(Order)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class UniqueReturnOrderList implements Iterable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns true if the list contains an equivalent order as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean contains(Order toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameOrder);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Adds an order to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The order must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void add(Order toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DuplicateReturnOrderException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Replaces the order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!target.isSameOrder(editedOrder) \u0026\u0026 contains(editedOrder)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DuplicateReturnOrderException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        internalList.set(index, editedOrder);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Removes the equivalent order from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The return order must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void remove(Order toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrders(UniqueReturnOrderList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Replaces the contents of this list with {@code returnOrders}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code returnOrders} must not contain duplicate return orders."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrders(List\u003cOrder\u003e returnOrders) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireAllNonNull(returnOrders);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!ordersAreUnique(returnOrders)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DuplicateReturnOrderException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        internalList.setAll(returnOrders);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Marks an return order in the list as done."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void deliver(Order toBeDelivered) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(toBeDelivered);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        toBeDelivered.setDeliveryStatus(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the return order\u0027s delivery status to false."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * This prevents order from being mistakenly marked as delivered."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setToBeDelivered(Order toBeDelivered) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(toBeDelivered);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        toBeDelivered.setDeliveryStatus(false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ObservableList\u003cOrder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Iterator\u003cOrder\u003e iterator() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                || (other instanceof UniqueReturnOrderList // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueReturnOrderList) other).internalList));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns true if {@code returnOrders} contains only unique return orders."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private boolean ordersAreUnique(List\u003cOrder\u003e returnOrders) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        for (int i \u003d 0; i \u003c returnOrders.size() - 1; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            for (int j \u003d i + 1; j \u003c returnOrders.size(); j++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                if (returnOrders.get(i).isSameOrder(returnOrders.get(j))) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Warehouse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents warehouse details related to an Order."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Warehouse {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Warehouse details can take any value and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Check if first character of given input is whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public final String address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Constructs an {@code Warehouse}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Warehouse(String address) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return address.hashCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                || (obj instanceof Warehouse // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \u0026\u0026 address.equals(((Warehouse) obj).address)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/DuplicateOrderException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Signals that the operation will result in duplicate Orders (Orders are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class DuplicateOrderException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public DuplicateOrderException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(\"Operation would result in duplicate orders\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 5,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/DuplicateReturnOrderException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Signals that the operation will result in duplicate Return Orders (Orders are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class DuplicateReturnOrderException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public DuplicateReturnOrderException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(\"Operation would result in duplicate return orders\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/OrderNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class OrderNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/returnorder/ReadOnlyReturnOrderBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.returnorder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Unmodifiable view of an order book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public interface ReadOnlyReturnOrderBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns an unmodifiable view of the orders list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * This list will not contain any duplicate orders."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ObservableList\u003cOrder\u003e getReturnOrderList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/returnorder/ReturnOrderBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.returnorder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.UniqueReturnOrderList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Wraps all data at the return-order-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Duplicates are not allowed (by .isSameOrder comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class ReturnOrderBook implements ReadOnlyReturnOrderBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final UniqueReturnOrderList returnOrders;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        returnOrders \u003d new UniqueReturnOrderList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Creates an ReturnOrderBook using the Return Orders in the {@code toBeCopied}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBook(ReadOnlyReturnOrderBook toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Replaces the contents of the return order list with {@code returnOrders}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code returnOrders} must not contain duplicate returnOorders."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.returnOrders.setReturnOrders(orders);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Resets the existing data of this {@code ReturnOrderBook} with {@code newData}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void resetData(ReadOnlyReturnOrderBook newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        setReturnOrders(newData.getReturnOrderList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //// return order-level operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns true if an return return order with the same identity as {@code returnOrder} exists in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * the return order book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean hasReturnOrder(Order returnOrder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(returnOrder);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return returnOrders.contains(returnOrder);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Adds an return order to the return order book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The return order must not already exist in the return order book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void addReturnOrder(Order p) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        returnOrders.add(p);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Replaces the given return return order {@code target} in the list with {@code editedReturnOrder}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code target} must exist in the return order book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The order identity of {@code editedReturnOrder} must not be the same as another existing return order in the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * return order book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrder(Order target, Order editedReturnOrder) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(editedReturnOrder);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        returnOrders.setReturnOrder(target, editedReturnOrder);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Removes {@code key} from this {@code ReturnOrderBook}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * {@code key} must exist in the return order book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void removeReturnOrder(Order key) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        returnOrders.remove(key);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void deliverReturnOrder(Order target) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        returnOrders.deliver(target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setDeliveryStatus(Order target) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        returnOrders.setToBeDelivered(target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return returnOrders.asUnmodifiableObservableList().size() + \" return orders\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ObservableList\u003cOrder\u003e getReturnOrderList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return returnOrders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                || (other instanceof ReturnOrderBook // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u0026\u0026 returnOrders.equals(((ReturnOrderBook) other).returnOrders));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return returnOrders.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Contains utility methods for populating {@code OrderBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    //getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static Order[] getSampleOrders() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return new Order[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            new Order(new TransactionId(\"B93838282\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Name(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Address(\"123, Jurong West Ave 6, #08-111 S649520\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new CashOnDelivery(\"$4.10\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    new TypeOfItem(\"Glass\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            new Order(new TransactionId(\"A11111111\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Name(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Address(\"311, Clementi Ave 2, #02-25 S120363\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new CashOnDelivery(\"$4.20\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    new TypeOfItem(\"Glass\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            new Order(new TransactionId(\"A4937272\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Address(\"Telok Blangah Heights, #01-22 S100058\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new CashOnDelivery(\"$4.30\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    new TypeOfItem(\"Porcelain\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            new Order(new TransactionId(\"A000000\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Name(\"David Li\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43 S550101\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new CashOnDelivery(\"$6\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    new TypeOfItem(\"Plastic\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            new Order(new TransactionId(\"A99999\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Name(\"Irfan Ibrahim\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35 S506901\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new CashOnDelivery(\"$1\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    new TypeOfItem(\"Metal\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            new Order(new TransactionId(\"C8493929292\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Name(\"Roy Balakrishnan\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31 S380095\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new CashOnDelivery(\"$10\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    new TypeOfItem(\"Fabric\"))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static Order[] getSampleReturnOrders() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new Order[] {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            new Order(new TransactionId(\"B93838282\"), new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"), new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new CashOnDelivery(\"$4.10\"), new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TypeOfItem(\"Glass\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            new Order(new TransactionId(\"A11111111\"), new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"), new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new CashOnDelivery(\"$4.20\"), new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TypeOfItem(\"Glass\")),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            new Order(new TransactionId(\"A4937272\"), new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"), new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new CashOnDelivery(\"$4.30\"), new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TypeOfItem(\"Porcelain\")),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            new Order(new TransactionId(\"A000000\"), new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"), new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new CashOnDelivery(\"$6\"), new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TypeOfItem(\"Plastic\")),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            new Order(new TransactionId(\"A99999\"), new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"), new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new CashOnDelivery(\"$1\"), new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TypeOfItem(\"Metal\")),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            new Order(new TransactionId(\"C8493929292\"), new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new Email(\"asdbc@gmail.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TimeStamp(\"2019-02-20 1500\"), new Warehouse(\"5 Toh Guan Rd E, S608831\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new CashOnDelivery(\"$10\"), new Comment(\"NIL\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    new TypeOfItem(\"Fabric\"))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        };"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static ReadOnlyOrderBook getSampleOrderBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        OrderBook sampleOb \u003d new OrderBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        for (Order sampleOrder : getSampleOrders()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            sampleOb.addOrder(sampleOrder);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return sampleOb;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static ReadOnlyReturnOrderBook getSampleReturnOrderBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBook sampleRob \u003d new ReturnOrderBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        for (Order sampleOrder : getSampleReturnOrders()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            sampleRob.addReturnOrder(sampleOrder);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return sampleRob;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 45,
      "-": 15,
      "Amoscheong97": 13,
      "JeremyLoh": 66,
      "Cherweijie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedOrder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Jackson-friendly version of {@link Order}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "class JsonAdaptedOrder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private final String tid;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String timeStamp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final String warehouse;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private final String cod;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String comment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private final String itemType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private final boolean deliveryStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Constructs a {@code JsonAdaptedOrder} with the given order details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public JsonAdaptedOrder(@JsonProperty(\"tid\") String tid, @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                            @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                            @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                            @JsonProperty(\"timestamp\") String timeStamp,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                            @JsonProperty(\"warehouse\") String warehouse, @JsonProperty(\"cashOnDelivery\") String cod,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                            @JsonProperty(\"comment\") String comment,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                            @JsonProperty(\"itemType\") String itemType,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                            @JsonProperty(\"deliveryStatus\") boolean deliveryStatus) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.tid \u003d tid;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.timeStamp \u003d timeStamp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.warehouse \u003d warehouse;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.cod \u003d cod;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.itemType \u003d itemType;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        this.deliveryStatus \u003d deliveryStatus;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Converts a given {@code Order} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public JsonAdaptedOrder(Order source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        tid \u003d source.getTid().tid;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        timeStamp \u003d source.getTimestamp().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        warehouse \u003d source.getWarehouse().address;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        cod \u003d source.getCash().cashOnDelivery;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        comment \u003d source.getComment().commentMade;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        itemType \u003d source.getItemType().itemType;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        deliveryStatus \u003d source.isDelivered();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Converts this Jackson-friendly adapted order object into the model\u0027s {@code Order} object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Order toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (tid \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    TransactionId.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (!TransactionId.isValidTid(tid)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            throw new IllegalValueException(TransactionId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        final TransactionId modelTid \u003d new TransactionId(tid);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (timeStamp \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    TimeStamp.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!TimeStamp.isValidTimeStamp(timeStamp)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(TimeStamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final TimeStamp modelTimeStamp \u003d new TimeStamp(timeStamp);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (warehouse \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    Warehouse.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (!Warehouse.isValidAddress(warehouse)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new IllegalValueException(Warehouse.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        final Warehouse modelWarehouse \u003d new Warehouse(warehouse);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (cod \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                    CashOnDelivery.class.getSimpleName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (!CashOnDelivery.isValidCashValue(cod)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            throw new IllegalValueException(CashOnDelivery.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        final CashOnDelivery modelCash \u003d new CashOnDelivery(cod);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final Comment modelComment;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (comment \u003d\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            modelComment \u003d new Comment(\"NIL\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (!Comment.isValidComment(comment)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new IllegalValueException(Comment.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            modelComment \u003d new Comment(comment);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        final TypeOfItem modelItem;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (itemType \u003d\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            modelItem \u003d new TypeOfItem(\"NIL\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            if (!TypeOfItem.isValidItemType(itemType)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                throw new IllegalValueException(TypeOfItem.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            modelItem \u003d new TypeOfItem(itemType);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order finalOrder \u003d new Order(modelTid, modelName, modelPhone, modelEmail, modelAddress, modelTimeStamp,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                modelWarehouse, modelCash, modelComment, modelItem);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        finalOrder.setDeliveryStatus(deliveryStatus);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return finalOrder;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 33,
      "-": 60,
      "Amoscheong97": 44,
      "JeremyLoh": 20,
      "Cherweijie": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedReturnOrder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Jackson-friendly version of {@link Order}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "class JsonAdaptedReturnOrder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String tid;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String timeStamp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String warehouse;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String cod;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String comment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String itemType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final boolean deliveryStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Constructs a {@code JsonAdaptedReturnOrder} with the given return order details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public JsonAdaptedReturnOrder(@JsonProperty(\"tid\") String tid, @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                                  @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                                  @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                                  @JsonProperty(\"timestamp\") String timeStamp,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                                  @JsonProperty(\"warehouse\") String warehouse,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                                  @JsonProperty(\"cashOnDelivery\") String cod,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                                  @JsonProperty(\"comment\") String comment,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                                  @JsonProperty(\"itemType\") String itemType,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                                  @JsonProperty(\"deliveryStatus\") boolean deliveryStatus) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.tid \u003d tid;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.timeStamp \u003d timeStamp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.warehouse \u003d warehouse;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.cod \u003d cod;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.itemType \u003d itemType;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.deliveryStatus \u003d deliveryStatus;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Converts a given {@code Order} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public JsonAdaptedReturnOrder(Order source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        tid \u003d source.getTid().tid;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        timeStamp \u003d source.getTimestamp().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        warehouse \u003d source.getWarehouse().address;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        cod \u003d source.getCash().cashOnDelivery;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        comment \u003d source.getComment().commentMade;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        itemType \u003d source.getItemType().itemType;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        deliveryStatus \u003d source.isDelivered();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Converts this Jackson-friendly adapted order object into the model\u0027s {@code Order} object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Order toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (tid \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    TransactionId.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!TransactionId.isValidTid(tid)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(TransactionId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final TransactionId modelTid \u003d new TransactionId(tid);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (timeStamp \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    TimeStamp.class.getSimpleName()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!TimeStamp.isValidTimeStamp(timeStamp)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(TimeStamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final TimeStamp modelTimeStamp \u003d new TimeStamp(timeStamp);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (warehouse \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    Warehouse.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!Warehouse.isValidAddress(warehouse)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(Warehouse.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final Warehouse modelWarehouse \u003d new Warehouse(warehouse);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (cod \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    CashOnDelivery.class.getSimpleName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!CashOnDelivery.isValidCashValue(cod)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalValueException(CashOnDelivery.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final CashOnDelivery modelCash \u003d new CashOnDelivery(cod);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final Comment modelComment;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (comment \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            modelComment \u003d new Comment(\"NIL\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (!Comment.isValidComment(comment)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new IllegalValueException(Comment.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            modelComment \u003d new Comment(comment);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final TypeOfItem modelItem;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (itemType \u003d\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            modelItem \u003d new TypeOfItem(\"NIL\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (!TypeOfItem.isValidItemType(itemType)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new IllegalValueException(TypeOfItem.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            modelItem \u003d new TypeOfItem(itemType);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order finalOrder \u003d new Order(modelTid, modelName, modelPhone, modelEmail, modelAddress, modelTimeStamp,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                modelWarehouse, modelCash, modelComment, modelItem);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        finalOrder.setDeliveryStatus(deliveryStatus);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return finalOrder;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonOrderBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A class to access OrderBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class JsonOrderBookStorage implements OrderBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonOrderBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public JsonOrderBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return readOrderBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Similar to {@link #readOrderBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Optional\u003cJsonSerializableDeliveryOrderBook\u003e jsonOrderBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                filePath, JsonSerializableDeliveryOrderBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (jsonOrderBook.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return Optional.of(jsonOrderBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        saveOrderBook(orderBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Similar to {@link #saveOrderBook(ReadOnlyOrderBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(orderBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableDeliveryOrderBook(orderBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 19,
      "-": 59,
      "JeremyLoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonReturnOrderBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A class to access ReturnOrderBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class JsonReturnOrderBookStorage implements ReturnOrderBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonReturnOrderBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public JsonReturnOrderBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path getReturnOrderBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Optional\u003cReadOnlyReturnOrderBook\u003e readReturnOrderBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return readReturnOrderBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Similar to {@link #readReturnOrderBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Optional\u003cReadOnlyReturnOrderBook\u003e readReturnOrderBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Optional\u003cJsonSerializableReturnOrderBook\u003e jsonReturnOrderBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                filePath, JsonSerializableReturnOrderBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (jsonReturnOrderBook.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return Optional.of(jsonReturnOrderBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveReturnOrderBook(ReadOnlyReturnOrderBook returnOrderBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        saveReturnOrderBook(returnOrderBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Similar to {@link #saveReturnOrderBook(ReadOnlyReturnOrderBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveReturnOrderBook(ReadOnlyReturnOrderBook returnOrderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(returnOrderBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableReturnOrderBook(returnOrderBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableDeliveryOrderBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * An Immutable OrderBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "@JsonRootName(value \u003d \"DeliveryOrderBook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "class JsonSerializableDeliveryOrderBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"Delivery order list contains duplicate order(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final List\u003cJsonAdaptedOrder\u003e orders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Constructs a {@code JsonSerializableOrderBook} with the given orders."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public JsonSerializableDeliveryOrderBook(@JsonProperty(\"orders\") List\u003cJsonAdaptedOrder\u003e orders) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.orders.addAll(orders);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Converts a given {@code ReadOnlyOrderBook} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableOrderBook}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public JsonSerializableDeliveryOrderBook(ReadOnlyOrderBook source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orders.addAll(source.getOrderList().stream().map(JsonAdaptedOrder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Converts this order book into the model\u0027s {@code OrderBook} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public OrderBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        OrderBook orderBook \u003d new OrderBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        for (JsonAdaptedOrder jsonAdaptedOrder : orders) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            Order order \u003d jsonAdaptedOrder.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (orderBook.hasOrder(order)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            orderBook.addOrder(order);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableReturnOrderBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * An Immutable OrderBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "@JsonRootName(value \u003d \"ReturnOrderBook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "class JsonSerializableReturnOrderBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RETURN_ORDER \u003d \"Return order list contains duplicate return order(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final List\u003cJsonAdaptedReturnOrder\u003e returnOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Constructs a {@code JsonSerializableOrderBook} with the given orders."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public JsonSerializableReturnOrderBook(@JsonProperty(\"returnOrders\") List\u003cJsonAdaptedReturnOrder\u003e returnOrders) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.returnOrders.addAll(returnOrders);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Converts a given {@code ReadOnlyReturnOrderBook} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableReturnOrderBook}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public JsonSerializableReturnOrderBook(ReadOnlyReturnOrderBook source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        returnOrders.addAll(source.getReturnOrderList().stream().map(JsonAdaptedReturnOrder::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Converts this return order book into the model\u0027s {@code ReturnOrderBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBook returnOrderBook \u003d new ReturnOrderBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        for (JsonAdaptedReturnOrder jsonAdaptedReturnOrder : returnOrders) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            Order order \u003d jsonAdaptedReturnOrder.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (returnOrderBook.hasReturnOrder(order)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RETURN_ORDER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            returnOrderBook.addReturnOrder(order);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return returnOrderBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/OrderBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a storage for {@link OrderBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public interface OrderBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order Book methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns OrderBook data as a {@link ReadOnlyOrderBook}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @see #getOrderBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Optional\u003cReadOnlyOrderBook\u003e readOrderBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Saves the given {@link ReadOnlyOrderBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param orderBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @see #saveOrderBook(ReadOnlyOrderBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void saveOrderBook(ReadOnlyOrderBook orderBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 11,
      "-": 31,
      "JeremyLoh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ReturnOrderBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Represents a storage for {@link ReturnOrderBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public interface ReturnOrderBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Return Order Book methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Path getReturnOrderBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns returnOrderBook data as a {@link ReadOnlyReturnOrderBook}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Optional\u003cReadOnlyReturnOrderBook\u003e readReturnOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @see #getReturnOrderBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Optional\u003cReadOnlyReturnOrderBook\u003e readReturnOrderBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Saves the given {@link ReadOnlyReturnOrderBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param returnOrderBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void saveReturnOrderBook(ReadOnlyReturnOrderBook returnOrderBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @see #saveReturnOrderBook(ReadOnlyReturnOrderBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void saveReturnOrderBook(ReadOnlyReturnOrderBook returnOrderBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public interface Storage extends OrderBookStorage, ReturnOrderBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order Book methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Return Order Book methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Path getReturnOrderBookFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    Optional\u003cReadOnlyReturnOrderBook\u003e readReturnOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    void saveReturnOrderBook(ReadOnlyReturnOrderBook returnOrderBook) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 14,
      "-": 30,
      "JeremyLoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Manages storage of OrderBook and ReturnOrderBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private OrderBookStorage orderBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private ReturnOrderBookStorage returnOrderBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public StorageManager(OrderBookStorage orderBookStorage, ReturnOrderBookStorage returnOrderBookStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.orderBookStorage \u003d orderBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.returnOrderBookStorage \u003d returnOrderBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d OrderBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return orderBookStorage.getOrderBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return readOrderBook(orderBookStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return orderBookStorage.readOrderBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        saveOrderBook(orderBook, orderBookStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderBookStorage.saveOrderBook(orderBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ReturnOrderBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path getReturnOrderBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return returnOrderBookStorage.getReturnOrderBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Optional\u003cReadOnlyReturnOrderBook\u003e readReturnOrderBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return readReturnOrderBook(returnOrderBookStorage.getReturnOrderBookFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Optional\u003cReadOnlyReturnOrderBook\u003e readReturnOrderBook(Path filePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return returnOrderBookStorage.readReturnOrderBook(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveReturnOrderBook(ReadOnlyReturnOrderBook returnOrderBook) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        saveReturnOrderBook(returnOrderBook, returnOrderBookStorage.getReturnOrderBookFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveReturnOrderBook(ReadOnlyReturnOrderBook returnOrderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        returnOrderBookStorage.saveReturnOrderBook(returnOrderBook, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 47,
      "-": 63,
      "JeremyLoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClearWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Controller for a clear warning page"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class ClearWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String WARNING_MESSAGE \u003d \"Are you sure you want to clear the order book list ?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ClearWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String FXML \u003d \"ClearWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Button yesButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Button noButton;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Label warningMessage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Creates a new ClearWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param root Stage to use as the root of the ClearWindow."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ClearWindow(Stage root) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        warningMessage.setText(WARNING_MESSAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Creates a new ClearWindow."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ClearWindow(Logic logic) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Show the Clear Window Stage in the centre of the Screen."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        logger.fine(\"Showing warning message to the user for clearing the order book list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns true if the clear window is currently being shown."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Hides the clear window."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Focuses on the clear window."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setComponent(ResultDisplay resultDisplay) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.resultDisplay \u003d resultDisplay;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * User press Yes for clearing the order book list. Clear the whole order book list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * and display success message to user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void agreeToClearOrderBookList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String commandText \u003d \"clear -f\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        hide();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * User press No for clearing the order book list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void disagreeToClearOrderBookList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        resultDisplay.setFeedbackToUser(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        hide();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": " * Controller for Delino\u0027s help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://bit.ly/38Y296W\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Delino supports insert, clear, delete, done, edit, exit, search, help,\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \" import, list, return, nearby and undo commands.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"Each feature will require a different set of input prefixes. The examples below will better\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \" illustrate the usage of the aforementioned commands in Delino.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 1. Insert a new order to the list of orders based on their order attributes\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"       Eg. insert tid/9876543210 n/John Doe a/Blk 572 Hougang st 51 #10-33 S530572\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \" p/98766789 dts/2020-02-20 1300 w/Yishun cod/$4 \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 2. Clear all orders while orders are listed\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"       Eg. clear (prompts user for confirmation) OR clear -f (force delete) \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 3. Delete a specified order from the current list of orders\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"       Eg. delete 2 (Removes the second order in the list) \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 4. Marks a specified order as completed\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"       Eg. done 3 (The third order in the list will be marked as completed) \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 5. Edit an order\u0027s specified attribute\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"       Eg. edit 2 n/James Charles (Edit the customer name in the second order to \u0027James Charles\u0027) \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 6. Exit the Delino application\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"       Eg. exit OR you may choose to press \u0027F1\u0027 to close the application \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 7. Search for an order based on either the order\u0027s Customer Name or the order\u0027s Transaction ID\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"       Eg. search -n Amos or find -t A195BCD2S \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 8. Provide more information about Delino and its commands\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"       Eg. help OR you may choose to press \u0027F2\u0027 \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 9. Import a list of orders from a given .csv file with the order data format\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"       Eg. import customers_20_02_2020.csv \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"      Please refer to the User Guide for more information regarding the order data format. \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 10. Display the default list of orders or a list based on specified status\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"         Eg. list OR list done OR list undone \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 11. Create a return order and adds it into the list of returns\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"         Eg. return tid/ac17s2a n/Bobby Tan a/123 Delta Road #03-333, Singapore 123456\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \" p/91230456 rts/12-12-2020 1300 w/Jurong Warehouse c/NIL type/glass \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 12. View orders at a specified Singapore postal sector \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"(i.e. the first two digits of the postal code)\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"         Eg. nearby 14 (View all orders located in the general location of Queenstown \u0026 Tiong Bahru)\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"        Please refer to the User Guide for the respective postal sectors in Singapore. \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n 13. Undo the previous action\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"         Eg. After calling \u0027list, delete 1, delete 2\u0027, calling \u0027undo\u0027 will reverse the deletion of\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \" the second item of the list \\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            + \"\\n For more information, please refer to Delino\u0027s User Guide.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 99,
      "Cherweijie": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private OrderListPanel orderListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private ClearWindow clearWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private MenuItem exitAppItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private StackPane orderListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label allOrdersLabel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label todayOrdersLabel;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label completedLabel;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label urgentLabel;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label warehouseLabel;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label returnLabel;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label earningLabel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label importLabel;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label settingLabel;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        clearWindow \u003d new ClearWindow(logic);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        setAccelerator(exitAppItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F2\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderListPanel \u003d new OrderListPanel(logic.getFilteredOrderList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderListPanelPlaceholder.getChildren().add(orderListPanel.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getOrderBookFilePath());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Opens the clear warning window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void handleClearWarning() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!clearWindow.isShowing()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            clearWindow.show();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            clearWindow.focus();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        clearWindow.hide();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public OrderListPanel getOrderListPanel() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return orderListPanel;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (commandResult.isClearList()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                handleClearWarning();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                clearWindow.setComponent(resultDisplay);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 27,
      "-": 187,
      "JeremyLoh": 29,
      "khsc96": 2,
      "Cherweijie": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * An UI component that displays information of a {@code Order}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class OrderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String FXML \u003d \"OrderListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public final Order order;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private Label tid;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label warehouse;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private Label cashOnDelivery;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Label comment;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Label timeStamp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private Label deliveryStatus;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private FlowPane itemType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public OrderCard(Order order, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        tid.setText(order.getTid().tid);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        name.setText(order.getName().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        phone.setText(order.getPhone().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        address.setText(order.getAddress().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        timeStamp.setText(order.getTimestamp().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        warehouse.setText(order.getWarehouse().address);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        comment.setText(order.getComment().commentMade);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        cashOnDelivery.setText(order.getCash().cashOnDelivery);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        if (!(order.getItemType().itemType).equals(\"NIL\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            itemType.getChildren().add(new Label(order.getItemType().itemType));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        if ((order.isDelivered())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            deliveryStatus.setText(\"Delivered\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            deliveryStatus.setText(\"Not Delivered\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!(other instanceof OrderCard)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        OrderCard card \u003d (OrderCard) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \u0026\u0026 order.equals(card.order);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 12,
      "-": 52,
      "Amoscheong97": 10,
      "JeremyLoh": 10,
      "Cherweijie": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class OrderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String FXML \u003d \"OrderListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OrderListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private ListView\u003cOrder\u003e orderListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public OrderListPanel(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderListView.setItems(orderList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderListView.setCellFactory(listView -\u003e new OrderListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Order} using a {@code OrderCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    class OrderListViewCell extends ListCell\u003cOrder\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        protected void updateItem(Order order, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            super.updateItem(order, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            if (empty || order \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                setGraphic(new OrderCard(order, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 11,
      "-": 32,
      "JeremyLoh": 3
    }
  },
  {
    "path": "src/main/resources/view/ClearWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Warning\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        \u003cImage url\u003d\"@/images/warning_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    \u003cLabel fx:id\u003d\"warningMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    \u003cButton fx:id\u003d\"yesButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#agreeToClearOrderBookList\" text\u003d\"Yes\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    \u003cButton fx:id\u003d\"noButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#disagreeToClearOrderBookList\" text\u003d\"No\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 44
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help Window for Delino\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    \u003cScene fill\u003d\"#4d4a4a\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "         \u003cHBox alignment\u003d\"BOTTOM_RIGHT\" style\u003d\"-fx-background-color: #4D4A4A;\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" alignment\u003d\"TOP_CENTER\" text\u003d\"Label\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                     \u003cFont name\u003d\"Roboto Regular\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" accessibleRole\u003d\"HYPERLINK\" alignment\u003d\"BOTTOM_RIGHT\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy Delino User Guide Link\" textAlignment\u003d\"CENTER\" textFill\u003d\"#4d4a4a\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                     \u003cInsets /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                     \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                     \u003cFont name\u003d\"Roboto Regular\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "Cherweijie": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Delino\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "           \u003cMenuBar fx:id\u003d\"menuBar\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khsc96"
        },
        "content": "               \u003cMenuItem fx:id\u003d\"exitAppItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "           \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "               \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                     \u003cVBox id\u003d\"menuLabels\" prefHeight\u003d\"200.0\" prefWidth\u003d\"120.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                           \u003cLabel fx:id\u003d\"allOrdersLabel\" text\u003d\"All Orders\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                                  prefWidth\u003d\"120.0\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                           \u003cLabel fx:id\u003d\"todayOrdersLabel\" text\u003d\"Today\u0027s Orders\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                                  prefWidth\u003d\"120.0\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                           \u003cLabel fx:id\u003d\"completedLabel\" text\u003d\"Completed\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                                  prefWidth\u003d\"120.0\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                           \u003cLabel fx:id\u003d\"urgentLabel\" text\u003d\"Urgent\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"120.0\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                           \u003cLabel fx:id\u003d\"warehouseLabel\" text\u003d\"Warehouse\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                                  prefWidth\u003d\"120.0\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                           \u003cLabel fx:id\u003d\"returnLabel\" text\u003d\"Returns\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"120.0\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                           \u003cLabel fx:id\u003d\"earningLabel\" text\u003d\"Earnings\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                                  prefWidth\u003d\"120.0\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                           \u003cLabel fx:id\u003d\"importLabel\" text\u003d\"Import\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"120.0\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                           \u003cLabel fx:id\u003d\"settingLabel\" text\u003d\"Settings\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                                  prefWidth\u003d\"120.0\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                     \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                     \u003cSeparator orientation\u003d\"VERTICAL\" prefHeight\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                  \u003cVBox id\u003d\"userActivityBox\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    \u003cVBox fx:id\u003d\"orderList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"orderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 46,
      "JeremyLoh": 35,
      "khsc96": 1,
      "Cherweijie": 6
    }
  },
  {
    "path": "src/main/resources/view/OrderListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        \u003cLabel fx:id\u003d\"tid\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$tid\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"itemType\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "      \u003cLabel fx:id\u003d\"timeStamp\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeStamp\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "      \u003cLabel fx:id\u003d\"warehouse\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$warehouse\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "      \u003cLabel fx:id\u003d\"cashOnDelivery\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cod\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "      \u003cLabel fx:id\u003d\"comment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$comment\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "      \u003cLabel fx:id\u003d\"deliveryStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deliveryStatus\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 2,
      "-": 22,
      "Amoscheong97": 10,
      "JeremyLoh": 1,
      "Cherweijie": 1
    }
  },
  {
    "path": "src/main/resources/view/OrderListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "  \u003cListView fx:id\u003d\"orderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COD_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_TIMESTAMP_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TID_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WAREHOUSE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.logic.commands.InsertCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.storage.JsonOrderBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.storage.JsonReturnOrderBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonOrderBookStorage orderBookStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new JsonOrderBookStorage(temporaryFolder.resolve(\"DeliveryOrderBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonReturnOrderBookStorage returnOrderBookStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new JsonReturnOrderBookStorage(temporaryFolder.resolve(\"ReturnOrderBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        StorageManager storage \u003d new StorageManager(orderBookStorage, returnOrderBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void getOrderBook_returnCorrectOrderBook_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new OrderBook(), logic.getOrderBook());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new ReturnOrderBook(), logic.getReturnOrderBook());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void getOrderBookPath_returnDeliveryOrderBookPath_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new UserPrefs().getOrderBookFilePath(), logic.getOrderBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void getReturnOrderBookPath_returnReturnOrderBookPath_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new UserPrefs().getReturnOrderBookFilePath(), logic.getReturnOrderBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonOrderBookStorage deliveryOrderBookStorage \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new JsonOrderBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionDeliveryOrderBook.json\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonReturnOrderBookStorage returnOrderBookStorage \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new JsonReturnOrderBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionReturnOrderBook.json\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        StorageManager storage \u003d new StorageManager(deliveryOrderBookStorage, returnOrderBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        String addCommand \u003d InsertCommand.COMMAND_WORD + TID_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + ADDRESS_DESC_AMY + DELIVERY_TIMESTAMP_DESC_AMY + WAREHOUSE_DESC_AMY + COD_DESC_AMY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        Order expectedOrder \u003d new OrderBuilder(AMY).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel.addOrder(expectedOrder);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void getFilteredOrderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredOrderList().remove(0));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void getFilteredReturnOrderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredReturnOrderList().remove(0));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static class JsonOrderBookIoExceptionThrowingStub extends JsonOrderBookStorage {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        private JsonOrderBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void saveOrderBook(ReadOnlyOrderBook orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static class JsonReturnOrderBookIoExceptionThrowingStub extends JsonReturnOrderBookStorage {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        private JsonReturnOrderBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void saveReturnOrderBook(ReadOnlyReturnOrderBook orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 46,
      "-": 147,
      "Amoscheong97": 9,
      "JeremyLoh": 8,
      "Cherweijie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.ClearCommand.MESSAGE_ENQUIRY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_FORCE_CLEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalReturnOrderBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void executeForceClear_emptyOrderBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertCommandSuccess(new ClearCommand(FLAG_FORCE_CLEAR.toString()), model, ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void executeWithoutForceClear_replyEnquiryMessage_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertCommandSuccess(new ClearCommand(null), model, new CommandResult(MESSAGE_ENQUIRY, false, false, true),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute_nonEmptyOrderBook_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalOrderBook(), getTypicalReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel.setOrderBook(new OrderBook());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertCommandSuccess(new ClearCommand(FLAG_FORCE_CLEAR.toString()), model, ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 17,
      "-": 26,
      "JeremyLoh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // different clear value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void initOnlyWithFeedback_isExitResult_returnFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(commandResult.isExit());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void initOnlyWithFeedback_isShowHelpResult_returnFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void initOnlyWithFeedback_isClearListResult_returnFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(commandResult.isClearList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // different clear value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 30,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_TIMESTAMP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAREHOUSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.model.order.OrderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.testutil.DoneOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.EditOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String VALID_TID_AMY \u003d \"A123456789\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String VALID_TID_BOB \u003d \"B123456789\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String VALID_TIMESTAMP_AMY \u003d \"2020-01-13 2200\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String VALID_TIMESTAMP_BOB \u003d \"2019-12-02 1500\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String VALID_WAREHOUSE_AMY \u003d \"5 Toh Guan Rd E, #02-30 S608831\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String VALID_WAREHOUSE_BOB \u003d \"5 Jurong East Rd, #02-30 S608831\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String VALID_COD_AMY \u003d \"$4\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String VALID_COD_BOB \u003d \"$4.10\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String VALID_COMMENT_NIL \u003d \"NIL\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String VALID_COMMENT_INSTRUCTION \u003d \"Leave the parcel at the riser\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String VALID_TYPE_GLASS \u003d \"glass\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String VALID_TYPE_PLASTIC \u003d \"plastic\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String TID_DESC_AMY \u003d \" \" + PREFIX_TID + VALID_TID_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String TID_DESC_BOB \u003d \" \" + PREFIX_TID + VALID_TID_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DELIVERY_TIMESTAMP_DESC_AMY \u003d \" \" + PREFIX_DELIVERY_TIMESTAMP + VALID_TIMESTAMP_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DELIVERY_TIMESTAMP_DESC_BOB \u003d \" \" + PREFIX_DELIVERY_TIMESTAMP + VALID_TIMESTAMP_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String WAREHOUSE_DESC_AMY \u003d \" \" + PREFIX_WAREHOUSE + VALID_WAREHOUSE_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String WAREHOUSE_DESC_BOB \u003d \" \" + PREFIX_WAREHOUSE + VALID_WAREHOUSE_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String COD_DESC_AMY \u003d \" \" + PREFIX_COD + VALID_COD_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String COD_DESC_BOB \u003d \" \" + PREFIX_COD + VALID_COD_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String COMMENT_DESC_NIL \u003d \" \" + PREFIX_COMMENT + VALID_COMMENT_NIL;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String COMMENT_DESC_INSTRUCTION \u003d \" \" + PREFIX_COMMENT + VALID_COMMENT_INSTRUCTION;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String TYPE_DESC_GLASS \u003d \" \" + PREFIX_TYPE + VALID_TYPE_GLASS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String TYPE_DESC_PLASTIC \u003d \" \" + PREFIX_TYPE + VALID_TYPE_PLASTIC;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String INVALID_TID_DESC \u003d \" \" + PREFIX_TID + \"\"; // empty strings not allowed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    // Required valid date and time, date or time only will not be accepted for timestamp"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    // Date only"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String INVALID_DELIVERY_TIMESTAMP_DATE_ONLY \u003d \" \" + PREFIX_DELIVERY_TIMESTAMP + \"2019-10-02\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    // Time only"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String INVALID_DELIVERY_TIMESTAMP_TIME_ONLY \u003d \" \" + PREFIX_DELIVERY_TIMESTAMP + \"2315\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    // Invalid Date - 2019 is not a leap year"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String INVALID_DELIVERY_TIMESTAMP_DATE \u003d \" \" + PREFIX_DELIVERY_TIMESTAMP + \"2019-02-32 1500\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    // Invalid Time"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String INVALID_DELIVERY_TIMESTAMP_TIME \u003d \" \" + PREFIX_DELIVERY_TIMESTAMP + \"2019-10-02 2401\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String INVALID_WAREHOUSE_DESC \u003d \" \" + PREFIX_WAREHOUSE + \"\"; // empty string not allowed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String INVALID_COD_DESC \u003d \" \" + PREFIX_COD + \"3\"; // empty \u0027$\u0027 not allowed"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String INVALID_COMMENT_DESC \u003d \" \" + PREFIX_COMMENT; // empty string not allowed for comment"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d \" \" + PREFIX_TYPE + \"drinks*\"; // \u0027*\u0027 not allowed in itemType"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final EditCommand.EditOrderDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final EditCommand.EditOrderDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final DoneCommand.DoneOrderDescriptor AMY_DESC;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final DoneCommand.DoneOrderDescriptor BOB_DESC;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        DESC_AMY \u003d new EditOrderDescriptorBuilder().withTid(VALID_TID_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .withTimeStamp(VALID_TIMESTAMP_AMY).withWarehouse(VALID_WAREHOUSE_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withCash(VALID_COD_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .withComment(VALID_COMMENT_INSTRUCTION)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withItemType(VALID_TYPE_GLASS).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        DESC_BOB \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withTid(VALID_TID_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withTimeStamp(VALID_TIMESTAMP_AMY).withWarehouse(VALID_WAREHOUSE_BOB)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withCash(VALID_COD_BOB)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .withComment(VALID_COMMENT_INSTRUCTION)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        AMY_DESC \u003d new DoneOrderDescriptorBuilder().withTid(VALID_TID_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withTimeStamp(VALID_TIMESTAMP_AMY).withWarehouse(VALID_WAREHOUSE_AMY)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withCash(VALID_COD_AMY)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withComment(VALID_COMMENT_INSTRUCTION)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withItemType(VALID_TYPE_GLASS).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        BOB_DESC \u003d new DoneOrderDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withTid(VALID_TID_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withTimeStamp(VALID_TIMESTAMP_AMY).withWarehouse(VALID_WAREHOUSE_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withCash(VALID_COD_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withComment(VALID_COMMENT_INSTRUCTION)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                .withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * - the order book, filtered order list and selected order in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        OrderBook expectedAddressBook \u003d new OrderBook(actualModel.getOrderBook());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cOrder\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredOrderList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getOrderBook());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredOrderList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the order at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * {@code model}\u0027s order book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static void showOrderAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order order \u003d model.getFilteredOrderList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        final String[] splitName \u003d order.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        model.updateFilteredOrderList(new OrderContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(1, model.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 29,
      "-": 97,
      "Amoscheong97": 25,
      "JeremyLoh": 18,
      "khsc96": 2,
      "Cherweijie": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showOrderAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalReturnOrderBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getOrderBook(), model.getReturnOrderBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        showNoOrder(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getOrderBook().getOrderList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ORDER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no orders."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private void showNoOrder(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        model.updateFilteredOrderList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(model.getFilteredOrderList().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 27,
      "-": 75,
      "JeremyLoh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DistrictInfoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class DistrictInfoTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Used to generate invalid arguments for method {@code isValidArea}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Stream of Arguments containing invalid input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Stream\u003cArguments\u003e invalidSearchArgs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"a\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\" \"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Used to generate valid arguments for method {@code isValidArea}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Stream of Arguments containing valid input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Stream\u003cArguments\u003e validSearchArgs() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"central\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"CENTRAL\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"east\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"EAST\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"north-east\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"NORTH-EAST\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"west\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"WEST\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"north\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"NORTH\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void isValidArea_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DistrictInfo.isValidArea(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"invalidSearchArgs\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void isValidArea_invalid_returnsFalse(String args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(DistrictInfo.isValidArea(args));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"validSearchArgs\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void isValidArea_valid_returnsTrue(String args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(DistrictInfo.isValidArea(args));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void sameAreaRegex_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DistrictInfo.sameAreaRegex(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void sameAreaRegex_invalidSearchTerm_returnsEmptyList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String searchTerm \u003d \"La La Land\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e output \u003d DistrictInfo.sameAreaRegex(searchTerm);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(0, output.size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showOrderAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.DoneCommand.MESSAGE_DELIVERED_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.DoneCommand.MESSAGE_ORDER_ALREADY_DELIVERED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalReturnOrderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void execute_orderGetsDelivered_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order orderInFilteredList \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order editedOrder \u003d new OrderBuilder(orderInFilteredList).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_ORDER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                new DoneCommand.DoneOrderDescriptor(editedOrder));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELIVERED_SUCCESS, editedOrder);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new OrderBook(model.getOrderBook()), model.getReturnOrderBook(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        editedOrder.setDeliveryStatus(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        expectedModel.setOrder(model.getFilteredOrderList().get(0), editedOrder);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void execute_orderAlreadyDelivered_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order orderInFilteredList \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order editedOrder \u003d new OrderBuilder(orderInFilteredList).buildDelivered();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_ORDER,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                new DoneCommand.DoneOrderDescriptor(editedOrder));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new OrderBook(model.getOrderBook()), model.getReturnOrderBook(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ORDER_ALREADY_DELIVERED, editedOrder);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        expectedModel.setOrder(model.getFilteredOrderList().get(0), editedOrder);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        model.setOrder(model.getFilteredOrderList().get(0), editedOrder);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(outOfBoundIndex, new DoneCommand.DoneOrderDescriptor());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getOrderBook().getOrderList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(outOfBoundIndex, new DoneCommand.DoneOrderDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order orderInFilteredList \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order order \u003d new OrderBuilder(orderInFilteredList).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        DoneCommand doneFirstCommand \u003d new DoneCommand(INDEX_FIRST_ORDER,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                new DoneCommand.DoneOrderDescriptor(order));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        DoneCommand doneSecondCommand \u003d new DoneCommand(INDEX_SECOND_ORDER,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                new DoneCommand.DoneOrderDescriptor(order));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        DoneCommand doneFirstCommandCopy \u003d new DoneCommand(INDEX_FIRST_ORDER,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                new DoneCommand.DoneOrderDescriptor(order));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommandCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(doneFirstCommand.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(doneFirstCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // different order -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(doneFirstCommand.equals(doneSecondCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 9,
      "Cherweijie": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneOrderDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMY_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BOB_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_NIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TID_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMESTAMP_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_PLASTIC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.logic.commands.DoneCommand.DoneOrderDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.testutil.DoneOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "public class DoneOrderDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        DoneOrderDescriptor descriptorWithSameValues \u003d new DoneOrderDescriptor(AMY_DESC);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertTrue(AMY_DESC.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertTrue(AMY_DESC.equals(AMY_DESC));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(AMY_DESC.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(AMY_DESC.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(AMY_DESC.equals(BOB_DESC));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        DoneOrderDescriptor editedAmy \u003d new DoneOrderDescriptorBuilder(AMY_DESC).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(AMY_DESC.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // different TID -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        editedAmy \u003d new DoneOrderDescriptorBuilder(AMY_DESC).withTid(VALID_TID_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(AMY_DESC.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        editedAmy \u003d new DoneOrderDescriptorBuilder(AMY_DESC).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(AMY_DESC.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        editedAmy \u003d new DoneOrderDescriptorBuilder(AMY_DESC).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(AMY_DESC.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // different delivery timestamp -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        editedAmy \u003d new DoneOrderDescriptorBuilder(AMY_DESC).withTimeStamp(VALID_TIMESTAMP_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(AMY_DESC.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // different comment -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        editedAmy \u003d new DoneOrderDescriptorBuilder(AMY_DESC).withComment(VALID_COMMENT_NIL).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(AMY_DESC.equals(editedAmy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // different Item Types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        editedAmy \u003d new DoneOrderDescriptorBuilder(AMY_DESC).withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertFalse(AMY_DESC.equals(editedAmy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cherweijie": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_PLASTIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showOrderAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_FORCE_CLEAR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalReturnOrderBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.EditOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order editedOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditCommand.EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(editedOrder).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ORDER, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new OrderBook(model.getOrderBook()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new ReturnOrderBook(model.getReturnOrderBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel.setOrder(model.getFilteredOrderList().get(0), editedOrder);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order lastOrder \u003d model.getFilteredOrderList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        OrderBuilder personInList \u003d new OrderBuilder(lastOrder);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order editedOrder \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditCommand.EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new OrderBook(model.getOrderBook()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new ReturnOrderBook(model.getReturnOrderBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel.setOrder(lastOrder, editedOrder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ORDER, new EditCommand.EditOrderDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order editedOrder \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new OrderBook(model.getOrderBook()),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new ReturnOrderBook(model.getReturnOrderBook()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order orderInFilteredList \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order editedOrder \u003d new OrderBuilder(orderInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ORDER,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new EditOrderDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new OrderBook(model.getOrderBook()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new ReturnOrderBook(model.getReturnOrderBook()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel.setOrder(model.getFilteredOrderList().get(0), editedOrder);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute_duplicateOrderUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order firstOrder \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(firstOrder).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ORDER, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute_duplicateOrderFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order orderInList \u003d model.getOrderBook().getOrderList().get(INDEX_SECOND_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ORDER,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new EditOrderDescriptorBuilder(orderInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute_invalidOrderIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditCommand.EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute_invalidOrderIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getOrderBook().getOrderList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new EditOrderDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ORDER, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditCommand.EditOrderDescriptor copyDescriptor \u003d new EditOrderDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ORDER, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand(FLAG_FORCE_CLEAR.toString())));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ORDER, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ORDER, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 41,
      "-": 107,
      "Amoscheong97": 3,
      "JeremyLoh": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditOrderDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_NIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TID_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMESTAMP_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_PLASTIC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.EditOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class EditOrderDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditCommand.EditOrderDescriptor descriptorWithSameValues \u003d new EditOrderDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditOrderDescriptor editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // different TID -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withTid(VALID_TID_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // different delivery timestamp -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withTimeStamp(VALID_TIMESTAMP_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // different comment -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withComment(VALID_COMMENT_NIL).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // different Item Types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 7,
      "-": 46,
      "Amoscheong97": 9,
      "JeremyLoh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/InsertCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalReturnOrderBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code InsertCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "public class InsertCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        model \u003d new ModelManager(getTypicalOrderBook(), getTypicalReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute_newOrder_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order validOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), getTypicalReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel.addOrder(validOrder);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertCommandSuccess(new InsertCommand(validOrder), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                String.format(InsertCommand.MESSAGE_SUCCESS, validOrder), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute_duplicateOrder_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order orderInList \u003d model.getOrderBook().getOrderList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertCommandFailure(new InsertCommand(orderInList), model, InsertCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 6,
      "-": 30,
      "Amoscheong97": 5,
      "JeremyLoh": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/InsertCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "public class InsertCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void constructor_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InsertCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute_orderAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ModelStubAcceptingOrderAdded modelStub \u003d new ModelStubAcceptingOrderAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order validOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        CommandResult commandResult \u003d new InsertCommand(validOrder).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertEquals(String.format(InsertCommand.MESSAGE_SUCCESS, validOrder), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(Arrays.asList(validOrder), modelStub.ordersAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute_duplicateOrder_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order validOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        InsertCommand insertCommand \u003d new InsertCommand(validOrder);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithOrder(validOrder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                InsertCommand.MESSAGE_DUPLICATE_ORDER, () -\u003e insertCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order alice \u003d new OrderBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order bob \u003d new OrderBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        InsertCommand insertAliceCommand \u003d new InsertCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        InsertCommand insertBobCommand \u003d new InsertCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(insertAliceCommand.equals(insertAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        InsertCommand insertAliceCommandCopy \u003d new InsertCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(insertAliceCommand.equals(insertAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertFalse(insertAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertFalse(insertAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertFalse(insertAliceCommand.equals(insertBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void setOrderBookFilePath(Path orderBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void addOrder(Order order) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void setOrderBook(ReadOnlyOrderBook newData) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public ReadOnlyOrderBook getOrderBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void deliverOrder(Order target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        public void renewDeliveryStatus(Order target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public Path getReturnOrderBookFilePath() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void setReturnOrderBookFilePath(Path orderBookFilePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void addReturnOrder(Order order) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void setReturnOrderBook(ReadOnlyReturnOrderBook newData) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public ReadOnlyReturnOrderBook getReturnOrderBook() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public boolean hasReturnOrder(Order order) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void deleteReturnOrder(Order target) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void setReturnOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public ObservableList\u003cOrder\u003e getFilteredReturnOrderList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void updateFilteredReturnOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * A Model stub that contains a single order."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private class ModelStubWithOrder extends ModelStub {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        private final Order order;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ModelStubWithOrder(Order order) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            requireNonNull(order);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            this.order \u003d order;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            requireNonNull(order);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return this.order.isSameOrder(order);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * A Model stub that always accept the order being added."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private class ModelStubAcceptingOrderAdded extends ModelStub {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        final ArrayList\u003cOrder\u003e ordersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            requireNonNull(order);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return ordersAdded.stream().anyMatch(order::isSameOrder);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public void addOrder(Order order) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            requireNonNull(order);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ordersAdded.add(order);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public ReadOnlyOrderBook getOrderBook() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return new OrderBook();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 65,
      "-": 136,
      "Amoscheong97": 15,
      "JeremyLoh": 30,
      "Cherweijie": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showOrderAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalReturnOrderBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        model \u003d new ModelManager(getTypicalOrderBook(), getTypicalReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getOrderBook(), model.getReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST_ORDER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 7,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NearbyCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalReturnOrderBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Contains integration tests (interactions with the Model) and unit test for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * {@code NearbyCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class NearbyCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String invalidPostalSector;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String invalidArea;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Predicate\u003cOrder\u003e ordersInJurong;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Predicate\u003cOrder\u003e eastArea;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        invalidPostalSector \u003d \"4000\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        invalidArea \u003d \"La La Land\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ordersInJurong \u003d order -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String[] postalSectors \u003d new String[]{\"S60\", \"S61\", \"S62\", \"S63\", \"S64\"};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String orderAddress \u003d order.getAddress().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            for (String sector : postalSectors) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                if (orderAddress.contains(sector)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e areaRegex \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \".*S16\\\\d{4}.*\", \".*S17\\\\d{4}.*\", \".*S18\\\\d{4}.*\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        eastArea \u003d order -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String orderAddress \u003d order.getAddress().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return areaRegex.stream().anyMatch(regex -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Pattern p \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Matcher m \u003d p.matcher(orderAddress);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                return m.matches();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void execute_validAreaUnfilteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String searchTerm \u003d \"east\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        NearbyCommand nearbyCommand \u003d new NearbyCommand(searchTerm);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getOrderBook(), model.getReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expectedModel.updateFilteredOrderList(eastArea);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(NearbyCommand.MESSAGE_SUCCESS_AREA, searchTerm);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandSuccess(nearbyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void execute_validAreaNoMatchingOrderFilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String searchTerm \u003d \"east\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(NearbyCommand.MESSAGE_SUCCESS_AREA, searchTerm);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        NearbyCommand nearbyCommand \u003d new NearbyCommand(searchTerm);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getOrderBook(), model.getReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        showNoOrder(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandSuccess(nearbyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void execute_validPostalSectorUnfilteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"64\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Index postalSector \u003d Index.fromOneBased(64);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cString\u003e location \u003d NearbyCommandUtil.getGeneralLocation(postalSector);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (location.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fail(\"Given postal sector is not valid\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        NearbyCommand nearbyCommand \u003d new NearbyCommand(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getOrderBook(), model.getReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expectedModel.updateFilteredOrderList(ordersInJurong);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(NearbyCommand.MESSAGE_SUCCESS_POSTAL_SECTOR,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                location.get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandSuccess(nearbyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void execute_validPostalSectorNoMatchingOrderFilteredList_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"7\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Index postalSector \u003d Index.fromOneBased(7);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cString\u003e location \u003d NearbyCommandUtil.getGeneralLocation(postalSector);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (location.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fail(\"Given postal sector is not valid\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(NearbyCommand.MESSAGE_SUCCESS_POSTAL_SECTOR,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                location.get());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        NearbyCommand nearbyCommand \u003d new NearbyCommand(input);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getOrderBook(), model.getReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        showNoOrder(expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandSuccess(nearbyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void execute_invalidPostalSectorUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        NearbyCommand nearbyCommand \u003d new NearbyCommand(invalidPostalSector);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandFailure(nearbyCommand, model, NearbyCommand.MESSAGE_FAILURE_POSTAL_SECTOR);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void execute_invalidAreaUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        NearbyCommand nearbyCommand \u003d new NearbyCommand(invalidArea);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertCommandFailure(nearbyCommand, model, NearbyCommand.MESSAGE_FAILURE_AREA);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no orders."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param model used for changing filtered list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private void showNoOrder(Model model) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        model.updateFilteredOrderList(p -\u003e false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(model.getFilteredOrderList().isEmpty());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 6,
      "JeremyLoh": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NearbyCommandUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class NearbyCommandUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static final Index INVALID_POSTAL_SECTOR \u003d Index.fromOneBased(4000);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static final Index VALID_POSTAL_SECTOR \u003d Index.fromOneBased(14);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location1 \u003d \"Raffles Place, Cecil, Marina, People’s Park\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location2 \u003d \"Anson, Tanjong Pagar\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location3 \u003d \"Queenstown, Tiong Bahru\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location4 \u003d \"Telok Blangah, Harbourfront\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location5 \u003d \"Pasir Panjang, Hong Leong Garden, Clementi New Town\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location6 \u003d \"High Street, Beach Road (part)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location7 \u003d \"Middle Road, Golden Mile\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location8 \u003d \"Little India\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location9 \u003d \"Orchard, Cairnhill, River Valley\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location10 \u003d \"Ardmore, Bukit Timah, Holland Road, Tanglin\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location11 \u003d \"Watten Estate, Novena, Thomson\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location12 \u003d \"Balestier, Toa Payoh, Serangoon\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location13 \u003d \"Macpherson, Braddell\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location14 \u003d \"Geylang, Eunos\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location15 \u003d \"Katong, Joo Chiat, Amber Road\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location16 \u003d \"Bedok, Upper East Coast, Eastwood, Kew Drive\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location17 \u003d \"Loyang, Changi\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location18 \u003d \"Tampines, Pasir Ris\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location19 \u003d \"Serangoon Garden, Hougang, Punggol\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location20 \u003d \"Bishan, Ang Mo Kio\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location21 \u003d \"Upper Bukit Timah, Clementi Park, Ulu Pandan\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location22 \u003d \"Jurong\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location23 \u003d \"Hillview, Dairy Farm, Bukit Panjang, Choa Chu Kang\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location24 \u003d \"Lim Chu Kang, Tengah\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location25 \u003d \"Kranji, Woodgrove\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location26 \u003d \"Upper Thomson, Springleaf\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location27 \u003d \"Yishun, Sembawang\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String location28 \u003d \"Seletar\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"sectorGeneralLocation\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void getGeneralLocation_validPostalSector_returnsGeneralLocation(Index postalSector,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                                                                     String expectedLocation) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cString\u003e value \u003d NearbyCommandUtil.getGeneralLocation(postalSector);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (value.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fail(\"Should return a general location.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedLocation, value.get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"sameLocation\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void sameGeneralLocation_validLocation_returnsList(String location, List\u003cString\u003e expectedPostalSectors) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedPostalSectors, NearbyCommandUtil.sameGeneralLocation(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void getGeneralLocation_invalidPostalSector_returnEmptyOptional() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cString\u003e value \u003d NearbyCommandUtil.getGeneralLocation(INVALID_POSTAL_SECTOR);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(value.isEmpty());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void getGeneralLocation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e NearbyCommandUtil.getGeneralLocation(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void isValidPostalSector_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e NearbyCommandUtil.isValidPostalSector(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void isValidPostalSector_invalidPostalSector_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(NearbyCommandUtil.isValidPostalSector(INVALID_POSTAL_SECTOR));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void isValidPostalSector_validPostalSector_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(NearbyCommandUtil.isValidPostalSector(VALID_POSTAL_SECTOR));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Used to generate list of sectors belonging to the same general location"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Stream of arguments containing location and list of sectors"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Stream\u003cArguments\u003e sameLocation() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector1 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S01\", \"S02\", \"S03\", \"S04\", \"S05\", \"S06\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector2 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S07\", \"S08\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector3 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S14\", \"S15\", \"S16\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector4 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S09\", \"S10\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector5 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S11\", \"S12\", \"S13\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector6 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Collections.singletonList(\"S17\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector7 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S18\", \"S19\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector8 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S20\", \"S21\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector9 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S22\", \"S23\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector10 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S24\", \"S25\", \"S26\", \"S27\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector11 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S28\", \"S29\", \"S30\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector12 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S31\", \"S32\", \"S33\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector13 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S34\", \"S35\", \"S36\", \"S37\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector14 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S38\", \"S39\", \"S40\", \"S41\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector15 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S42\", \"S43\", \"S44\", \"S45\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector16 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S46\", \"S47\", \"S48\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector17 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S49\", \"S50\", \"S81\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector18 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S51\", \"S52\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector19 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S53\", \"S54\", \"S55\", \"S82\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector20 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S56\", \"S57\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector21 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S58\", \"S59\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector22 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S60\", \"S61\", \"S62\", \"S63\", \"S64\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector23 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S65\", \"S66\", \"S67\", \"S68\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector24 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S69\", \"S70\", \"S71\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector25 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S72\", \"S73\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector26 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S77\", \"S78\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector27 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S75\", \"S76\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cString\u003e sector28 \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arrays.asList(\"S79\", \"S80\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location1, sector1),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location2, sector2),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location3, sector3),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location4, sector4),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location5, sector5),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location6, sector6),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location7, sector7),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location8, sector8),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location9, sector9),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location10, sector10),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location11, sector11),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location12, sector12),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location13, sector13),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location14, sector14),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location15, sector15),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location16, sector16),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location17, sector17),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location18, sector18),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location19, sector19),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location20, sector20),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location21, sector21),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location22, sector22),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location23, sector23),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location24, sector24),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location25, sector25),"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location26, sector26),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location27, sector27),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(location28, sector28)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Used to generate location information for all sectors"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Stream of arguments containing postal sector and location information"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Stream\u003cArguments\u003e sectorGeneralLocation() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(1), location1),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(2), location1),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(3), location1),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(4), location1),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(5), location1),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(6), location1),"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(7), location2),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(8), location2),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(14), location3),"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(15), location3),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(16), location3),"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(9), location4),"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(10), location4),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(11), location5),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(12), location5),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(13), location5),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(17), location6),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(18), location7),"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(19), location7),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(20), location8),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(21), location8),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(22), location9),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(23), location9),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(24), location10),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(25), location10),"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(26), location10),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(27), location10),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(28), location11),"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(29), location11),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(30), location11),"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(31), location12),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(32), location12),"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(33), location12),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(34), location13),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(35), location13),"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(36), location13),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(37), location13),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(38), location14),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(39), location14),"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(40), location14),"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(41), location14),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(42), location15),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(43), location15),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(44), location15),"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(45), location15),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(46), location16),"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(47), location16),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(48), location16),"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(49), location17),"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(50), location17),"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(81), location17),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(51), location18),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(52), location18),"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(53), location19),"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(54), location19),"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(55), location19),"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(82), location19),"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(56), location20),"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(57), location20),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(58), location21),"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(59), location21),"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(60), location22),"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(61), location22),"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(62), location22),"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(63), location22),"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(64), location22),"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(65), location23),"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(66), location23),"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(67), location23),"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(68), location23),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(69), location24),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(70), location24),"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(71), location24),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(72), location25),"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(73), location25),"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(77), location26),"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(78), location26),"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(75), location27),"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(76), location27),"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(79), location28),"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(Index.fromOneBased(80), location28)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 337
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ORDERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalReturnOrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.model.order.OrderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khsc96"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khsc96"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalOrderBook(), getTypicalReturnOrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                new OrderContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                new OrderContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        SearchCommand findFirstCommand \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        SearchCommand findSecondCommand \u003d new SearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        SearchCommand findFirstCommandCopy \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ORDERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel.updateFilteredOrderList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredOrderList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ORDERS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedModel.updateFilteredOrderList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredOrderList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khsc96"
        },
        "content": "     * Parses {@code userInput} into a {@code OrderContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private OrderContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        return new OrderContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 8,
      "-": 53,
      "JeremyLoh": 6,
      "khsc96": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClearCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_FORCE_CLEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "class ClearCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private ClearCommandParser parser \u003d new ClearCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void parse_invalidFlag_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertParseFailure(parser, \"-h\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void parse_withoutFlag_returnNull() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            ClearCommand actualCommand \u003d parser.parse(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            assertNull(actualCommand.getFlag());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void parse_correctFlag_returnCorrectCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            ClearCommand actualCommand \u003d parser.parse(FLAG_FORCE_CLEAR.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            ClearCommand expectedCommand \u003d new ClearCommand(FLAG_FORCE_CLEAR.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            assertEquals(actualCommand, expectedCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ORDER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DoneCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ORDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        DoneCommand.DoneOrderDescriptor descriptor \u003d new DoneCommand.DoneOrderDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DoneCommand(INDEX_FIRST_ORDER, descriptor));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseSuccess(parser, \"2\", new DoneCommand(INDEX_SECOND_ORDER, descriptor));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseSuccess(parser, \"3\", new DoneCommand(INDEX_THIRD_ORDER, descriptor));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, \"@\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cherweijie": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COD_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMMENT_DESC_INSTRUCTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_TIMESTAMP_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_TIMESTAMP_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_TIMESTAMP_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_TIMESTAMP_DATE_ONLY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_TIMESTAMP_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_TIMESTAMP_TIME_ONLY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TID_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TID_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_GLASS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_PLASTIC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COD_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_INSTRUCTION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_NIL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TID_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TID_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMESTAMP_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMESTAMP_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_GLASS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAREHOUSE_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAREHOUSE_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WAREHOUSE_DESC_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WAREHOUSE_DESC_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ORDER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.EditOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String COMMENT_EMPTY \u003d \" \" + PREFIX_COMMENT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // No date input"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DELIVERY_TIMESTAMP_TIME_ONLY, TimeStamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // No time input"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DELIVERY_TIMESTAMP_DATE_ONLY, TimeStamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // Invalid time"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DELIVERY_TIMESTAMP_TIME, TimeStamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // Invalid date"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DELIVERY_TIMESTAMP_DATE, TimeStamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        //Invalid itemType"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TYPE_DESC, TypeOfItem.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // invalid phone followed by valid address"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + ADDRESS_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // input a empty comment after the prefix comment"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertParseFailure(parser, \"1\" + COMMENT_EMPTY + TYPE_DESC_GLASS + TYPE_DESC_PLASTIC,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                Comment.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TYPE_DESC_GLASS"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + COMMENT_DESC_INSTRUCTION + ADDRESS_DESC_AMY + NAME_DESC_AMY"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + DELIVERY_TIMESTAMP_DESC_AMY + TID_DESC_AMY + WAREHOUSE_DESC_AMY + COD_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditCommand.EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_AMY).withTid(VALID_TID_AMY)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withTimeStamp(VALID_TIMESTAMP_AMY).withWarehouse(VALID_WAREHOUSE_AMY).withCash(VALID_COD_AMY)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withComment(VALID_COMMENT_INSTRUCTION).withItemType(VALID_TYPE_GLASS).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditCommand.EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ORDER;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditCommand.EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // TID"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TID_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withTid(VALID_TID_AMY).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // warehouse"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + WAREHOUSE_DESC_AMY;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withWarehouse(VALID_WAREHOUSE_AMY).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // cashOnDelivery"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COD_DESC_AMY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withCash(VALID_COD_AMY).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // timeStamp"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DELIVERY_TIMESTAMP_DESC_AMY;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withTimeStamp(VALID_TIMESTAMP_AMY).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // comment"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COMMENT_DESC_INSTRUCTION;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withComment(VALID_COMMENT_INSTRUCTION).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // type of item"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TYPE_DESC_GLASS;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withItemType(VALID_TYPE_GLASS).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + TID_DESC_AMY"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + VALID_COMMENT_NIL + TYPE_DESC_PLASTIC + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + TID_DESC_AMY + COMMENT_DESC_INSTRUCTION + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + DELIVERY_TIMESTAMP_DESC_AMY + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + DELIVERY_TIMESTAMP_DESC_BOB + TID_DESC_BOB + TYPE_DESC_GLASS;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditCommand.EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTid(VALID_TID_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withTimeStamp(VALID_TIMESTAMP_BOB).withComment(VALID_COMMENT_INSTRUCTION)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withItemType(VALID_TYPE_GLASS)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditCommand.EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + WAREHOUSE_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withPhone(VALID_PHONE_BOB).withWarehouse(VALID_WAREHOUSE_BOB)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 43,
      "-": 140,
      "Amoscheong97": 58,
      "JeremyLoh": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FlagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "class FlagTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static String testFlag \u003d \"test\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void initFlag_returnSameFlag_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Flag expectedFlag \u003d new Flag(testFlag);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new Flag(testFlag), expectedFlag);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void checkHashCode_returnSameHash_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Flag expectedFlag \u003d new Flag(testFlag);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new Flag(testFlag).hashCode(), expectedFlag.hashCode());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void checkIsPrefixClass_returnFalse_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Flag checkFlag \u003d new Flag(testFlag);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(checkFlag.equals(Prefix.class));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void checkSameFlagObject_returnTrue_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Flag checkFlag \u003d new Flag(testFlag);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(checkFlag.equals(checkFlag));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InsertCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COD_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COD_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMMENT_DESC_INSTRUCTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMMENT_DESC_NIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_TIMESTAMP_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_TIMESTAMP_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COD_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMMENT_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_TIMESTAMP_DATE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_TIMESTAMP_DATE_ONLY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_TIMESTAMP_TIME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_TIMESTAMP_TIME_ONLY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TID_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WAREHOUSE_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TID_DESC_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TID_DESC_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_GLASS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_PLASTIC;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COD_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TID_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMESTAMP_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_GLASS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAREHOUSE_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WAREHOUSE_DESC_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WAREHOUSE_DESC_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.logic.commands.InsertCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "public class InsertCommandParserTest {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        Order expectedOrder \u003d new OrderBuilder(BOB).withItemType(VALID_TYPE_GLASS).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + COMMENT_DESC_NIL + TYPE_DESC_GLASS, new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // multiple TIDs - last TID accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseSuccess(parser, TID_DESC_AMY + TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + COMMENT_DESC_NIL + TYPE_DESC_GLASS, new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertParseSuccess(parser, TID_DESC_BOB + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + COMMENT_DESC_NIL + TYPE_DESC_GLASS, new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertParseSuccess(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + COMMENT_DESC_NIL + TYPE_DESC_GLASS,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseSuccess(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + COD_DESC_BOB + COMMENT_DESC_NIL + TYPE_DESC_GLASS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseSuccess(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + WAREHOUSE_DESC_BOB + COD_DESC_BOB + COMMENT_DESC_NIL + TYPE_DESC_GLASS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // multiple timeStamps - last timeStamp accepted"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseSuccess(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_AMY + DELIVERY_TIMESTAMP_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + WAREHOUSE_DESC_BOB + COD_DESC_BOB + COMMENT_DESC_NIL + TYPE_DESC_GLASS,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // multiple warehouses - last warehouse accepted"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseSuccess(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + WAREHOUSE_DESC_AMY + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + TYPE_DESC_GLASS, new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // multiple cashOnDeliveries - last cashOnDelivery accepted"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertParseSuccess(parser, TID_DESC_BOB + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_AMY"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + COD_DESC_BOB + COMMENT_DESC_NIL + TYPE_DESC_GLASS, new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // multiple comment - last comment accepted"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseSuccess(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + COMMENT_DESC_INSTRUCTION"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + COMMENT_DESC_NIL + TYPE_DESC_GLASS, new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // multiple item types - all accepted"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseSuccess(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB + COMMENT_DESC_NIL"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + TYPE_DESC_PLASTIC + TYPE_DESC_GLASS, new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // zero item types and comment"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        Order expectedOrder \u003d new OrderBuilder(AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseSuccess(parser, TID_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + DELIVERY_TIMESTAMP_DESC_AMY + WAREHOUSE_DESC_AMY + COD_DESC_AMY, new InsertCommand(expectedOrder));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, InsertCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // missing TID prefix"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + VALID_ADDRESS_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // missing timeStamp prefix"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + VALID_ADDRESS_BOB + VALID_TIMESTAMP_BOB + WAREHOUSE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // missing warehouse prefix"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + COD_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // missing cashOnDelivery prefix"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, VALID_TID_BOB + VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + VALID_ADDRESS_BOB + VALID_TIMESTAMP_BOB + VALID_WAREHOUSE_BOB + VALID_COD_BOB, expectedMessage);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // invalid TID"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, INVALID_TID_DESC + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                        + WAREHOUSE_DESC_BOB + COD_DESC_BOB + COMMENT_DESC_NIL + TYPE_DESC_PLASTIC"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                        + TYPE_DESC_GLASS,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                TransactionId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + WAREHOUSE_DESC_BOB + COD_DESC_BOB + COMMENT_DESC_NIL + TYPE_DESC_PLASTIC + TYPE_DESC_GLASS,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                    + COMMENT_DESC_NIL + TYPE_DESC_PLASTIC + TYPE_DESC_GLASS,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + COMMENT_DESC_NIL + TYPE_DESC_PLASTIC + TYPE_DESC_GLASS,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + INVALID_ADDRESS_DESC + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + COD_DESC_BOB + COMMENT_DESC_NIL"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                        + TYPE_DESC_PLASTIC + TYPE_DESC_GLASS,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // invalid timeStamp"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + INVALID_DELIVERY_TIMESTAMP_DATE + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + COMMENT_DESC_NIL + TYPE_DESC_PLASTIC + TYPE_DESC_GLASS, TimeStamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + INVALID_DELIVERY_TIMESTAMP_DATE_ONLY + WAREHOUSE_DESC_BOB"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + COD_DESC_BOB + COMMENT_DESC_NIL + TYPE_DESC_PLASTIC + TYPE_DESC_GLASS, TimeStamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + INVALID_DELIVERY_TIMESTAMP_TIME + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + COMMENT_DESC_NIL + TYPE_DESC_PLASTIC"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + TYPE_DESC_GLASS, TimeStamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + INVALID_DELIVERY_TIMESTAMP_TIME_ONLY + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + COMMENT_DESC_NIL + TYPE_DESC_PLASTIC"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + TYPE_DESC_GLASS, TimeStamp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // invalid warehouse"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + INVALID_WAREHOUSE_DESC"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + COD_DESC_BOB + TYPE_DESC_PLASTIC,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                Warehouse.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // invalid cashOnDelivery"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + INVALID_COD_DESC,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                CashOnDelivery.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // invalid comment"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        + ADDRESS_DESC_BOB + INVALID_COMMENT_DESC + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                        + COD_DESC_BOB + TYPE_DESC_PLASTIC + TYPE_DESC_GLASS,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Comment.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // invalid item type"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB + COMMENT_DESC_NIL"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                + INVALID_TYPE_DESC, TypeOfItem.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertParseFailure(parser, TID_DESC_BOB + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + INVALID_ADDRESS_DESC + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + COD_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DELIVERY_TIMESTAMP_DESC_BOB + WAREHOUSE_DESC_BOB + COD_DESC_BOB"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                + COMMENT_DESC_NIL + TYPE_DESC_PLASTIC + TYPE_DESC_GLASS,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InsertCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 20,
      "-": 69,
      "Amoscheong97": 63,
      "JeremyLoh": 24,
      "Cherweijie": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NearbyCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.commands.NearbyCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class NearbyCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private NearbyCommandParser parser \u003d new NearbyCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Used to generate invalid arguments for Nearby Command Parser."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Stream of Arguments containing invalid input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Stream\u003cArguments\u003e invalidArgs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"    \"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(\"central 1000\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void parse_validArgs_returnsNearbyCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertParseSuccess(parser, \"1\", new NearbyCommand(\"1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertParseSuccess(parser, \"   1   \", new NearbyCommand(\"1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertParseSuccess(parser, \"central\", new NearbyCommand(\"central\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertParseSuccess(parser, \"east\", new NearbyCommand(\"east\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertParseSuccess(parser, \"north-east\", new NearbyCommand(\"north-east\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertParseSuccess(parser, \"west\", new NearbyCommand(\"west\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertParseSuccess(parser, \"north\", new NearbyCommand(\"north\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"invalidArgs\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void parse_invalidArgs_throwsParseException(String arg) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertParseFailure(parser, arg,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NearbyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/OrderBookParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.logic.commands.InsertCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.commands.NearbyCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.model.order.OrderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.EditOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.testutil.OrderUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class OrderBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final OrderBookParser parser \u003d new OrderBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order order \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        InsertCommand command \u003d (InsertCommand) parser.parseCommand(OrderUtil.getInsertCommand(order));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertEquals(new InsertCommand(order), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" -f\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ORDER), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order order \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        EditCommand.EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(order).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + INDEX_FIRST_ORDER.getOneBased() + \" \" + OrderUtil.getEditOrderDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ORDER, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void parseCommand_search() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        SearchCommand command \u003d (SearchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                SearchCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertEquals(new SearchCommand(new OrderContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void parseCommand_nearby() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        NearbyCommand nearbyCommand \u003d (NearbyCommand) parser.parseCommand("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                NearbyCommand.COMMAND_WORD + \" \" + \"1\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(new NearbyCommand(\"1\"), nearbyCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 7,
      "-": 74,
      "Amoscheong97": 3,
      "JeremyLoh": 19,
      "khsc96": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String INVALID_TID \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_COMMENT \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String INVALID_COD \u003d \"AAA\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"#glass\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static final String INVALID_WAREHOUSE_ADDRESS \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_DELIVERY_TIMESTAMP \u003d \"2019-02-29 1350\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String VALID_TID \u003d \"A94848484\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_DELIVERY_TIMESTAMP \u003d \"2020-02-29 1350\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static final String VALID_WAREHOUSE_ADDRESS \u003d \"Goose Road, #01-93\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String VALID_COD \u003d \"$4\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_COMMENT \u003d \"Leave at outside\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String VALID_TYPE_1 \u003d \"glass\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String VALID_TYPE_2 \u003d \"plastic\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, () -\u003e ParserUtil.parseIndex("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(INDEX_FIRST_ORDER, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(INDEX_FIRST_ORDER, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void parseTimeStamp_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTimeStamp((String) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void parseTimeStamp_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTimeStamp(INVALID_DELIVERY_TIMESTAMP));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void parseTimeStamp_validValueWithoutWhitespace_returnsTimeStamp() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        TimeStamp expectedTimeStamp \u003d new TimeStamp(VALID_DELIVERY_TIMESTAMP);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedTimeStamp, ParserUtil.parseTimeStamp(VALID_DELIVERY_TIMESTAMP));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void parseTimeStamp_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String timeStampWithWhitespace \u003d WHITESPACE + VALID_DELIVERY_TIMESTAMP + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        TimeStamp expectedTimeStamp \u003d new TimeStamp(VALID_DELIVERY_TIMESTAMP);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedTimeStamp, ParserUtil.parseTimeStamp(timeStampWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void parseWarehouse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWarehouse(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void parseWarehouse_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWarehouse(INVALID_WAREHOUSE_ADDRESS));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void parseWarehouse_validValueWithoutWhitespace_returnsWarehouse() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Warehouse expectedWarehouse \u003d new Warehouse(VALID_WAREHOUSE_ADDRESS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            assertEquals(expectedWarehouse, ParserUtil.parseWarehouse(VALID_WAREHOUSE_ADDRESS));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fail(\"Should not throw ParseException for parseWarehouse function\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void parseWarehouse_validValueWithWhitespace_returnsTrimmedWarehouse() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String warehouseAddressWithWhitespace \u003d WHITESPACE + VALID_WAREHOUSE_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Warehouse expectedWarehouse \u003d new Warehouse(VALID_WAREHOUSE_ADDRESS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            assertEquals(expectedWarehouse, ParserUtil.parseWarehouse(warehouseAddressWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fail(\"Should not throw ParseException for parseWarehouse function\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void parseTid_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTid((String) null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void parseTid_invalidValue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTid(INVALID_TID));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void parseCash_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCash(INVALID_COD));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void parseCash_null_throwsParseException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCash((String) null));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void parseComment_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseComment((String) null));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void parseComment_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseComment(INVALID_COMMENT));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void parseComment_validValueWithoutWhitespace_returnsComment() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Comment expectedComment \u003d new Comment(VALID_COMMENT);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedComment, ParserUtil.parseComment(VALID_COMMENT));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void parseComment_validValueWithWhitespace_returnsTrimmedComment() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String commentWithWhitespace \u003d WHITESPACE + VALID_COMMENT + WHITESPACE;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Comment expectedComment \u003d new Comment(VALID_COMMENT);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedComment, ParserUtil.parseComment(commentWithWhitespace));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void parseItemType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseItemType(null));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void parseItemType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseItemType(INVALID_TYPE));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void parseItemType_validValueWithoutWhitespace_returnsItemType() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        TypeOfItem expectedType \u003d new TypeOfItem(VALID_TYPE_1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseItemType(VALID_TYPE_1));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void parseItemType_validValueWithWhitespace_returnsTrimmedItemType() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String typeWithWhitespace \u003d WHITESPACE + VALID_TYPE_1 + WHITESPACE;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        TypeOfItem expectedType \u003d new TypeOfItem(VALID_TYPE_1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseItemType(typeWithWhitespace));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 42,
      "-": 156,
      "Amoscheong97": 27,
      "JeremyLoh": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.model.order.KeywordContainsOrderPrefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.model.order.OrderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khsc96"
        },
        "content": "public class SearchCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void parse_validArgs_returnsSearchCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        SearchCommand expectedSearchCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                new SearchCommand(new OrderContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedSearchCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedSearchCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // test overloaded constructor"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasAddress(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        expectedSearchCommand \u003d new SearchCommand("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"), keywordContainsOrderPrefix));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertParseSuccess(parser, \" a/Alice Bob\", expectedSearchCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "khsc96": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE_RETURN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BENSON_RETURN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.model.order.OrderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.OrderBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.testutil.ReturnOrderBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new OrderBook(), modelManager.getOrderBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new ReturnOrderBook(), modelManager.getReturnOrderBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userPrefs.setOrderBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userPrefs.setReturnOrderBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userPrefs.setOrderBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userPrefs.setReturnOrderBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setOrderBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setOrderBookFilePath(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setReturnOrderBookFilePath(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setOrderBookFilePath_validPath_setsOrderBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        modelManager.setOrderBookFilePath(path);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(path, modelManager.getOrderBookFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        modelManager.setReturnOrderBookFilePath(path);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(path, modelManager.getReturnOrderBookFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void hasOrder_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasOrder(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasReturnOrder(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void hasOrder_orderNotInOrderBook_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(modelManager.hasOrder(ALICE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(modelManager.hasReturnOrder(ALICE_RETURN));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void hasOrder_orderInOrderBook_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        modelManager.addOrder(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(modelManager.hasOrder(ALICE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        modelManager.addReturnOrder(ALICE_RETURN);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(modelManager.hasReturnOrder(ALICE_RETURN));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void getFilteredOrderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredOrderList().remove(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void getFilteredReturnOrderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredReturnOrderList().remove(0));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void addReturnOrder_thenSetReturnOrderBook_returnCorrectReturnOrderBook() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        modelManager.addReturnOrder(ALICE_RETURN);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        modelManager.setReturnOrderBook(new ReturnOrderBook());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new ReturnOrderBook(), modelManager.getReturnOrderBook());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        OrderBook deliveryOrderBook \u003d new OrderBookBuilder().withOrder(ALICE).withOrder(BENSON).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBook returnOrderBook \u003d new ReturnOrderBookBuilder().withReturnOrder(ALICE_RETURN)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .withReturnOrder(BENSON_RETURN).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        OrderBook differentDeliveryOrderBook \u003d new OrderBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBook differentReturnOrderBook \u003d new ReturnOrderBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        modelManager \u003d new ModelManager(deliveryOrderBook, returnOrderBook, userPrefs);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(deliveryOrderBook, returnOrderBook, userPrefs);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // different deliveryOrderBook -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentDeliveryOrderBook, returnOrderBook, userPrefs)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // different returnOrderBook -\u003e return false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(deliveryOrderBook, differentReturnOrderBook, userPrefs)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        modelManager.updateFilteredOrderList(new OrderContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(deliveryOrderBook, returnOrderBook, userPrefs)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        modelManager.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        modelManager.updateFilteredReturnOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        differentUserPrefs.setOrderBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(deliveryOrderBook, returnOrderBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 62,
      "-": 102,
      "JeremyLoh": 3,
      "khsc96": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/OrderBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_PLASTIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class OrderBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final OrderBook orderBook \u003d new OrderBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(Collections.emptyList(), orderBook.getOrderList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e orderBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void resetData_withValidReadOnlyOrderBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        OrderBook newData \u003d getTypicalOrderBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        orderBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(newData, orderBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void resetData_withDuplicateOrders_throwsDuplicateOrderException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Two orders with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withItemType(VALID_TYPE_PLASTIC)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cOrder\u003e newOrders \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        OrderBookStub newData \u003d new OrderBookStub(newOrders);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DuplicateOrderException.class, () -\u003e orderBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void hasOrder_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e orderBook.hasOrder(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void hasOrder_orderNotInOrderBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(orderBook.hasOrder(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void hasOrder_orderInOrderBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        orderBook.addOrder(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(orderBook.hasOrder(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void hasOrder_orderWithSameIdentityFieldsInOrderBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        orderBook.addOrder(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withItemType(VALID_TYPE_PLASTIC)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(orderBook.hasOrder(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void getOrderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e orderBook.getOrderList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * A stub ReadOnlyOrderBook whose orders list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static class OrderBookStub implements ReadOnlyOrderBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        private final ObservableList\u003cOrder\u003e orders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        OrderBookStub(Collection\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            this.orders.setAll(orders);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return orders;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 4,
      "Amoscheong97": 3,
      "JeremyLoh": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setOrderBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/comment/CommentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.comment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "class CommentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Comment(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void constructor_invalidComment_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String invalidComment \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Comment(invalidComment));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void isValidComment() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Comment.isValidComment(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(Comment.isValidComment(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(Comment.isValidComment(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(Comment.isValidComment(\"Leave at the riser\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(Comment.isValidComment(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(Comment.isValidComment(\"Please give my neighbour! Her contact is 94561546.\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void usingSameCommentString_generateSameHashCode_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String testComment \u003d \"test\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Comment expectedComment \u003d new Comment(testComment);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(new Comment(\"test\").hashCode(), expectedComment.hashCode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itemtype/TypeOfItemTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "package seedu.address.model.itemtype;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "public class TypeOfItemTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TypeOfItem(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void constructor_invalidComment_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String invalidTypeOfItem \u003d \"*glass\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TypeOfItem(invalidTypeOfItem));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void isValidItemType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TypeOfItem.isValidItemType(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // invalid items"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertFalse(TypeOfItem.isValidItemType(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertFalse(TypeOfItem.isValidItemType(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // valid items"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TypeOfItem.isValidItemType(\"Bottle\")); //one word"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TypeOfItem.isValidItemType(\"ThisIsAVeryLongWord\")); // one long word"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Amoscheong97": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/AddressTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/CashOnDeliveryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "public class CashOnDeliveryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CashOnDelivery(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void constructor_invalidValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String invalidCash \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new CashOnDelivery(invalidCash));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void isValidCash() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // null TID"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CashOnDelivery.isValidCashValue(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // invalid TID"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertFalse(TransactionId.isValidTid(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertFalse(TransactionId.isValidTid(\"   \")); // string with spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TransactionId.isValidTid(\"12345678\")); // numbers only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TransactionId.isValidTid(\"A943739\")); // alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TransactionId.isValidTid(\"$\")); // dollar sign only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // valid TID"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TransactionId.isValidTid(\"$0.01\")); // decimal places only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TransactionId.isValidTid(\"$1\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TransactionId.isValidTid(\"$4.45\")); // number and decimals"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TransactionId.isValidTid(\"$100000000\")); // Huge amount of money"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Amoscheong97": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khsc96"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khsc96"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khsc96"
        },
        "content": "public class OrderContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate firstPredicate \u003d new OrderContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate secondPredicate \u003d new OrderContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_transactionIdContainsKeywordsGeneralSearch_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"1234567890\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withTid(\"1234567890\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"1234567890\", \"087654321\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withTid(\"1234567890\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_nameContainsKeywordsGeneralSearch_returnsTrue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_phoneContainsKeywordGeneralSearch_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"97555838\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withPhone(\"97555838\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"999\", \"98765432\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withPhone(\"999\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_addressContainsKeywordGeneralSearch_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"Geylang\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withAddress(\"Lorong 10 Geylang st 10\").build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"street\", \"81\", \"Yishun\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withAddress(\"Yishun street 81\").build()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Geylang\", \"Serangoon\", \"Tampines\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withAddress(\"Tampines 10\").build()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"cHuAn\", \"GeYLaNg\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withAddress(\"geylang lorong\").build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_timeStampContainsKeywordGeneralSearch_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One keyword full match date and time"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"2020-02-02\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withTimeStamp(\"2020-02-02 1500\").build()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only one matching keyword of date and time"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"2020-01-01\", \"2020-01-02\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withTimeStamp(\"2020-01-02 1500\").build()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only matching time keyword"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"2020-01-01\", \"1500\", \"2020-01-02\", \"1400\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withTimeStamp(\"2020-05-05 1500\").build()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only matching dates keyword"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"2020-05-05\", \"1300\", \"2020-01-02\", \"1400\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withTimeStamp(\"2020-05-05 1200\").build()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_warehouseContainsKeywordGeneralSearch_returnsTrue() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One keyword full match warehouse address"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Arrays.asList(\"5\", \"Toh\", \"Guan\", \"Rd\", \"E\", \"#02-30\", \"S608831\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").build()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only one full matching keyword of warehouse address"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"5\", \"Toh\", \"Guan\", \"Rd\", \"E\", \"Geylang\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withWarehouse(\"Geylang\").build()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Any one word matches the given warehouse address"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Yishun\", \"New\", \"Town\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withWarehouse(\"Yishun Old\").build()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only matches the postal code"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"123456\", \"760844\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withWarehouse(\"Yishun st 71 blk 777 760844\").build()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_cashContainsKeywordGeneralSearch_returnsTrue() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One keyword full match cash on delivery"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"$5\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withCash(\"$5\").build()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only one full matching keyword of cash on delivery"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"$5\", \"$3.50\", \"$0.10\", \"$10\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withCash(\"$10\").build()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_commentsContainsKeywordGeneralSearch_returnsTrue() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One keyword full match comment given"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Arrays.asList(\"Please\", \"say\", \"hi\", \"to\", \"me\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withComment(\"Please say hi to me\").build()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only one full matching keyword of comment given"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Arrays.asList(\"5\", \"hi\", \"S608831\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                \"Put\", \"in\", \"at\", \"my\", \"shoe\", \"rack\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withComment(\"Put in at my shoe rack\").build()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Any one word matches the given comment"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"Hi\"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withComment(\"Say hi to me when you\u0027re here!\").build()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_itemTypeContainsKeywordGeneralSearch_returnsTrue() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One keyword full match comment given"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Arrays.asList(\"Plastic\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withItemType(\"Plastic\").build()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only one full matching keyword of comment given"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Gold\", \"Silver\", \"Plastic\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withItemType(\"Gold\").build()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    // Test for fail cases"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_emptyKeywordGivenInGeneralSearch_returnFalse() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Empty keyword given"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d new OrderContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().build()));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_transactionIdDoesNotContainKeywordsGeneralSearch_returnsFalse() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Non-matching transaction id keyword"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"1234567890\"));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withTid(\"0123947124d\").build()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Permutations of transaction id keyword"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"1234abc\", \"3456def\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withTid(\"4321cba\").build()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Substring of transaction id keyword"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"1234\", \"abc\"));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withTid(\"1234abc\").build()));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_nameDoesNotContainKeywordsGeneralSearch_returnsFalse() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Permutations of keyword"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Aeicl\", \"oBb\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Substring of keyword"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Alic\", \"Bo\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_phoneDoesNotContainKeywordsGeneralSearch_returnsFalse() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Non-matching phone number"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"999\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withPhone(\"12345678\").build()));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Permutations of phone number"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"978\", \"654\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withPhone(\"879\").build()));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Substring of phone number"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"999\", \"888\"));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withPhone(\"99988899\").build()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_addressDoesNotContainKeywordsGeneralSearch_returnsFalse() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Non-matching address"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Arrays.asList(\"Yishun\", \"st\", \"81\"));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withAddress(\"Jurong West 36\").build()));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_timeStampDoesNotContainKeywordsGeneralSearch_returnsFalse() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Non-matching timestamp keyword"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Arrays.asList(\"2020\", \"1345\", \"01\"));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withTimeStamp(\"2040-02-03 1000\").build()));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_warehouseDoesNotContainKeywordsGeneralSearch_returnsFalse() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Non-matching warehouse address keyword"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Arrays.asList(\"Toh\", \"134544\", \"#05-11\"));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withWarehouse(\"Geylang Street 81, #02-30 S608831\").build()));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Missing S in postal code keyword"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Toh\", \"134544\", \"#05-11\"));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withWarehouse(\"Geylang Street 81, #02-30 S134544\").build()));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Missing # in postal code keyword"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Toh\", \"134544\", \"05-11\"));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withWarehouse(\"Geylang Street 81, #05-11 S134544\").build()));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_cashOnDeliveryDoesNotContainKeywordsGeneralSearch_returnsFalse() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Non-matching cash keyword"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"$4\"));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withCash(\"$0.4\").build()));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Substring cash keywords do not match"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"$44\", \"$4.0\"));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withCash(\"$4\").build()));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_commentsDoesNotContainKeywordsGeneralSearch_returnsFalse() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Non-matching comment keyword"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"hi\"));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withComment(\"bye\").build()));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Substring comment keywords do not match"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"hiiiiiiiiiiiiiiiiii\", \"hi\"));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withComment(\"hiii\").build()));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_itemTypeDoesNotContainKeywordsGeneralSearch_returnsFalse() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Non-matching item type keyword"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Plastic\"));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withItemType(\"Gold\").build()));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Substring item type keyword do not match"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Go\", \"ld\"));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withItemType(\"Gold\").build()));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    // Test for overloaded search"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_transactionIdContainsKeywordsSpecificSearch_returnTrue() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasTid(true);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One matching transaction id keywords"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"1234567890\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withTid(\"1234567890\").build()));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Multiple transaction id keywords with only one transaction id matching keyword"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"12345\", \"1023012\", \"12345abc\"),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withTid(\"12345abc\").build()));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_nameContainsKeywordsSpecificSearch_returnTrue() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasName(true);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One matching name keyword"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"Alice\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Multiple matching name keywords"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Mixed-case name keywords"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"ALiCe\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_phoneContainsKeywordsSpecificSearch_returnTrue() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasPhone(true);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One full matching phone keywords"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"12345678\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withPhone(\"12345678\").build()));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only one matching phone keyword with other keywords"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"12345678\", \"111111\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withPhone(\"12345678\").build()));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_addressContainsKeywordsSpecificSearch_returnTrue() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasAddress(true);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One matching address keyword"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"Geylang\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withAddress(\"Geylang\").build()));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Multiple matching address keywords"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Geylang\", \"street\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withAddress(\"Geylang street\").build()));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Mixed-case address keywords"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"geYlAnG\"),"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withAddress(\"Geylang Street\").build()));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_timeStampContainsKeywordsSpecificSearch_returnTrue() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasTimeStamp(true);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Full matching timestamp keywords"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Arrays.asList(\"2020-02-10\", \"1500\"),"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withTimeStamp(\"2020-02-10 1500\").build()));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Full matching timestamp keywords with other keywords"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"2020-02-20\", \"2020-01-10\", \"1500\"),"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withTimeStamp(\"2020-02-10 1500\").build()));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_warehouseContainsKeywordsSpecificSearch_returnTrue() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasWarehouse(true);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One matching warehouse location keyword"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"Yishun\"),"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withWarehouse(\"Yishun Industrial Area Blk 51\").build()));"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Multiple matching warehouse location keywords"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Yishun\", \"St\", \"81\"),"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withWarehouse(\"Yishun st 81\").build()));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_cashOnDeliveryContainsKeywordsSpecificSearch_returnsTrue() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasCod(true);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // keywords full match cash on delivery"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"$5\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withCash(\"$5\").build()));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only one full matching keyword of cash on delivery"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"$5\", \"$3.50\", \"$0.10\", \"$10\"),"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withCash(\"$10\").build()));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_commentContainsKeywordsSpecificSearch_returnsTrue() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasComment(true);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // keywords full match comment given"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Arrays.asList(\"Please\", \"say\", \"hi\", \"to\", \"me\"),"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withComment(\"Please say hi to me\").build()));"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Mixed comment keywords with full matching keyword of comment"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"5\", \"hi\", \"S608831\","
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "khsc96"
        },
        "content": "                \"Put\", \"it\", \"at\", \"my\", \"shoe\", \"rack\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withComment(\"Put it at my shoe rack\").build()));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Any one word matches the given comment"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"Hi\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withComment(\"Say hi to me when you\u0027re here!\").build()));"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    public void test_itemTypeContainsKeywordsSpecificSearch_returnsTrue() {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasItemType(true);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // One keyword full match comment given"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Arrays.asList(\"Plastic\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withItemType(\"Plastic\").build()));"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Only one full matching keyword of comment given"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"Gold\", \"Silver\", \"Plastic\"),"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withItemType(\"Gold\").build()));"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    // Test for overloaded fail cases"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    @Test void test_fieldsOtherThanSpecifiedFieldContainsKeywordSpecificSearch_returnFalse() {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        KeywordContainsOrderPrefix keywordContainsOrderPrefix \u003d new KeywordContainsOrderPrefix();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasName(true);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasPhone(true);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasAddress(true);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasTimeStamp(true);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasWarehouse(true);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasCod(true);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasComment(true);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasItemType(true);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Matching keywords in Transaction ID field but did not search with Transaction ID prefix"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        OrderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            new OrderContainsKeywordsPredicate(Collections.singletonList(\"1234567890\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withTid(\"1234567890\").build()));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Matching keywords in name field but did not search with name prefix"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasTid(true);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasName(false);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"Alice\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Matching keywords in phone field but did not search with phone prefix"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasName(true);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasPhone(false);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"12345678\"),"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withPhone(\"12345678\").build()));"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Matching keywords in address field but did not search with address prefix"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasPhone(true);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasAddress(false);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"Geylang\"),"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withAddress(\"Geylang\").build()));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Matching keywords in timestamp field but did not search with timestamp prefix"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasAddress(true);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasTimeStamp(false);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Arrays.asList(\"2020-02-02\", \"1500\"),"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withTimeStamp(\"2020-02-02 1500\").build()));"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Matching keywords in warehouse address field but did not search with warehouse address prefix"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasTimeStamp(true);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasWarehouse(false);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"Geylang\"),"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withWarehouse(\"Geylang\").build()));"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Matching keywords in COD field but did not search with COD prefix"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasWarehouse(true);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasCod(false);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"$4\"), keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withCash(\"$4\").build()));"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Matching keywords in comment fields but did not search comment prefix"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasCod(true);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasComment(false);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"hi\"),"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withComment(\"hi\").build()));"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "khsc96"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        // Matching keywords in itemType field but did not search with itemType prefix"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasComment(true);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        keywordContainsOrderPrefix.setHasItemType(false);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        predicate \u003d new OrderContainsKeywordsPredicate(Collections.singletonList(\"Plastic\"),"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "khsc96"
        },
        "content": "            keywordContainsOrderPrefix);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "khsc96"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withItemType(\"Plastic\").build()));"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "khsc96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "khsc96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khsc96": 534
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COD_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TID_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_PLASTIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAREHOUSE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class OrderTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void isSameOrder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(ALICE.isSameOrder(ALICE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(ALICE.isSameOrder(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // different transaction ID -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withTid(VALID_TID_BOB).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(ALICE.isSameOrder(editedAlice));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(ALICE.isSameOrder(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertFalse(ALICE.isSameOrder(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withCash(VALID_COD_BOB).withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(ALICE.isSameOrder(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withWarehouse(VALID_WAREHOUSE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "                .withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(ALICE.isSameOrder(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // same name, same phone, same warehouse, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(ALICE.isSameOrder(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order aliceCopy \u003d new OrderBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // different TID -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withTid(VALID_TID_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // different warehouse -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withWarehouse(VALID_WAREHOUSE_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // different item types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "Amoscheong97": 26,
      "JeremyLoh": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/PhoneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/TimeStampTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "class TimeStampTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TimeStamp(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void constructor_invalidTimeStamp_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String invalidDateOnly \u003d \"2019-20-02\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String invalidTimeOnly \u003d \"0213\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String invalidDate \u003d \"2019-02-29 2000\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String invalidTime \u003d \"2020-02-20 2512\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TimeStamp(invalidDateOnly));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TimeStamp(invalidTimeOnly));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TimeStamp(invalidDate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TimeStamp(invalidTime));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void isValidTimeStamp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String invalidDateOnly \u003d \"2019-20-02\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String invalidTimeOnly \u003d \"0213\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String invalidDate \u003d \"2019-02-29 2000\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String invalidTime \u003d \"2020-02-20 2512\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // null timeStamp"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TimeStamp.isValidTimeStamp(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // invalid timeStamp"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(TimeStamp.isValidTimeStamp(\"\")); // empty string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(TimeStamp.isValidTimeStamp(\" \")); // spaces only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(TimeStamp.isValidTimeStamp(invalidDateOnly)); // date only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(TimeStamp.isValidTimeStamp(invalidTimeOnly)); // time only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(TimeStamp.isValidTimeStamp(invalidDate)); // invalid date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(TimeStamp.isValidTimeStamp(invalidTime)); // invalid time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // valid timeStamp"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(TimeStamp.isValidTimeStamp(\"2020-02-10 2000\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/TransactionIdTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "public class TransactionIdTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TransactionId(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String invalidTid \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TransactionId(invalidTid));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void isValidTid() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // null TID"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TransactionId.isValidTid(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // invalid TID"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertFalse(TransactionId.isValidTid(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertFalse(TransactionId.isValidTid(\"   \")); // string with spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        // valid TID"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TransactionId.isValidTid(\"AAAAAAAAAA\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TransactionId.isValidTid(\"12345678\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TransactionId.isValidTid(\"A943739\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertTrue(TransactionId.isValidTid(\"A01010101010101010101\")); // long TID"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Amoscheong97": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/UniqueOrderListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_PLASTIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class UniqueOrderListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private final UniqueOrderList uniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void contains_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueOrderList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void contains_orderNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(uniqueOrderList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void contains_orderInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(uniqueOrderList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void contains_orderWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withItemType(VALID_TYPE_PLASTIC)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(uniqueOrderList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void add_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueOrderList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void add_duplicateOrder_throwsDuplicateOrderException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DuplicateOrderException.class, () -\u003e uniqueOrderList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrder_nullTargetOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueOrderList.setOrder(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrder_nullEditedOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueOrderList.setOrder(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrder_targetOrderNotInList_throwsOrderNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(OrderNotFoundException.class, () -\u003e uniqueOrderList.setOrder(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrder_editedOrderIsSameOrder_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.setOrder(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expectedUniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrder_editedOrderHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withItemType(VALID_TYPE_PLASTIC)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.setOrder(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expectedUniqueOrderList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrder_editedOrderHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.setOrder(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expectedUniqueOrderList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrder_editedOrderHasNonUniqueIdentity_throwsDuplicateOrderException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DuplicateOrderException.class, () -\u003e uniqueOrderList.setOrder(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void remove_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueOrderList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void remove_orderDoesNotExist_throwsOrderNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(OrderNotFoundException.class, () -\u003e uniqueOrderList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void remove_existingOrder_removesOrder() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrders_nullUniqueOrderList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueOrderList.setOrders((UniqueOrderList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrders_uniqueOrderList_replacesOwnListWithProvidedUniqueOrderList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expectedUniqueOrderList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.setOrders(expectedUniqueOrderList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrders_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueOrderList.setOrders((List\u003cOrder\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrders_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cOrder\u003e orderList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        uniqueOrderList.setOrders(orderList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expectedUniqueOrderList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setOrders_listWithDuplicateOrders_throwsDuplicateOrderException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cOrder\u003e listWithDuplicateOrders \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DuplicateOrderException.class, () -\u003e uniqueOrderList.setOrders(listWithDuplicateOrders));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            -\u003e uniqueOrderList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 7,
      "Amoscheong97": 3,
      "JeremyLoh": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/UniqueReturnOrderListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_PLASTIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE_RETURN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BOB_RETURN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateReturnOrderException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.testutil.ReturnOrderBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class UniqueReturnOrderListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final UniqueReturnOrderList uniqueReturnOrderList \u003d new UniqueReturnOrderList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void contains_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReturnOrderList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void contains_orderNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(uniqueReturnOrderList.contains(ALICE_RETURN));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void contains_orderInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.add(ALICE_RETURN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(uniqueReturnOrderList.contains(ALICE_RETURN));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void contains_returnOrderWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.add(ALICE_RETURN);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order editedAlice \u003d new ReturnOrderBuilder(ALICE_RETURN).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(uniqueReturnOrderList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void add_nullReturnOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReturnOrderList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void add_duplicateReturnOrder_throwsDuplicateReturnOrderException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.add(ALICE_RETURN);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DuplicateReturnOrderException.class, () -\u003e uniqueReturnOrderList.add(ALICE_RETURN));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrder_nullTargetOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReturnOrderList.setReturnOrder(null, ALICE_RETURN));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrder_nullEditedOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReturnOrderList.setReturnOrder(ALICE_RETURN, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrder_targetOrderNotInList_throwsOrderNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(OrderNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            uniqueReturnOrderList.setReturnOrder(ALICE_RETURN, ALICE_RETURN));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrder_editedOrderIsSameOrder_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.add(ALICE_RETURN);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.setReturnOrder(ALICE_RETURN, ALICE_RETURN);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        UniqueReturnOrderList expectedUniqueReturnOrderList \u003d new UniqueReturnOrderList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedUniqueReturnOrderList.add(ALICE_RETURN);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedUniqueReturnOrderList, uniqueReturnOrderList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrder_editedOrderHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.add(ALICE_RETURN);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order editedAlice \u003d new ReturnOrderBuilder(ALICE_RETURN).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.setReturnOrder(ALICE_RETURN, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        UniqueReturnOrderList expectedUniqueReturnOrderList \u003d new UniqueReturnOrderList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedUniqueReturnOrderList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedUniqueReturnOrderList, uniqueReturnOrderList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrder_editedOrderHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.add(ALICE_RETURN);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.setReturnOrder(ALICE_RETURN, BOB_RETURN);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        UniqueReturnOrderList expectedUniqueReturnOrderList \u003d new UniqueReturnOrderList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedUniqueReturnOrderList.add(BOB_RETURN);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedUniqueReturnOrderList, uniqueReturnOrderList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrder_editedOrderHasNonUniqueIdentity_throwsDuplicateOrderException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.add(ALICE_RETURN);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.add(BOB_RETURN);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DuplicateReturnOrderException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            uniqueReturnOrderList.setReturnOrder(ALICE_RETURN, BOB_RETURN));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void remove_nullReturnOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReturnOrderList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void remove_returnOrderDoesNotExist_throwsOrderNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(OrderNotFoundException.class, () -\u003e uniqueReturnOrderList.remove(ALICE_RETURN));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void remove_existingReturnOrder_removeRemoveOrder() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.add(ALICE_RETURN);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.remove(ALICE_RETURN);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        UniqueReturnOrderList expectedUniqueReturnOrderList \u003d new UniqueReturnOrderList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedUniqueReturnOrderList, uniqueReturnOrderList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrders_nullUniqueReturnOrderList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            uniqueReturnOrderList.setReturnOrders((UniqueReturnOrderList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrders_uniqueReturnOrderList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.add(ALICE_RETURN);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        UniqueReturnOrderList expectedUniqueReturnOrderList \u003d new UniqueReturnOrderList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedUniqueReturnOrderList.add(BOB_RETURN);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.setReturnOrders(expectedUniqueReturnOrderList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedUniqueReturnOrderList, uniqueReturnOrderList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrders_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueReturnOrderList.setReturnOrders((List\u003cOrder\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrders_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.add(ALICE_RETURN);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cOrder\u003e returnOrderList \u003d Collections.singletonList(BOB_RETURN);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        uniqueReturnOrderList.setReturnOrders(returnOrderList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        UniqueReturnOrderList expectedUniqueReturnOrderList \u003d new UniqueReturnOrderList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expectedUniqueReturnOrderList.add(BOB_RETURN);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(expectedUniqueReturnOrderList, uniqueReturnOrderList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setReturnOrders_listWithDuplicateOrders_throwsDuplicateOrderException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cOrder\u003e listWithDuplicateOrders \u003d Arrays.asList(ALICE_RETURN, ALICE_RETURN);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DuplicateReturnOrderException.class, () -\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            uniqueReturnOrderList.setReturnOrders(listWithDuplicateOrders));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            uniqueReturnOrderList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/WarehouseTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class WarehouseTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Warehouse(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void constructor_invalidWarehouseAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String invalid \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Warehouse(invalid));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Warehouse.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(Warehouse.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(Warehouse.isValidAddress(\"   \")); // string with spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // valid address"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(Warehouse.isValidAddress(\"13 Goose Rd, S048293\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(Warehouse.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(Warehouse.isValidAddress(\"S012948\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Warehouse w1 \u003d new Warehouse(\"S049332\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Warehouse w2 \u003d new Warehouse(\"S060392\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertNotEquals(w1, w2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertNotEquals(w2, w1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Warehouse w3 \u003d new Warehouse(\"S049332\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(w1, w3);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/returnorder/ReturnOrderBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.model.returnorder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_PLASTIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE_RETURN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalReturnOrderBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateReturnOrderException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.testutil.ReturnOrderBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "class ReturnOrderBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final ReturnOrderBook orderBook \u003d new ReturnOrderBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(Collections.emptyList(), orderBook.getReturnOrderList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e orderBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void resetData_withValidReadOnlyOrderBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBook newData \u003d getTypicalReturnOrderBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(newData, orderBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void resetData_withDuplicateOrders_throwsDuplicateOrderException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // Two orders with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order editedAlice \u003d new ReturnOrderBuilder(ALICE_RETURN)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cOrder\u003e newOrders \u003d Arrays.asList(ALICE_RETURN, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBookTest.ReturnOrderBookStub newData \u003d new ReturnOrderBookTest.ReturnOrderBookStub(newOrders);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DuplicateReturnOrderException.class, () -\u003e orderBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void hasOrder_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e orderBook.hasReturnOrder(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void hasOrder_orderNotInOrderBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(orderBook.hasReturnOrder(ALICE_RETURN));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void hasOrder_orderInOrderBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderBook.addReturnOrder(ALICE_RETURN);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(orderBook.hasReturnOrder(ALICE_RETURN));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void hasOrder_orderWithSameIdentityFieldsInOrderBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderBook.addReturnOrder(ALICE_RETURN);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order editedAlice \u003d new ReturnOrderBuilder(ALICE_RETURN)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withItemType(VALID_TYPE_PLASTIC).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(orderBook.hasReturnOrder(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void getOrderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e orderBook.getReturnOrderList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * A stub ReadOnlyReturnOrderBook whose orders list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static class ReturnOrderBookStub implements ReadOnlyReturnOrderBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        private final ObservableList\u003cOrder\u003e returnOrders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBookStub(Collection\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            this.returnOrders.setAll(orders);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        public ObservableList\u003cOrder\u003e getReturnOrderList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return returnOrders;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedOrderTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.storage.JsonAdaptedOrder.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class JsonAdaptedOrderTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String INVALID_TID \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"1234gg.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_TIMESTAMP \u003d \"2019-02-32 1500\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static final String INVALID_WAREHOUSE \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String INVALID_COD \u003d \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_COMMENT \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"#bottle\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String VALID_TID \u003d BENSON.getTid().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_TIMESTAMP \u003d BENSON.getTimestamp().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static final String VALID_WAREHOUSE \u003d BENSON.getWarehouse().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String VALID_COD \u003d BENSON.getCash().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_COMMENT \u003d BENSON.getComment().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private static final String VALID_TYPE \u003d BENSON.getItemType().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private static final boolean VALID_DELIVERY_STATUS \u003d BENSON.isDelivered();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_validOrderDetails_returnsOrder() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(BENSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertEquals(order.toModelType(), BENSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void toModelType_nullTid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(null, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE, VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TransactionId.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void toModelType_invalidTid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(INVALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String expectedMessage \u003d TransactionId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, INVALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_TIMESTAMP, VALID_WAREHOUSE, INVALID_COD, VALID_COMMENT, VALID_TYPE, VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_TIMESTAMP, VALID_ADDRESS, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE, VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_TIMESTAMP, VALID_ADDRESS, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                INVALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidTimeStamp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_ADDRESS, INVALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d TimeStamp.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_nullTimeStamp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                null, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TimeStamp.class.getSimpleName());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void toModelType_invalidWarehouse_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_TIMESTAMP, INVALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String expectedMessage \u003d Warehouse.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void toModelType_nullWarehouse_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_TIMESTAMP, null, VALID_COD, VALID_COMMENT, VALID_TYPE, VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Warehouse.class.getSimpleName());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void toModelType_invalidCashOnDelivery_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_TIMESTAMP, VALID_WAREHOUSE, INVALID_COD, VALID_COMMENT, VALID_TYPE, VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String expectedMessage \u003d CashOnDelivery.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void toModelType_nullCashOnDelivery_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        JsonAdaptedOrder order \u003d new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                VALID_TIMESTAMP, VALID_WAREHOUSE, null, VALID_COMMENT, VALID_TYPE, VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CashOnDelivery.class.getSimpleName());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidComment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedOrder order \u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TIMESTAMP,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        VALID_WAREHOUSE, VALID_COD, INVALID_COMMENT, VALID_TYPE, VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d Comment.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public void toModelType_invalidItemType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedOrder order \u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                new JsonAdaptedOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TIMESTAMP,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "                        VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, INVALID_TYPE, VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        String expectedMessage \u003d TypeOfItem.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 39,
      "-": 56,
      "Amoscheong97": 37,
      "JeremyLoh": 14,
      "Cherweijie": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedReturnOrderTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.storage.JsonAdaptedOrder.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BENSON_RETURN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class JsonAdaptedReturnOrderTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_TID \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"1234gg.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_TIMESTAMP \u003d \"2019-02-32 1500\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_WAREHOUSE \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_COD \u003d \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_COMMENT \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"#bottle\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_TID \u003d BENSON_RETURN.getTid().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON_RETURN.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON_RETURN.getPhone().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON_RETURN.getEmail().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON_RETURN.getAddress().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_TIMESTAMP \u003d BENSON_RETURN.getTimestamp().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_WAREHOUSE \u003d BENSON_RETURN.getWarehouse().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_COD \u003d BENSON_RETURN.getCash().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_COMMENT \u003d BENSON_RETURN.getComment().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final String VALID_TYPE \u003d BENSON_RETURN.getItemType().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final boolean VALID_DELIVERY_STATUS \u003d BENSON_RETURN.isDelivered();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_validReturnOrderDetails_returnsOrder() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(BENSON_RETURN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(returnOrder.toModelType(), BENSON_RETURN);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_nullTid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(null, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TransactionId.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidTid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(INVALID_TID, VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d TransactionId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, INVALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, INVALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, INVALID_PHONE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_EMAIL, VALID_TIMESTAMP, VALID_ADDRESS, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                INVALID_EMAIL, VALID_TIMESTAMP, VALID_ADDRESS, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                INVALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                null, VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidTimeStamp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_ADDRESS, INVALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d TimeStamp.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_nullTimeStamp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_ADDRESS, null, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TimeStamp.class.getSimpleName());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidWarehouse_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_ADDRESS, VALID_TIMESTAMP, INVALID_WAREHOUSE, VALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d Warehouse.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_nullWarehouse_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_ADDRESS, VALID_TIMESTAMP, null, VALID_COD, VALID_COMMENT, VALID_TYPE, VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Warehouse.class.getSimpleName());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidCashOnDelivery_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, INVALID_COD, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d CashOnDelivery.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_nullCashOnDelivery_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_ADDRESS, VALID_TIMESTAMP, VALID_WAREHOUSE, null, VALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CashOnDelivery.class.getSimpleName());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidComment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, INVALID_COMMENT, VALID_TYPE,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d Comment.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidItemType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonAdaptedReturnOrder returnOrder \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                new JsonAdaptedReturnOrder(VALID_TID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        VALID_TIMESTAMP, VALID_WAREHOUSE, VALID_COD, VALID_COMMENT, INVALID_TYPE,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        VALID_DELIVERY_STATUS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d TypeOfItem.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, returnOrder::toModelType);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 215
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonOrderBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class JsonOrderBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonOrderBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void readOrderBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readOrderBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private java.util.Optional\u003cReadOnlyOrderBook\u003e readOrderBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new JsonOrderBookStorage(Paths.get(filePath)).readOrderBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(readOrderBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readOrderBook(\"notJsonFormatOrderBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void readOrderBook_invalidOrderDeliveryOrderBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readOrderBook(\"invalidOrderDeliveryOrderBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void readAndSaveOrderBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempOrderBook.json\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        OrderBook original \u003d getTypicalOrderBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonOrderBookStorage jsonOrderBookStorage \u003d new JsonOrderBookStorage(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        jsonOrderBookStorage.saveOrderBook(original, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReadOnlyOrderBook readBack \u003d jsonOrderBookStorage.readOrderBook(filePath).get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(original, new OrderBook(readBack));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        original.addOrder(HOON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        original.removeOrder(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        jsonOrderBookStorage.saveOrderBook(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        readBack \u003d jsonOrderBookStorage.readOrderBook(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(original, new OrderBook(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        original.addOrder(IDA);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        jsonOrderBookStorage.saveOrderBook(original); // file path not specified"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        readBack \u003d jsonOrderBookStorage.readOrderBook().get(); // file path not specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(original, new OrderBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveOrderBook_nullOrderBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveOrderBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Saves {@code orderBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void saveOrderBook(ReadOnlyOrderBook orderBook, String filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            new JsonOrderBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    .saveOrderBook(orderBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveOrderBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveOrderBook(new OrderBook(), null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonReturnOrderBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE_RETURN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.HOON_RETURN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.IDA_RETURN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalReturnOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class JsonReturnOrderBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonReturnOrderBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void readReturnOrderBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readReturnOrderBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private java.util.Optional\u003cReadOnlyReturnOrderBook\u003e readReturnOrderBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new JsonReturnOrderBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .readReturnOrderBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertFalse(readReturnOrderBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readReturnOrderBook(\"notJsonFormatReturnOrderBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void readReturnOrderBook_invalidOrderReturnOrderBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readReturnOrderBook(\"invalidOrderReturnOrderBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void readAndSaveOrderBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempOrderBook.json\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBook original \u003d getTypicalReturnOrderBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonReturnOrderBookStorage jsonReturnOrderBookStorage \u003d new JsonReturnOrderBookStorage(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        jsonReturnOrderBookStorage.saveReturnOrderBook(original, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReadOnlyReturnOrderBook readBack \u003d jsonReturnOrderBookStorage.readReturnOrderBook(filePath).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(original, new ReturnOrderBook(readBack));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        original.addReturnOrder(HOON_RETURN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        original.removeReturnOrder(ALICE_RETURN);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        jsonReturnOrderBookStorage.saveReturnOrderBook(original, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        readBack \u003d jsonReturnOrderBookStorage.readReturnOrderBook(filePath).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(original, new ReturnOrderBook(readBack));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        original.addReturnOrder(IDA_RETURN);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        jsonReturnOrderBookStorage.saveReturnOrderBook(original); // file path not specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        readBack \u003d jsonReturnOrderBookStorage.readReturnOrderBook().get(); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(original, new ReturnOrderBook(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveReturnOrderBook_nullReturnOrderBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveReturnOrderBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Saves {@code returnOrderBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void saveReturnOrderBook(ReadOnlyReturnOrderBook returnOrderBook, String filePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            new JsonReturnOrderBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    .saveReturnOrderBook(returnOrderBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveReturnOrderBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveReturnOrderBook(new ReturnOrderBook(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableDeliveryOrderBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.testutil.TypicalOrders;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class JsonSerializableDeliveryOrderBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            \"JsonSerializableDeliveryOrderBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Path TYPICAL_ORDER_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalOrdersDeliveryOrderBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Path INVALID_ORDER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidOrderDeliveryOrderBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Path DUPLICATE_ORDER_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateOrderDeliveryOrderBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_typicalOrdersFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonSerializableDeliveryOrderBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ORDER_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                JsonSerializableDeliveryOrderBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        OrderBook deliveryOrderBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        OrderBook typicalDeliveryOrderBook \u003d TypicalOrders.getTypicalOrderBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(deliveryOrderBookFromFile, typicalDeliveryOrderBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidOrderFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonSerializableDeliveryOrderBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ORDER_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                JsonSerializableDeliveryOrderBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_duplicateOrders_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonSerializableDeliveryOrderBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ORDER_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                JsonSerializableDeliveryOrderBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableDeliveryOrderBook.MESSAGE_DUPLICATE_ORDER,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableReturnOrderBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.testutil.TypicalOrders;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class JsonSerializableReturnOrderBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            \"JsonSerializableReturnOrderBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Path TYPICAL_ORDER_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalOrdersReturnOrderBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Path INVALID_ORDER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidOrderReturnOrderBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final Path DUPLICATE_ORDER_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateOrderReturnOrderBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_typicalReturnOrdersFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonSerializableReturnOrderBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ORDER_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                JsonSerializableReturnOrderBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBook returnOrderBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBook typicalOrdersReturnOrderBook \u003d TypicalOrders.getTypicalReturnOrderBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(returnOrderBookFromFile, typicalOrdersReturnOrderBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_invalidOrderFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonSerializableReturnOrderBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ORDER_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                JsonSerializableReturnOrderBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toModelType_duplicateOrders_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonSerializableReturnOrderBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ORDER_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                JsonSerializableReturnOrderBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableReturnOrderBook.MESSAGE_DUPLICATE_RETURN_ORDER,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userPrefs.setOrderBookFilePath(Paths.get(\"orderbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalReturnOrderBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReadOnlyReturnOrderBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonOrderBookStorage deliveryOrderBookStorage \u003d new JsonOrderBookStorage(getTempFilePath(\"ob\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        JsonReturnOrderBookStorage returnOrderBookStorage \u003d new JsonReturnOrderBookStorage(getTempFilePath(\"rob\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        storageManager \u003d new StorageManager(deliveryOrderBookStorage, returnOrderBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void orderBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "         * {@link JsonReturnOrderBookStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonReturnOrderBookStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        OrderBook original \u003d getTypicalOrderBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        storageManager.saveOrderBook(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReadOnlyOrderBook retrieved \u003d storageManager.readOrderBook().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(original, new OrderBook(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void returnOrderBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBook original \u003d getTypicalReturnOrderBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        storageManager.saveReturnOrderBook(original);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReadOnlyReturnOrderBook retrieved \u003d storageManager.readReturnOrderBook().get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertEquals(original, new ReturnOrderBook(retrieved));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void getOrderBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertNotNull(storageManager.getOrderBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void getReturnOrderBookFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertNotNull(storageManager.getReturnOrderBookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 26,
      "-": 56,
      "JeremyLoh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DoneOrderDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.logic.commands.DoneCommand.DoneOrderDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": " * A utility class to help with building EditOrderDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "public class DoneOrderDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private DoneCommand.DoneOrderDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor \u003d new DoneCommand.DoneOrderDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder(DoneCommand.DoneOrderDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        this.descriptor \u003d new DoneOrderDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Returns an {@code DoneOrderDescriptor} with fields containing {@code order}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder(Order order) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor \u003d new DoneOrderDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setTid(order.getTid());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setName(order.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setPhone(order.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setEmail(order.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setAddress(order.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setTimeStamp(order.getTimestamp());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setWarehouse(order.getWarehouse());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setCash(order.getCash());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setComment(order.getComment());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setItemType(order.getItemType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setDeliveryStatus(order.isDelivered());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code Comment} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setComment(new Comment(comment));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code TransactionId} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder withTid(String tid) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setTid(new TransactionId(tid));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code Name} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code Email} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code Address} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code TimeStamp} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder withTimeStamp(String timeStamp) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setTimeStamp(new TimeStamp(timeStamp));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code Warehouse} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder withWarehouse(String warehouseLocation) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setWarehouse(new Warehouse(warehouseLocation));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code CashOnDelivery} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder withCash(String cash) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setCash(new CashOnDelivery(cash));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code TypeOfItem} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneOrderDescriptorBuilder withItemType(String item) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setItemType(new TypeOfItem(item));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public DoneCommand.DoneOrderDescriptor build() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cherweijie": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditOrderDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * A utility class to help with building EditOrderDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class EditOrderDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private EditCommand.EditOrderDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EditOrderDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor \u003d new EditCommand.EditOrderDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EditOrderDescriptorBuilder(EditCommand.EditOrderDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.descriptor \u003d new EditOrderDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an {@code EditOrderDescriptor} with fields containing {@code order}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EditOrderDescriptorBuilder(Order order) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor \u003d new EditOrderDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor.setTid(order.getTid());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor.setName(order.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor.setPhone(order.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setEmail(order.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor.setAddress(order.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        descriptor.setTimeStamp(order.getTimestamp());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor.setWarehouse(order.getWarehouse());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor.setCash(order.getCash());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor.setComment(order.getComment());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor.setItemType(order.getItemType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Sets the {@code Comment} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EditOrderDescriptorBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor.setComment(new Comment(comment));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Sets the {@code TransactionId} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public EditOrderDescriptorBuilder withTid(String tid) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor.setTid(new TransactionId(tid));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Sets the {@code Name} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EditOrderDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EditOrderDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code Email} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public EditOrderDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Sets the {@code Address} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EditOrderDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code TimeStamp} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public EditOrderDescriptorBuilder withTimeStamp(String timeStamp) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        descriptor.setTimeStamp(new TimeStamp(timeStamp));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Sets the {@code Warehouse} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EditOrderDescriptorBuilder withWarehouse(String warehouseLocation) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor.setWarehouse(new Warehouse(warehouseLocation));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Sets the {@code CashOnDelivery} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public EditOrderDescriptorBuilder withCash(String cash) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor.setCash(new CashOnDelivery(cash));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Sets the {@code TypeOfItem} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public EditOrderDescriptorBuilder withItemType(String item) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor.setItemType(new TypeOfItem(item));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EditCommand.EditOrderDescriptor build() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 10,
      "Amoscheong97": 26,
      "JeremyLoh": 87,
      "Cherweijie": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/OrderBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * A utility class to help with building Orderbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " *     {@code OrderBook ab \u003d new OrderBookBuilder().withOrder(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class OrderBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private OrderBook orderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        orderBook \u003d new OrderBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBookBuilder(OrderBook orderBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.orderBook \u003d orderBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Adds a new {@code Order} to the {@code OrderBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBookBuilder withOrder(Order order) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        orderBook.addOrder(order);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 1,
      "JeremyLoh": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/OrderBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * A utility class to help with building Order objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class OrderBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String DEFAULT_TID \u003d \"A98765431\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_TIMESTAMP \u003d \"2020-02-20 1500\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String DEFAULT_WAREHOUSE \u003d \"5 Toh Guan Rd E, #02-30 S608831\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String DEFAULT_COD \u003d \"$3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_COMMENT \u003d \"NIL\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"NIL\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private TransactionId tid;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private TimeStamp timeStamp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Warehouse warehouse;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private CashOnDelivery cod;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Comment comment;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    private TypeOfItem itemType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    private boolean deliveryStatus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBuilder() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        tid \u003d new TransactionId(DEFAULT_TID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        timeStamp \u003d new TimeStamp(DEFAULT_TIMESTAMP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        warehouse \u003d new Warehouse(DEFAULT_WAREHOUSE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        cod \u003d new CashOnDelivery(DEFAULT_COD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        comment \u003d new Comment(DEFAULT_COMMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        itemType \u003d new TypeOfItem(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        deliveryStatus \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Initializes the OrderBuilder with the data of {@code orderToCopy}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBuilder(Order orderToCopy) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        tid \u003d orderToCopy.getTid();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        name \u003d orderToCopy.getName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        phone \u003d orderToCopy.getPhone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        email \u003d orderToCopy.getEmail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        address \u003d orderToCopy.getAddress();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        timeStamp \u003d orderToCopy.getTimestamp();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        warehouse \u003d orderToCopy.getWarehouse();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        cod \u003d orderToCopy.getCash();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        comment \u003d orderToCopy.getComment();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        itemType \u003d orderToCopy.getItemType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        deliveryStatus \u003d orderToCopy.isDelivered();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Sets the {@code TransactionId} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public OrderBuilder withCash(String cod) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.cod \u003d new CashOnDelivery(cod);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Sets the {@code TransactionId} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public OrderBuilder withTid(String tid) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.tid \u003d new TransactionId(tid);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Sets the {@code Name} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBuilder withName(String name) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "     * Sets the {@code TypeOfItem} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public OrderBuilder withItemType(String itemType) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        this.itemType \u003d new TypeOfItem(itemType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Sets the {@code Address} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code TimeStamp} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public OrderBuilder withTimeStamp(String timeStamp) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.timeStamp \u003d new TimeStamp(timeStamp);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Sets the {@code Warehouse} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBuilder withWarehouse(String warehouseLocation) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.warehouse \u003d new Warehouse(warehouseLocation);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Sets the {@code Phone} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public OrderBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code Phone} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public OrderBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code Comment} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public OrderBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.comment \u003d new Comment(comment);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Sets the {@code boolean} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public OrderBuilder withDeliveryStatus(boolean status) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        this.deliveryStatus \u003d status;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Builds a delivered order based on attributes given."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * @return A delivered {@Code Order} with the given attributes"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public Order buildDelivered() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order toBuild \u003d new Order(tid, name, phone, email, address, timeStamp, warehouse, cod, comment, itemType);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        toBuild.setDeliveryStatus(true);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return toBuild;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * Builds a default order based on attributes given."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     * @return A default {@Code Order} with the given attributes"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Order build() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        Order toBuild \u003d new Order(tid, name, phone, email, address, timeStamp, warehouse, cod, comment, itemType);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        toBuild.setDeliveryStatus(false);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        return toBuild;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 26,
      "-": 49,
      "Amoscheong97": 34,
      "JeremyLoh": 32,
      "Cherweijie": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/OrderUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_TIMESTAMP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WAREHOUSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import seedu.address.logic.commands.InsertCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A utility class for Order."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class OrderUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns an add command string for adding the {@code order}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static String getInsertCommand(Order order) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        return InsertCommand.COMMAND_WORD + \" \" + getOrderDetails(order);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the part of command string for the given {@code order}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static String getOrderDetails(Order order) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        sb.append(PREFIX_TID + order.getTid().tid + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        sb.append(PREFIX_NAME + order.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        sb.append(PREFIX_PHONE + order.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        sb.append(PREFIX_EMAIL + order.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        sb.append(PREFIX_ADDRESS + order.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        sb.append(PREFIX_DELIVERY_TIMESTAMP + order.getTimestamp().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        sb.append(PREFIX_WAREHOUSE + order.getWarehouse().address + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        sb.append(PREFIX_COD + order.getCash().cashOnDelivery + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        sb.append(PREFIX_COMMENT + order.getComment().commentMade + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        sb.append(PREFIX_TYPE + order.getItemType().itemType + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the part of command string for the given {@code EditOrderDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static String getEditOrderDescriptorDetails(EditCommand.EditOrderDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor.getTid().ifPresent(Tid -\u003e sb.append(PREFIX_TID).append(Tid.tid).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        descriptor.getTimeStamp().ifPresent(timeStamp -\u003e sb.append(PREFIX_DELIVERY_TIMESTAMP)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                .append(timeStamp.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        descriptor.getWarehouse().ifPresent(warehouse -\u003e sb.append(PREFIX_WAREHOUSE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(warehouse.address).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor.getCash().ifPresent(cash -\u003e sb.append(PREFIX_COD).append(cash.cashOnDelivery).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        descriptor.getComment().ifPresent(comment -\u003e sb.append(PREFIX_COMMENT).append(comment.commentMade).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "        descriptor.getItemType().ifPresent(itemType -\u003e sb.append(PREFIX_TYPE).append(itemType.itemType).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 14,
      "-": 29,
      "Amoscheong97": 14,
      "JeremyLoh": 9,
      "Cherweijie": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ReturnOrderBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A utility class to help with building ReturnOrderbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *     {@code ReturnOrderBook ab \u003d new ReturnOrderBookBuilder().withReturnOrder(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class ReturnOrderBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private ReturnOrderBook orderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderBook \u003d new ReturnOrderBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBookBuilder(ReturnOrderBook orderBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.orderBook \u003d orderBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Adds a new {@code Order} to the {@code OrderBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBookBuilder withReturnOrder(Order order) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        orderBook.addReturnOrder(order);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ReturnOrderBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.comment.Comment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.itemtype.TypeOfItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.CashOnDelivery;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TimeStamp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.TransactionId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Warehouse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A utility class to help with building Return Order objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class ReturnOrderBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_TID \u003d \"A98765431\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_TIMESTAMP \u003d \"2020-02-20 1500\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_WAREHOUSE \u003d \"5 Toh Guan Rd E, #02-30 S608831\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_COD \u003d \"$3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_COMMENT \u003d \"NIL\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"NIL\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private TransactionId tid;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private TimeStamp timeStamp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Warehouse warehouse;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private CashOnDelivery cod;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Comment comment;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private TypeOfItem itemType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private boolean deliveryStatus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        tid \u003d new TransactionId(DEFAULT_TID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        timeStamp \u003d new TimeStamp(DEFAULT_TIMESTAMP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        warehouse \u003d new Warehouse(DEFAULT_WAREHOUSE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        cod \u003d new CashOnDelivery(DEFAULT_COD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        comment \u003d new Comment(DEFAULT_COMMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        itemType \u003d new TypeOfItem(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        deliveryStatus \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Initializes the OrderBuilder with the data of {@code orderToCopy}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder(Order orderToCopy) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        tid \u003d orderToCopy.getTid();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        name \u003d orderToCopy.getName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        phone \u003d orderToCopy.getPhone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        email \u003d orderToCopy.getEmail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        address \u003d orderToCopy.getAddress();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        timeStamp \u003d orderToCopy.getTimestamp();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        warehouse \u003d orderToCopy.getWarehouse();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        cod \u003d orderToCopy.getCash();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        comment \u003d orderToCopy.getComment();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        itemType \u003d orderToCopy.getItemType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        deliveryStatus \u003d orderToCopy.isDelivered();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code TransactionId} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder withCash(String cod) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.cod \u003d new CashOnDelivery(cod);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code TransactionId} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder withTid(String tid) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.tid \u003d new TransactionId(tid);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code Name} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder withName(String name) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code TypeOfItem} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder withItemType(String itemType) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.itemType \u003d new TypeOfItem(itemType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code Address} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code TimeStamp} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder withTimeStamp(String timeStamp) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.timeStamp \u003d new TimeStamp(timeStamp);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code Warehouse} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder withWarehouse(String warehouseLocation) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.warehouse \u003d new Warehouse(warehouseLocation);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code Phone} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code Phone} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code Comment} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.comment \u003d new Comment(comment);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sets the {@code boolean} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReturnOrderBuilder withDeliveryStatus(boolean status) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.deliveryStatus \u003d status;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Builds a delivered order based on attributes given."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return A delivered {@Code Order} with the given attributes"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Order buildDelivered() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order toBuild \u003d new Order(tid, name, phone, email, address, timeStamp, warehouse, cod, comment, itemType);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        toBuild.setDeliveryStatus(true);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return toBuild;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Builds a default order based on attributes given."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return A default {@Code Order} with the given attributes"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Order build() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Order toBuild \u003d new Order(tid, name, phone, email, address, timeStamp, warehouse, cod, comment, itemType);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        toBuild.setDeliveryStatus(false);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return toBuild;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the middle index of the order in the {@code model}\u0027s order list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return Index.fromOneBased(model.getFilteredOrderList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the last index of the order in the {@code model}\u0027s order list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return Index.fromOneBased(model.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns the order in the {@code model}\u0027s order list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static Order getOrder(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return model.getFilteredOrderList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Index INDEX_FIRST_ORDER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Index INDEX_SECOND_ORDER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Index INDEX_THIRD_ORDER \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "    public static final Index INDEX_NINTH_ORDER \u003d Index.fromOneBased(8);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 3,
      "-": 9,
      "Cherweijie": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalOrders.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COD_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COD_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMENT_NIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TID_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TID_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMESTAMP_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMESTAMP_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAREHOUSE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WAREHOUSE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import seedu.address.model.returnorder.ReturnOrderBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * A utility class containing a list of {@code Order} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class TypicalOrders {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final Order ALICE \u003d new OrderBuilder().withTid(\"A93939393\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111 S649520\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .withCash(\"$1.01\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .withItemType(\"glass\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final Order BENSON \u003d new OrderBuilder().withTid(\"B8484848\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25 S120363\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .withCash(\"$5\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final Order CARL \u003d new OrderBuilder().withTid(\"C8483883\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withCash(\"$1.20\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withAddress(\"Telok Blangah Heights, #01-22 S100058\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final Order DANIEL \u003d new OrderBuilder().withTid(\"D93939393\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withCash(\"$5\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withAddress(\"Seletar, S797580\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withItemType(\"bottle\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final Order ELLE \u003d new OrderBuilder().withTid(\"E939393\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withCash(\"$6\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withAddress(\"Upper Thomson Road, S787130\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "    public static final Order FIONA \u003d new OrderBuilder().withTid(\"F01010101\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withCash(\"$2\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withAddress(\"Jurong, S600101\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final Order GEORGE \u003d new OrderBuilder().withTid(\"G9999\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withName(\"George Best\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withCash(\"$6\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withAddress(\"Little India, S218202\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").withItemType(\"drinks\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final Order HOON \u003d new OrderBuilder().withTid(\"H111111\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withCash(\"$5\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withAddress(\"little india, S218202\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final Order IDA \u003d new OrderBuilder().withTid(\"I0000\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withCash(\"$1\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withAddress(\"Macpherson Road, Chengkek, S369225\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Manually added - Order\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final Order AMY \u003d new OrderBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withTid(VALID_TID_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withTimeStamp(VALID_TIMESTAMP_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .withCash(VALID_COD_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withComment(VALID_COMMENT_NIL)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withWarehouse(VALID_WAREHOUSE_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final Order BOB \u003d new OrderBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withTid(VALID_TID_BOB)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cherweijie"
        },
        "content": "            .withTimeStamp(VALID_TIMESTAMP_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .withCash(VALID_COD_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .withWarehouse(VALID_WAREHOUSE_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Amoscheong97"
        },
        "content": "            .withComment(VALID_COMMENT_NIL)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Return Orders \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Order ALICE_RETURN \u003d new OrderBuilder().withTid(\"A93939393\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withCash(\"$1.01\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withItemType(\"glass\").build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Order BENSON_RETURN \u003d new OrderBuilder().withTid(\"B8484848\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withCash(\"$5\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Order CARL_RETURN \u003d new OrderBuilder().withTid(\"C8483883\").withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withEmail(\"example@example.com\").withPhone(\"95352563\").withCash(\"$1.20\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withTimeStamp(\"2020-02-20 1500\").withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Order DANIEL_RETURN \u003d new OrderBuilder().withTid(\"D93939393\").withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withPhone(\"87652533\").withCash(\"$5\").withAddress(\"10th street\").withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withEmail(\"example@example.com\").withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").withItemType(\"bottle\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Order ELLE_RETURN \u003d new OrderBuilder().withTid(\"E939393\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withName(\"Elle Meyer\").withPhone(\"9482224\").withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withCash(\"$6\").withAddress(\"michegan ave\").withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Order FIONA_RETURN \u003d new OrderBuilder().withTid(\"F01010101\")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withName(\"Fiona Kunz\").withPhone(\"9482427\").withCash(\"$2\").withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withAddress(\"little tokyo\").withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Order GEORGE_RETURN \u003d new OrderBuilder().withTid(\"G9999\").withName(\"George Best\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withPhone(\"9482442\").withCash(\"$6\").withAddress(\"4th street\").withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").withItemType(\"drinks\").withEmail(\"example@example.com\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Order HOON_RETURN \u003d new OrderBuilder().withTid(\"H111111\").withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withPhone(\"8482424\").withCash(\"$5\").withAddress(\"little india\").withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").withEmail(\"example@example.com\").build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Order IDA_RETURN \u003d new OrderBuilder().withTid(\"I0000\").withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withPhone(\"8482131\").withCash(\"$1\").withAddress(\"chicago ave\").withTimeStamp(\"2020-02-20 1500\")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withWarehouse(\"5 Toh Guan Rd E, #02-30 S608831\").withEmail(\"example@example.com\").build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    // Manually added - Order\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Order AMY_RETURN \u003d new OrderBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withTid(VALID_TID_AMY).withAddress(VALID_ADDRESS_AMY).withTimeStamp(VALID_TIMESTAMP_AMY)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withCash(VALID_COD_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withComment(VALID_COMMENT_NIL).withWarehouse(VALID_WAREHOUSE_AMY)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static final Order BOB_RETURN \u003d new OrderBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withTid(VALID_TID_BOB).withAddress(VALID_ADDRESS_BOB).withTimeStamp(VALID_TIMESTAMP_BOB)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withCash(VALID_COD_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withWarehouse(VALID_WAREHOUSE_BOB)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .withComment(VALID_COMMENT_NIL)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private TypicalOrders() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an {@code OrderBook} with all the typical orders."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static OrderBook getTypicalOrderBook() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        OrderBook ob \u003d new OrderBook();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        for (Order order : getTypicalOrders()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ob.addOrder(order);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return ob;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Returns an {@code ReturnOrderBook} with all the typical return orders."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static ReturnOrderBook getTypicalReturnOrderBook() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ReturnOrderBook ab \u003d new ReturnOrderBook();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        for (Order order : getTypicalReturnOrders()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            ab.addReturnOrder(order);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static List\u003cOrder\u003e getTypicalReturnOrders() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_RETURN, BENSON_RETURN, CARL_RETURN, DANIEL_RETURN,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                ELLE_RETURN, FIONA_RETURN, GEORGE_RETURN));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static List\u003cOrder\u003e getTypicalOrders() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 84,
      "-": 34,
      "Amoscheong97": 21,
      "JeremyLoh": 69,
      "Cherweijie": 20
    }
  }
]
